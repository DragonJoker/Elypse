void JoinGame()
{
	Overlay_Hide( "Echecs/AvailableGames");
	HideTitle();
	l_titleShown = false;
	OverlayElement_GetByName( "Echecs/Menu/Continuer")->Show();
	OverlayElement_GetByName( "Echecs/Menu/Creer")->Hide();
	OverlayElement_GetByName( "Echecs/Menu/Rejoindre")->Hide();
//	Echo( "JoinGame - " + l_login);
//	Echo( "JoinGame - " + l_selectedGame);
	l_distantCharName = l_selectedGame;
	l_creator = false;
	OverlayElement_GetByName( "Echecs/Player/Text")->SetCaption( "Vous etes le" + endl + "joueur demon");
	Overlay_Show( "Echecs/Player");
};

void CreateGame()
{
	Overlay_Hide( "Echecs/Menu");
	l_creator = true;
	Overlay_Show( "Echecs/WaitingOpponent");
	OverlayElement_GetByName( "Echecs/Menu/Continuer")->Show();
	HideTitle();
	l_titleShown = false;
//	Echo( "CreateGame - " + l_login);
};

void ClickGame()
{
	string cg_strId;
	string cg_gameName;
	overlay cg_panel;
	cg_panel = OverlayElement_MousePickup( MOUSE_POSITION_X, MOUSE_POSITION_Y);
	if (cg_panel->GetName()->find( "/Name") != npos || cg_panel->GetName()->find( "/Count") != npos)
	{
		cg_panel = cg_panel->GetParent();
	};
	cg_strId = cg_panel->GetName();
	strSplitOne( cg_strId, "/");
	strSplitOne( cg_strId, "/");
	strSplitOne( cg_strId, "/");
	l_selectedId = atoi( strSplitOne( cg_strId, "/"));
	cg_gameName = cg_strId;
	
//	Echo( "ClickGame - Panel : " + cg_panel->GetName() + " - Initiator : " + cg_strId);

	if (l_clicked && cg_gameName == l_selectedGame)
	{
		cg_panel->SetMaterial( "Base/Invisible");
		cg_panel->SetBorderMaterial( "Base/Invisible");
		Network_ClientSendMessage( "EchecsClient", pack_int( msJoinGame) + pack_int( 6) + "Echecs" + pack_int( l_selectedId));
	}
	else
	{
		if (l_selectedPanel != NULL)
		{
			l_selectedPanel->SetMaterial( "Base/Invisible");
			l_selectedPanel->SetBorderMaterial( "Base/Invisible");
		};
		cg_panel->SetMaterial( "Base/LowAlphaBlack");
		cg_panel->SetBorderMaterial( "Base/Black");
		l_selectedPanel = cg_panel;
		l_selectedGame = cg_gameName;
		l_clicked = true;
		timer( "GSDoubleClick", TIMERTYPE_ONCE, 0.5)
		{
			l_clicked = false;
		};
	};
};

void AddGame( string ag_name, int ag_idGame, int ag_nbPeople)
{
	Echo( "AddGame : " + ag_name + " - " + itoa( ag_nbPeople));
	overlay ag_container;
	overlay ag_nameOV;
	overlay ag_nbPeopleOV;
	string ag_baseName;
	ag_baseName = "Echecs/AvailableGames/List/" + itoa( ag_idGame) + "/" + ag_name;

	if ( ! OverlayElement_Exists( ag_baseName))
	{
		ag_container = OverlayElement_Create( ag_baseName, "BorderPanelZone", "Echecs/AvailableGames/List");
	}
	else
	{
		ag_container = OverlayElement_GetByName( ag_baseName);
	};
	ag_container->SetMaterial( "Base/Invisible");
	ag_container->SetBorderMaterial( "Base/Invisible");
	ag_container->SetMouseOverMaterial( "Base/LowAlphaBlack");
	ag_container->SetTBBorderSize( 1.0 / GENERAL_SCREEN_HEIGHT, 1.0 / GENERAL_SCREEN_HEIGHT);
	ag_container->SetLRBorderSize( 1.0 / GENERAL_SCREEN_WIDTH, 1.0 / GENERAL_SCREEN_WIDTH);
	ag_container->SetLeft( 0.0);
	ag_container->SetTop( 1.0 + (l_gamesCount * 20));
	ag_container->SetWidth( OverlayElement_GetByName( "Echecs/AvailableGames/List")->GetWidth());
	ag_container->SetHeight( 20.0);

	if ( ! OverlayElement_Exists( ag_baseName + "/Name"))
	{
		ag_nameOV = OverlayElement_Create( ag_baseName + "/Name", "MinigameText", ag_baseName);
	}
	else
	{
		ag_nameOV = OverlayElement_GetByName( ag_baseName + "/Name");
	};
	ag_nameOV->SetFontSize( 22.0);
	ag_nameOV->SetLeft( 5.0);
	ag_nameOV->SetTop( 2.0);
	ag_nameOV->SetWidth( OverlayElement_GetByName( "Echecs/AvailableGames/List")->GetWidth() * 60.0 / 100.0);
	ag_nameOV->SetHeight( 20.0);
	ag_nameOV->SetCaption( ag_name);

	if ( ! OverlayElement_Exists( ag_baseName + "/Count"))
	{
		ag_nbPeopleOV = OverlayElement_Create( ag_baseName + "/Count", "MinigameText", ag_baseName);
	}
	else
	{
		ag_nbPeopleOV = OverlayElement_GetByName( ag_baseName + "/Count");
	};
	ag_nbPeopleOV->SetFontSize( 22.0);
	ag_nbPeopleOV->SetLeft( 5.0 + OverlayElement_GetByName( "Echecs/AvailableGames/List")->GetWidth() * 70.0 / 100.0);
	ag_nbPeopleOV->SetTop( 2.0);
	ag_nbPeopleOV->SetWidth( OverlayElement_GetByName( "Echecs/AvailableGames/List")->GetWidth() * 40.0 / 100.0);
	ag_nbPeopleOV->SetHeight( 20.0);
	ag_nbPeopleOV->SetCaption( itoa( ag_nbPeople));

	Overlay_SetAction( ag_baseName)
	{
		ClickGame();
	};

	Overlay_SetAction( ag_baseName + "/Name")
	{
		ClickGame();
	};

	Overlay_SetAction( ag_baseName + "/Count")
	{
		ClickGame();
	};

	l_gamesCount++;
};

void RefreshGamesList( string rgl_pMessage)
{
	l_gamesCount = 0;
	int rgl_gamesCount;
	int rgl_msgIndex;
	rgl_msgIndex = 0;
	rgl_gamesCount = unpack_int( substr( rgl_pMessage, rgl_msgIndex, 4));
	Echo( "Games number : " + itoa( rgl_gamesCount));
	rgl_msgIndex += 4;
	int rgl_strLength;
	string rgl_name;
	int rgl_gameId;
	int rgl_nbPeople;
	for (i = 0 ; i < rgl_gamesCount ; i++)
	{
		rgl_gameId = unpack_int( substr( rgl_pMessage, rgl_msgIndex, 4));
		rgl_msgIndex += 4;
		rgl_nbPeople = unpack_int( substr( rgl_pMessage, rgl_msgIndex, 4));
		rgl_msgIndex += 4;
		rgl_strLength = unpack_int( substr( rgl_pMessage, rgl_msgIndex, 4));
		rgl_msgIndex += 4;
		rgl_name = substr( rgl_pMessage, rgl_msgIndex, rgl_strLength);
		rgl_msgIndex += rgl_strLength;
		AddGame( rgl_name, rgl_gameId, rgl_nbPeople);
	};

	OverlayElement_GetByName( "Echecs/AvailableGames/StartedNb")->SetCaption( itoa( rtoi( rand( 10.0, 15.0))));
};

void AddPlayer( string ap_message)
{
	int ap_index;
	int ap_length;
	string ap_name;

	ap_index = 0;
	ap_length = unpack_int( substr( ap_message, ap_index, 4));
	ap_index += 4;
	ap_name = substr( ap_message, ap_index, ap_length);
	ap_index += ap_length;

	Echo( "AddPlayer - " + ap_name);

	OverlayElement_GetByName( "Echecs/OpponentName/Text")->SetCaption( ap_name);
	if (l_creator)
	{
		OverlayElement_GetByName( "Echecs/WaitingOpponent/Text")->SetCaption( ap_name + " a rejoint votre partie");
		OverlayElement_GetByName( "Echecs/Player/Text")->SetCaption( "Vous etes le" + endl + "joueur ange");
		Overlay_Show( "Echecs/Player");
	};
	timer( "showopponent", TIMERTYPE_ONCE, 2.0)
	{
		Overlay_Hide( "Echecs/WaitingOpponent");
		Network_ClientSendMessage( "EchecsClient", pack_int( msGameStart));
	};
	l_distantCharName = ap_name;
};

void DistantMoveOrTake( string dmot_message, bool dmot_take)
{
	Echo( "DistantMoveOrTake");
	int dmot_size;
	int dmot_index;
	string dmot_name;
	dmot_index = 0;

	dmot_size = unpack_int( substr( dmot_message, dmot_index, 4));
	dmot_index += 4;

	dmot_name = substr( dmot_message, dmot_index, dmot_size);
	dmot_index += dmot_size;

	l_pastNode = SceneNode_GetByName( dmot_name);
	l_distantNode = l_pastNode;

	l_position = unpack_vector3( substr( dmot_message, dmot_index, 12));
	dmot_index += 12;

	l_previousPositionX = unpack_int( substr( dmot_message, dmot_index, 4));
	dmot_index += 4;

	l_previousPositionY = unpack_int( substr( dmot_message, dmot_index, 4));
	dmot_index += 4;

	l_x = unpack_int( substr( dmot_message, dmot_index, 4));
	dmot_index += 4;

	l_y = unpack_int( substr( dmot_message, dmot_index, 4));
	dmot_index += 4;

	g_placementPieces_save = g_placementPieces;
	g_pieceNature_save = g_pieceNature;
	if (dmot_take)
	{
		_take();
	};
	_move();
	_checkKingStatus();

	_deselect();
	_checkAttaques();

	if ( ! g_echec)
	{
		SceneNode_GetByName( "fx_selected")->SetPosition( l_distantNode->GetPosition() + SetVector3( 0.0, 0.9, 0.0));
		Object_GetByName( "fx_selected")->Show();
	};
};

void DistantChangePion( string dcp_message)
{
	int dcp_index;
	int dcp_x;
	int dcp_y;

	dcp_x = unpack_int( substr( dcp_message, dcp_index, 4));
	dcp_index += 4;

	dcp_y = unpack_int( substr( dcp_message, dcp_index, 4));
	dcp_index += 4;

	char dcp_pionRequiredToChange;
	char dcp_tempChar;
	dcp_pionRequiredToChange = atoc( substr( dcp_message, dcp_index, 1));
	dcp_index += 1;

	dcp_tempChar = atoc( substr( dcp_message, dcp_index, 1));
	dcp_index += 1;

	int dcp_temp;
	string dcp_tempString;
	if ( g_turn)
	{
		dcp_temp = (ctoi( dcp_pionRequiredToChange - 'a'));
		dcp_tempString = ctoa( dcp_tempChar) + "_echec_ange.mesh";
	}
	else
	{
		dcp_temp = (ctoi( dcp_pionRequiredToChange - 'A') + 16);
		dcp_tempString = ctoa( dcp_tempChar) + "_echec_demon.mesh";
	};

	Object_Destroy( Object_GetByName( "Piece_" + dcp_pionRequiredToChange));
	l_object = Object_Create( "Piece_" + dcp_pionRequiredToChange, dcp_tempString);
	l_object->SetParent( SceneNode_GetByName( "Piece_" + dcp_pionRequiredToChange));
	l_object->Show();
	strSetChar( g_placementPieces, dcp_x + 8 * dcp_y, dcp_pionRequiredToChange);
	strSetChar( g_pieceNature, dcp_temp, dcp_tempChar);
};

void BeginNetGame()
{
	Overlay_Show( "Echecs/Abandon");
	Overlay_Hide( "Echecs/Result");
	Overlay_Hide( "Echecs/WaitingOpponent");
	Overlay_Show( "Echecs/Player");
	g_turn = false;
	g_inGame = true;
	IsMyTurn();
	UpdatePlayerName();
	InitialiseEchecsGame();
};

void DistantAbandon( string da_name)
{
	Overlay_Hide( "Echecs/Abandon");
	g_inGame = false;
	_win();
	OverlayElement_GetByName( "Echecs/WaitingOpponent/Text")->SetCaption( da_name + endl + "a abandonne");
	Overlay_Show( "Echecs/WaitingOpponent");
	Overlay_Hide( "Echecs/Player");
};

void TreatGameMessage( string tgm_message)
{
	int tgm_index;
	tgm_index = 0;

	int tgm_size;
	string tgm_name;

	tgm_size = unpack_int( substr( tgm_message, tgm_index, 4));
	tgm_index += 4;

	tgm_name = substr( tgm_message, tgm_index, tgm_size);
	tgm_index += tgm_size;

	int tgm_header;
	tgm_header = unpack_int( substr( tgm_message, tgm_index, 4));
	tgm_index += 4;

	if (tgm_header == gm_take || tgm_header == gm_move)
	{
		Echo( "Received move or take message");
		DistantMoveOrTake( substr( tgm_message, tgm_index, npos), (tgm_header == gm_take));
	}
	elseif (tgm_header == gm_change)
	{
		Echo( "Received change message");
		DistantChangePion( substr( tgm_message, tgm_index, npos));
	}
	elseif (tgm_header == gm_abandon)
	{
		Echo( "Received abandon message");
		DistantAbandon( tgm_name);
	};
};

SetNetworkScript()
{
	if (NETWORK_CURRENT_MESSAGE == "disconnected")
	{
		Echo( "Disconnected");
		OverlayElement_GetByName( "Echecs/WaitingOpponent/Text")->SetCaption( "Impossible de" + endl + "se connecter");
	}
	else
	{
		int sns_header;
		sns_header = unpack_int( substr( NETWORK_CURRENT_MESSAGE, 0, 4));

		if (sns_header == mrConnectOK)
		{
			Echo( "Connected");
			OverlayElement_GetByName( "Echecs/WaitingOpponent/Text")->SetCaption( "En attente" + endl + "d'un adversaire");
			Overlay_Hide( "Echecs/WaitingOpponent");
			Overlay_Show( "Echecs/Menu");
		}
		elseif (sns_header == mrConnectFail)
		{
			Echo( "Not Connected");
			OverlayElement_GetByName( "Echecs/WaitingOpponent/Text")->SetCaption( "Impossible de" + endl + "se connecter");
		}
		elseif (sns_header == mrCreateGameOK)
		{
			Echo( "Received Message : CreateGameOK");
			CreateGame();
		}
		elseif (sns_header == mrJoinGameOK)
		{
			Echo( "Received Message : JoinGameOK");
			JoinGame();
		}
		elseif (sns_header == mrQuitGame)
		{
			Echo( "Received Message : QuitGame");
			OverlayElement_GetByName( "Echecs/WaitingOpponent/Text")->SetCaption( l_distantCharName + " a" + endl + " quitte la partie");
			Overlay_Show( "Echecs/WaitingOpponent");
			OverlayElement_GetByName( "Echecs/Menu/Recommencer")->Hide();
		}
		elseif (sns_header == mrGameStart)
		{
			BeginNetGame();
		}
		else
		{
			string sns_message;
			sns_message = substr( NETWORK_CURRENT_MESSAGE, 4, npos);
			if (sns_header == mrRefreshGamesList)
			{
				Echo( "Received Message : RefreshGamesList");
				RefreshGamesList( sns_message);
				Overlay_Hide( "Echecs/Menu");
				Overlay_Show( "Echecs/AvailableGames");
			}
			elseif (sns_header == mrJoinGame)
			{
				Echo( "Received Message : JoinGame");
				AddPlayer( sns_message);
			}
			elseif (sns_header == mrGame)
			{
				TreatGameMessage( sns_message);
			};
		};
	};
};