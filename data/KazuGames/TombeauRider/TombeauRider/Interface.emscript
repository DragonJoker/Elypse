bool g_fucked;

void KazuPlayGame()
{
	g_fucked = true;
};

Overlay_SetAction( "Menu/Jouer")
{
	BeginGame();
};

Overlay_SetAction( "Menu/Continuer")
{
	ContinueGame();
};

Overlay_SetAction( "Menu/Recommencer")
{
	KazuPlayGame();
	if (l_infos == "ok" || g_fucked || l_infos == "tech error")
	{
		StopGame();
		BeginGame();
		OverlayElement_GetByName( "Menu/Recommencer")->Hide();
		OverlayElement_GetByName( "Menu/Continuer")->Show();
	};
};

Overlay_SetAction( "MenuInGame")
{
	PauseGame();
};

Overlay_SetAction( "Menu/Regles")
{
	Overlay_Hide( "Menu");
	Overlay_Show( "Regles");
	if (l_titleShown)
	{
		Overlay_Hide( "Title");
	};
};

Overlay_SetAction( "Menu/Commandes")
{
	Overlay_Hide( "Menu");
	Overlay_Show( "Commandes");
	if (l_titleShown)
	{
		Overlay_Hide( "Title");
	};
};

Overlay_SetAction( "Menu/Options")
{
	Overlay_Hide( "Menu");
	Overlay_Show( "Options");
	if (l_titleShown)
	{
		Overlay_Hide( "Title");
	};
};

Overlay_SetAction( "Menu/Scores")
{
	_retrieveHighScores();
	Overlay_Hide( "Menu");
	Overlay_Show( "Scores");
	if (l_titleShown)
	{
		Overlay_Hide( "Title");
	};
};

Overlay_SetAction( "Scores/Retour")
{
	Overlay_Show( "Menu");
	Overlay_Hide( "Scores");
	if (l_titleShown)
	{
		Overlay_Show( "Title");
	};
};

Overlay_SetAction( "Commandes/Retour")
{
	Overlay_Hide( "Commandes");
	Overlay_Show( "Menu");
	if (l_titleShown)
	{
		Overlay_Show( "Title");
	};
};

Overlay_SetAction( "Regles/Retour")
{
	Overlay_Hide( "Regles");
	Overlay_Show( "Menu");
	if (l_titleShown)
	{
		Overlay_Show( "Title");
	};
};

Overlay_SetAction( "Options/Retour")
{
	Overlay_Hide( "Options");
	Overlay_Show( "Menu");
	if (l_titleShown)
	{
		Overlay_Show( "Title");
	};
};

Overlay_SetAction( "Options/MusicOnOff")
{
	l_music = ( ! l_music);
	Sound_MuteMusic( l_music);

	if ( ! l_music)
	{
		OverlayElement_GetByName( "Options/MusicOnOff")->SetMaterial( "On");
	}
	else
	{
		OverlayElement_GetByName( "Options/MusicOnOff")->SetMaterial( "Off");
	};
};

Overlay_SetAction( "Options/SoundOnOff")
{
	l_sound = ( ! l_sound);
	Sound_MuteSFX( l_sound);

	if ( ! l_sound)
	{
		OverlayElement_GetByName( "Options/SoundOnOff")->SetMaterial( "On");
	}
	else
	{
		OverlayElement_GetByName( "Options/SoundOnOff")->SetMaterial( "Off");
	};
};

void TimerMusic()
{
	timer( "MusicChangeVolume", TIMERTYPE_PERMANENT, 0.0)
	{
		l_ticPos = MOUSE_POSITION_X - l_ticMusic->GetAbsoluteLeft();
		l_ticMusic->Translate( l_ticPos, 0.0);

		l_ticMusic->LimitToParent();

		l_musicVol = l_ticMusic->GetLeft() / l_relativeRegletteWidth;

		Sound_SetMusicVolume( l_musicVol);
	};
};

void TimerSound()
{
	timer( "SoundChangeVolume", TIMERTYPE_PERMANENT, 0.0)
	{
		l_ticPos = MOUSE_POSITION_X - l_ticSound->GetAbsoluteLeft();
		l_ticSound->Translate( l_ticPos, 0.0);

		l_ticSound->LimitToParent();

		l_soundVol = l_ticSound->GetLeft() / l_relativeRegletteWidth;

		Sound_SetSFXVolume( l_soundVol);
	};
};

SetMouseLUpScript()
{
	Timer_Kill( "SoundChangeVolume");
	Timer_Kill( "MusicChangeVolume");
};


Overlay_SetAction( "Options/RegletteMusic")
{
	TimerMusic();
};

Overlay_SetAction( "Options/TicMusic")
{
	TimerMusic();
};

Overlay_SetAction( "Options/RegletteSound")
{
	TimerSound();
};

Overlay_SetAction( "Options/TicSound")
{
	TimerSound();
};

void Mouse_LButtonUp()
{
	Timer_Kill( "MusicChangeVolume");
	Timer_Kill( "SoundChangeVolume");
	Timer_Kill( "mouse_LButtonDown");
};

void Turn()
{
	if (l_animName != l_previousAnimName)
	{
		if (l_animName == "Stand")
		{
			l_charAnims->StopAnimation( l_previousAnimName);
		};
		l_charAnims->StartAnimation( l_animName);
	};

	if (l_acceleration < 0.0)
	{
		if ( ! Timer_Exists( "TurnRight"))
		{
			timer( "TurnRight", TIMERTYPE_ONCE, 0.33)
			{
				l_charAnims->PauseAnimation( "Droite");
				l_playedAnimLength = CURRENTTIMER_TIME_ELAPSED;
			};
		};
	}
	elseif (l_acceleration > 0.0)
	{
		if ( ! Timer_Exists( "TurnLeft"))
		{
			timer( "TurnLeft", TIMERTYPE_ONCE, 0.33)
			{
				l_charAnims->PauseAnimation( "Gauche");
				l_playedAnimLength = CURRENTTIMER_TIME_ELAPSED;
			};
		};
	};
};

BindKey( KEYCODE_LEFT, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inZombie && ! l_rightDown && l_riding)
	{
		l_leftDown = true;
		l_acceleration = 9.81;
		l_previousAnimName = l_animName;
		l_animName = "Gauche";
		Turn();
	};
};

BindKey( KEYCODE_RIGHT, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inZombie && ! l_leftDown && l_riding)
	{
		l_rightDown = true;
		l_acceleration = -9.81;
		l_previousAnimName = l_animName;
		l_animName = "Droite";
		Turn();
	};
};

BindKey( KEYCODE_LEFT, BINDKEY_UP)
{
	Timer_Kill( "TurnRight");
	Timer_Kill( "TurnLeft");
	if (l_inGame && ! l_inZombie && l_leftDown && l_riding)
	{
		l_leftDown = false;
		l_acceleration = 0.0;
		l_previousAnimName = l_animName;
		l_animName = "Stand";
		Turn();
	};
};

BindKey( KEYCODE_RIGHT, BINDKEY_UP)
{
	Timer_Kill( "TurnRight");
	Timer_Kill( "TurnLeft");
	if (l_inGame && ! l_inZombie && l_rightDown && l_riding)
	{
		l_rightDown = false;
		l_acceleration = 0.0;
		l_previousAnimName = l_animName;
		l_animName = "Stand";
		Turn();
	};
};

BindKey( KEYCODE_DOWN, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inZombie)
	{
		timer( "Breaking", TIMERTYPE_REPEAT, 0.01)
		{
			l_charNode;
		};

		if (l_paused)
		{
			Timer_Pause( "Breaking");
		};
	};
};

BindKey( KEYCODE_DOWN, BINDKEY_UP)
{
	if (l_inGame && ! l_inZombie)
	{
		Timer_Kill( "Breaking");
	};
};

BindKey( KEYCODE_ESCAPE, BINDKEY_UP)
{
	if (l_paused)
	{
		ContinueGame();
	}
	else
	{
		PauseGame();
	};
};

BindKey( KEYCODE_P, BINDKEY_UP)
{
	if (l_paused)
	{
		ContinueGame();
	}
	else
	{
		PauseGame();
	};
};

timer( "Initialisation", TIMERTYPE_ONCE, 0.0)
{
	Initialise();
};
