SetMouseLDownScript()
{
//	Echo( "SetMouseLDownScript - My turn ? : " + btoa( l_myTurn));
	if ( ! g_cantPlay && g_inGame && g_myTurn)
	{
//		Echo( "SetMouseLDownScript - My turn");
		l_position = GetGroundCoords( MOUSE_POSITION_X, MOUSE_POSITION_Y);
		l_position = l_position - c_offset;
		l_position = V3_SnapCoords( l_position, 5.0);
		
		l_x = rtoi(((l_position[0])+ 25.0) / 5.0) - 1;
		l_y = rtoi(((l_position[2]) + 25.0) / 5.0) - 1;
		
		if (l_x >= 0 && l_x <= 7 && l_y >= 0 && l_y <= 7)
		{
			GetAtCoords();
			if (l_node != NULL)
			{
				if (g_turn == isUpper( strGetChar( l_node->GetName(), 6)))
				{
					l_pastNode = l_node;
					l_previousPositionX = l_x;
					l_previousPositionY = l_y;
					Echo( "Selected node position : " + vtoa( l_node->GetPosition()));
					_select();
				}
				elseif( l_pastNode != NULL)
				{
					Take();
				};
			}
			elseif( l_pastNode != NULL)
			{
				Move();
			};
		};
	};
};

SetMouseRDownScript()
{
	Echo( "SetMouseRDownScript");
	Timer_Kill( "MouseCamera");
	timer( "MouseCamera", TIMERTYPE_PERMANENT, 0.0)
	{
		RootCamera->GetParent()->Yaw( -0.300 * MOUSE_DIFFERENCE_X);
		current_pitch = previous_pitch - ( 0.200 * MOUSE_DIFFERENCE_Y);

		if (current_pitch > (20.0))
		{
			current_pitch = (20.0);
		}
		elseif( current_pitch < (-40.0))
		{
			current_pitch = (-40.0);
		};

		RootCamera->GetParent()->Pitch( current_pitch - previous_pitch);
		previous_pitch = current_pitch;
	};
};

SetMouseRUpScript()
{
	Timer_Kill( "MouseCamera");
};

Overlay_SetAction( "ChangementPion/Dame")
{
	l_tempChar = 'Q';
	SendChangePionMessage();
	_changePionTo();
};

Overlay_SetAction( "ChangementPion/Tour")
{
	l_tempChar = 'T';
	SendChangePionMessage();
	_changePionTo();
};

Overlay_SetAction( "ChangementPion/Fou")
{
	l_tempChar = 'F';
	SendChangePionMessage();
	_changePionTo();
};

Overlay_SetAction( "ChangementPion/Knight")
{
	l_tempChar = 'C';
	SendChangePionMessage();
	_changePionTo();
};

Overlay_SetAction( "ButtonMenu")
{
	Overlay_Hide( "ButtonMenu");
	OverlayElement_GetByName( "Echecs/Menu/Continuer")->Show();
	Overlay_Show( "Echecs/Menu");
	g_inGame = false;
	Overlay_Hide( "Echecs/Player");
};

void ShowTitle()
{
	if (l_titleShown)
	{
		Overlay_Show( "Echecs/Title");
	};
};

void HideTitle()
{
	if (l_titleShown)
	{
		Overlay_Hide( "Echecs/Title");
	};
};

Overlay_SetAction( "Echecs/Menu/Creer")
{
	Network_ClientSendMessage( "EchecsClient", pack_int( msCreateGame) + pack_int( 6) + "Echecs");
};

Overlay_SetAction( "Echecs/Menu/Rejoindre")
{
	Network_ClientSendMessage( "EchecsClient", pack_int( msRefreshGamesList) + pack_int( 6) + "Echecs");
};

Overlay_SetAction( "Echecs/AvailableGames/ButtonJoin")
{
	Network_ClientSendMessage( "EchecsClient", pack_int( msJoinGame) + pack_int( 6) + "Echecs" + pack_int( l_selectedId));
};

Overlay_SetAction( "Echecs/AvailableGames/Retour")
{
	ShowTitle();
	Overlay_Show( "Echecs/Menu");
	Overlay_Hide( "Echecs/AvailableGames");
};

Overlay_SetAction( "Echecs/Menu/Recommencer")
{
	Overlay_Hide( "Echecs/Menu");
	Network_ClientSendMessage( "EchecsClient", pack_int( msGameStart));
	Overlay_Show( "Echecs/Player");
};

Overlay_SetAction( "Echecs/Menu/Regles")
{
	HideTitle();
	Overlay_Hide( "Echecs/Menu");
	Overlay_Show( "Echecs/Regles");
};

Overlay_SetAction( "Echecs/Regles/Retour")
{
	ShowTitle();
	Overlay_Show( "Echecs/Menu");
	Overlay_Hide( "Echecs/Regles");
};

Overlay_SetAction( "Echecs/Menu/Scores")
{
	HideTitle();
	Overlay_Hide( "Echecs/Menu");
	Overlay_Show( "Echecs/Scores");
};

Overlay_SetAction( "Echecs/Scores/Retour")
{
	ShowTitle();
	Overlay_Show( "Echecs/Menu");
	Overlay_Hide( "Echecs/Scores");
};

Overlay_SetAction( "Echecs/Menu/Commandes")
{
	HideTitle();
	Overlay_Hide( "Echecs/Menu");
	Overlay_Show( "Echecs/Commandes");
};

Overlay_SetAction( "Echecs/Commandes/Retour")
{
	ShowTitle();
	Overlay_Show( "Echecs/Menu");
	Overlay_Hide( "Echecs/Commandes");
};

Overlay_SetAction( "Echecs/Menu/Options")
{
	HideTitle();
	Overlay_Hide( "Echecs/Menu");
	Overlay_Show( "Echecs/Options");
};

Overlay_SetAction( "Echecs/Options/Retour")
{
	ShowTitle();
	Overlay_Show( "Echecs/Menu");
	Overlay_Hide( "Echecs/Options");
};

Overlay_SetAction( "Echecs/Options/MusicOnOff")
{
	l_music = ( ! l_music);
	Sound_MuteMusic( l_music);

	if ( ! l_music)
	{
		OverlayElement_GetByName( "Echecs/Options/MusicOnOff")->SetMaterial( "On");
	}
	else
	{
		OverlayElement_GetByName( "Echecs/Options/MusicOnOff")->SetMaterial( "Off");
	};
};

Overlay_SetAction( "Echecs/Options/SoundOnOff")
{
	l_sound = ( ! l_sound);
	Sound_MuteSFX( l_sound);

	if ( ! l_sound)
	{
		OverlayElement_GetByName( "Echecs/Options/SoundOnOff")->SetMaterial( "On");
	}
	else
	{
		OverlayElement_GetByName( "Echecs/Options/SoundOnOff")->SetMaterial( "Off");
	};
};

void TimerMusic()
{
	timer( "MusicChangeVolume", TIMERTYPE_PERMANENT, 0.0)
	{
		l_ticPos = MOUSE_POSITION_X - l_ticMusic->GetAbsoluteLeft();
		l_ticMusic->Translate( l_ticPos, 0.0);

		l_ticMusic->LimitToParent();

		l_musicVol = l_ticMusic->GetLeft() / l_relativeRegletteWidth;

		Sound_SetMusicVolume( l_musicVol);
	};
};

void TimerSound()
{
	timer( "SoundChangeVolume", TIMERTYPE_PERMANENT, 0.0)
	{
		l_ticPos = MOUSE_POSITION_X - l_ticSound->GetAbsoluteLeft();
		l_ticSound->Translate( l_ticPos, 0.0);

		l_ticSound->LimitToParent();

		l_soundVol = l_ticSound->GetLeft() / l_relativeRegletteWidth;

		Sound_SetSFXVolume( l_soundVol);
	};
};

Overlay_SetAction( "Echecs/Options/RegletteMusic")
{
	TimerMusic();
};

Overlay_SetAction( "Echecs/Options/TicMusic")
{
	TimerMusic();
};

Overlay_SetAction( "Echecs/Options/RegletteSound")
{
	TimerSound();
};

Overlay_SetAction( "Echecs/Options/TicSound")
{
	TimerSound();
};

Overlay_SetAction( "Echecs/Abandon")
{
	Overlay_Hide( "Echecs/Abandon");
	AbandonGame();
};

void Mouse_LButtonUp()
{
	Timer_Kill( "MusicChangeVolume");
	Timer_Kill( "SoundChangeVolume");
};


BindKey( KEYCODE_T, BINDKEY_DOWN)
{
	Echo( "attaques : ");
	for ( i = 0 ; i < 8 ; i ++)
	{
		Echo( "[" + substr( g_attaque, i * 8, 8) + "]");
	};
};


BindKey( KEYCODE_Y, BINDKEY_DOWN)
{
	Echo( "g_placementPieces : ");
	for ( i = 0 ; i < 8 ; i ++)
	{
		Echo( "[" + substr( g_placementPieces, i * 8, 8) + "]");
	};
};

BindKey( KEYCODE_U, BINDKEY_DOWN)
{
	Echo( "g_recordedMovements : ");
	for ( i = 0 ; i < 8 ; i ++)
	{
		Echo( "[" + substr( g_recordedMovements, i * 8, 8) + "]");
	};
};