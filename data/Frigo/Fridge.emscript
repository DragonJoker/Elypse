bool g_canOpenDoor;

void OpenDoor()
{
	if ( ! g_fridge.DoorOpened)
	{
		Sound_Play_Global( "Ouvrir");
		timer( "OpenDoor", TIMERTYPE_CONTINUOUS, 2.0)
		{
			g_fridge.CurrentAngle = V3_SinusInterpolation( g_fridge.ClosedAngle, g_fridge.OpenedAngle, CURRENTTIMER_TIME_LEFT / 2.0);
			g_fridge.DoorNode->Reset();
			g_fridge.DoorNode->Yaw( (g_fridge.CurrentAngle)[0]);
			g_fridge.DoorNode->Roll( 180.0);
		}
		timer( "EndOpenDoor", TIMERTYPE_ONCE, 2.0)
		{
			g_fridge.DoorOpened = true;
			g_fridge.Light->Show();
		}
	}
	else
	{
		g_fridge.Light->Hide();
		timer( "Close", TIMERTYPE_CONTINUOUS, 2.0)
		{
			g_fridge.CurrentAngle = V3_SinusInterpolation( g_fridge.ClosedAngle, g_fridge.OpenedAngle, CURRENTTIMER_TIME_ELAPSED / 2.0);
			g_fridge.DoorNode->Reset();
			g_fridge.DoorNode->Yaw( (g_fridge.CurrentAngle)[0]);
			g_fridge.DoorNode->Roll( 180.0);
		}
		timer( "EndCloseDoor", TIMERTYPE_ONCE, 2.0)
		{
			Sound_Play_Global( "Fermer");
			g_fridge.DoorOpened = false;
		}
	}
}

void FlushFridgeContent()
{
	Echo( "FlushFridgeContent");
	iterator <string_map <ObjectInstance> > l_it;
	iterator <string_map <ObjectInstance> > l_endit;
	l_endit = g_fridgeContent->End();
	ObjectInstance l_object;
	for (l_it = g_fridgeContent->Begin() ; l_it != l_endit ; l_it++)
	{
		l_object := l_it->Data();
		l_object->Delete();
	}
	g_fridgeContent->Clear();

	iterator <string_map <MagnetInstance> > l_it2;
	iterator <string_map <MagnetInstance> > l_endit2;
	l_endit2 = g_fridgeMagnets->End();
	MagnetInstance l_magnet;
	for (l_it2 = g_fridgeMagnets->Begin() ; l_it2 != l_endit2 ; l_it2++)
	{
		l_magnet := l_it2->Data();
		l_magnet->Delete();
	}
	g_fridgeMagnets->Clear();
}

void RefreshFridgeContent()
{
	int i;
	iterator <string_map <ObjectInstance> > l_it;
	iterator <string_map <ObjectInstance> > l_endit;
	l_endit = g_fridgeContent->End();
	string l_name;
	ObjectInstance l_object;
	i = 0;
	ListFridge( "RefreshFridgeContent");
	for (l_it = g_fridgeContent->Begin() ; l_it != l_endit ; l_it++)
	{
		l_object := l_it->Data();
		l_name = l_it->Key();

		if (i < 4)
		{
			l_object.Position = SetVector3( 20.0 + (i * 20.0), -20.0, -50.0);
		}
		elseif (i < 8)
		{
			l_object.Position = SetVector3( 20.0 + ((i - 4) * 20.0), 0.0, -50.0);
		}
		else
		{
			l_object.Position = SetVector3( 20.0 + ((i - 8) * 20.0), 23.0, -50.0);5
		}

		if ( ! SceneNode_Exists( "Node" + l_name))
		{
			l_object.Node = SceneNode_Create( "Node" + l_name);
		}
		else
		{
			l_object.Node = SceneNode_GetByName( "Node " + l_name);
		}
		l_object.Node->SetPosition( l_object.Position);

		l_object.Entity = Object_GetByName( l_name);
		if ( l_object.Entity == NULL)
		{
			l_object.Entity = Object_Create( l_name, l_object.InstanceObject.Mesh);
		}

		l_object.Entity->SetParent( l_object.Node);
		i++;
	}

	iterator <string_map <MagnetInstance> > l_it2;
	iterator <string_map <MagnetInstance> > l_endit2;
	l_endit2 = g_fridgeMagnets->End();
	MagnetInstance l_magnet;
	for (l_it2 = g_fridgeMagnets->Begin() ; l_it2 != l_endit2 ; l_it2++)
	{
		l_magnet := l_it2->Data();
		l_name = l_it2->Key();

		l_magnet.Entity = Object_GetByName( l_name);
		if (l_magnet.Entity == NULL)
		{
			l_magnet.Entity = Object_Create( l_name, "magnet.mesh");
		}
		if (SceneNode_Exists( "Node" + l_name))
		{
			l_magnet.Node = SceneNode_GetByName( "Node" + l_name);
		}
		else
		{
			l_magnet.Node = SceneNode_Create( "Node" + l_name);
		}
		l_magnet.Entity->SetMaterial( "magnet/" + l_magnet.InstanceMagnet.Material);
		l_magnet.Node->SetParent( g_fridge.DoorNode);
		l_magnet.Node->SetInheritOrientation( true);
		l_magnet.Node->SetPosition( SetVector3( l_magnet.X, l_magnet.Y, 4.9));
		l_magnet.Node->SetOrientation( SetQuaternion( SetVector3( 0.0, 0.0, 1.0), l_magnet.Angle));
		l_magnet.Node->Pitch( 90.0);
		l_magnet.Node->Yaw( 180.0);
		l_magnet.Entity->SetParent( l_magnet.Node);
		i++;
	}
}

void RefreshInfos()
{
	FlushFridgeContent();
	g_selectedPlayer->Init( true);
	RefreshFridgeContent();
	timer ("RefreshInfos", TIMERTYPE_REPEAT, 60.0)
	{
		FlushFridgeContent();
		g_selectedPlayer->Init( true);
		RefreshFridgeContent();
	}
}