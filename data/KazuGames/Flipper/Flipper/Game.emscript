bool l_leftDown;
bool l_rightDown;
bool l_gameStarted;
bool l_ballOnRightFlipper;
bool l_ballOnLeftFlipper;
bool l_leftAtMax;
bool l_rightAtMax;
bool l_ballOnFlipper;
bool l_result;
bool l_inGame;
bool l_tilted;
bool l_shaking;
bool l_titleShown;

int l_plateToChange;
int l_level;
int l_nbFlippersShown;
int l_nbBumpersShown;
int i;

real current_pitch;
real previous_pitch;
real l_currentLanceurYaw;
real l_currentRightAngle;
real l_currentLeftAngle;
real l_distanceFromCenter;
real l_rTmp;
real l_angle;
real l_timeSinceLastWall;

camera g_rootCamera;

scene_node l_plateNode;
scene_node l_lanceurNode;
scene_node l_billeNode;

vector3 l_platePosition;
vector3 l_currentPosition;
vector3 l_previousPosition;
vector3 l_initForce;
vector3 l_flipperForce;
vector3 l_leftAngle;
vector3 l_rightAngle;
vector3 l_vDiff;
vector3 l_speed;
vector3 l_originalCamPos;
vector3 l_leftCamPos;
vector3 l_rightCamPos;
vector3 l_currentCamPos;

quaternion l_bumpAngle;
quaternion l_rAngle;
quaternion l_lAngle;

object l_object;
object l_bille;

physics_object l_billePhys;

string l_flipperNodeName;
string l_meshName;
string l_plateToChangeStr;

animation_group l_groupAnim;
animation l_anim;


real l_relativeRegletteWidth;
real l_soundVol;
real l_musicVol;
real l_ticPos;
real l_shake;
real l_tiltValue;

bool l_titleShown;
bool l_music;
bool l_sound;
bool l_collideWithWall;

overlay l_ticSound;
overlay l_ticMusic;

void HideFlipper( string p_hFlipperName)
{
	if (Object_GetByName( p_hFlipperName)->IsVisible())
	{
		Object_GetByName( p_hFlipperName)->Hide();
		SceneNode_GetByName( p_hFlipperName + "Node")->Translate( SetVector3( 0.0, 200.0, 0.0));
	};
};

void HideFlippers( string p_thFlip)
{
	HideFlipper( "Flipper" + p_thFlip + "Left1");
	HideFlipper( "Flipper" + p_thFlip + "Left2");
	HideFlipper( "Flipper" + p_thFlip + "Center1");
	HideFlipper( "Flipper" + p_thFlip + "Center3");
	HideFlipper( "Flipper" + p_thFlip + "Right1");
	HideFlipper( "Flipper" + p_thFlip + "Right2");
	HideFlipper( "Flipper" + p_thFlip + "Center2");
	HideFlipper( "Flipper" + p_thFlip + "Center4");
};

void ShowFlipper( string p_sFlipperName)
{
	if ( ! Object_GetByName( p_sFlipperName)->IsVisible())
	{
		SceneNode_GetByName( p_sFlipperName + "Node")->Translate( SetVector3( 0.0, -200.0, 0.0));
		Object_GetByName( p_sFlipperName)->Show();
	};
};

void ShowFlipperI( string p_sfiTable, int p_sfi)
{
	if (p_sfi < 3)
	{
		ShowFlipper( "Flipper" + p_sfiTable + "Left" + itoa( p_sfi));
	}
	elseif (p_sfi < 5)
	{
		ShowFlipper( "Flipper" + p_sfiTable + "Right" + itoa( p_sfi-2));
	}
	else
	{
		ShowFlipper( "Flipper" + p_sfiTable + "Center" + itoa( p_sfi-4));
	};
};

void ShowFlippers( string p_tsFlip)
{
	l_nbFlippersShown = 8;
//	l_nbFlippersShown = rtoi( rand( 1.0, 8.0));
	if (l_nbFlippersShown > 1)
	{
		for (i = 1 ; i <= l_nbFlippersShown ; i++)
		{
			ShowFlipperI( p_tsFlip, i);
		};
	}
	else
	{
		i = rtoi( rand( 1.0, 8.0));
		ShowFlipperI( p_tsFlip, i);
	};
};

void HideBumper( string p_hBumperName)
{
	if (Object_GetByName( p_hBumperName)->IsVisible())
	{
		Object_GetByName( p_hBumperName)->Hide();
		SceneNode_GetByName( p_hBumperName + "Node")->Translate( SetVector3( 0.0, 200.0, 0.0));
		Object_GetByName( p_hBumperName)->GetPhysicsObject()->ReassertPosition();
	};
};

void HideBumpers( string p_thBump)
{
	HideBumper( "Bumper" + p_thBump + "Left1");
	HideBumper( "Bumper" + p_thBump + "Left2");
	HideBumper( "Bumper" + p_thBump + "Right1");
	HideBumper( "Bumper" + p_thBump + "Right2");
	HideBumper( "Bumper" + p_thBump + "Center1");
	HideBumper( "Bumper" + p_thBump + "Center2");
	HideBumper( "Bumper" + p_thBump + "Center3");
	HideBumper( "Bumper" + p_thBump + "Center4");
};

void ShowBumper( string p_sBumperName)
{
	if ( ! Object_GetByName( p_sBumperName)->IsVisible())
	{
		SceneNode_GetByName( p_sBumperName + "Node")->Translate( SetVector3( 0.0, -200.0, 0.0));
		Object_GetByName( p_sBumperName)->Show();
		Object_GetByName( p_sBumperName)->GetPhysicsObject()->ReassertPosition();
	};
};

void ShowBumperI( string p_sbiTable, int p_sbi)
{
	if (p_sbi < 3)
	{
		ShowBumper( "Bumper" + p_sbiTable + "Left" + itoa( p_sbi));
	}
	elseif (p_sbi < 5)
	{
		ShowBumper( "Bumper" + p_sbiTable + "Right" + itoa( p_sbi-2));
	}
	else
	{
		ShowBumper( "Bumper" + p_sbiTable + "Center" + itoa( p_sbi-4));
	};
};

void ShowBumpers( string p_tsBump)
{
	l_nbBumpersShown = rtoi( rand( 1.0, 8.0));
	if (l_nbBumpersShown > 1)
	{
		for (i = 1 ; i <= l_nbBumpersShown ; i++)
		{
			ShowBumperI( p_tsBump, i);
		};
	}
	else
	{
		i = rtoi( rand( 1.0, 8.0));
		ShowBumperI( p_tsBump, i);
	};
};

void UpdateBumpersPhysics( string p_ubpTable)
{
	Object_GetByName( "Bumper" + p_ubpTable + "Left1")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Bumper" + p_ubpTable + "Left2")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Bumper" + p_ubpTable + "Right1")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Bumper" + p_ubpTable + "Right2")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Bumper" + p_ubpTable + "Center1")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Bumper" + p_ubpTable + "Center2")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Bumper" + p_ubpTable + "Center3")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Bumper" + p_ubpTable + "Center4")->GetPhysicsObject()->ReassertPosition();
};

void UpdateRightFlippersPhysics( string p_tRight)
{
	Object_GetByName( "Flipper" + p_tRight + "Right1")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Flipper" + p_tRight + "Right2")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Flipper" + p_tRight + "Center2")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Flipper" + p_tRight + "Center4")->GetPhysicsObject()->ReassertPosition();
};

void UpdateLeftFlippersPhysics( string p_tLeft)
{
	Object_GetByName( "Flipper" + p_tLeft + "Left1")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Flipper" + p_tLeft + "Left2")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Flipper" + p_tLeft + "Center1")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Flipper" + p_tLeft + "Center3")->GetPhysicsObject()->ReassertPosition();
};

void OrientRightFlipper( string p_tRightN, real p_rAngleN)
{
	SceneNode_GetByName( "Flipper" + p_tRightN + "Right1Node")->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_rAngleN));
	SceneNode_GetByName( "Flipper" + p_tRightN + "Right2Node")->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_rAngleN));
	SceneNode_GetByName( "Flipper" + p_tRightN + "Center2Node")->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_rAngleN));
	SceneNode_GetByName( "Flipper" + p_tRightN + "Center4Node")->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_rAngleN));
};

void OrientLefFlipper( string p_tLeftN, real p_lAngleN)
{
	SceneNode_GetByName( "Flipper" + p_tLeftN + "Left1Node")->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_lAngleN));
	SceneNode_GetByName( "Flipper" + p_tLeftN + "Left2Node")->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_lAngleN));
	SceneNode_GetByName( "Flipper" + p_tLeftN + "Center1Node")->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_lAngleN));
	SceneNode_GetByName( "Flipper" + p_tLeftN + "Center3Node")->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_lAngleN));
};

void OrientRightFlippers( real p_rAngle)
{
	OrientRightFlipper( "1", p_rAngle);
	OrientRightFlipper( "2", p_rAngle);
	UpdateRightFlippersPhysics( "1");
	UpdateRightFlippersPhysics( "2");
};

void OrientLeftFlippers( real p_lAngle)
{
	OrientLefFlipper( "1", p_lAngle);
	OrientLefFlipper( "2", p_lAngle);
	UpdateLeftFlippersPhysics( "1");
	UpdateLeftFlippersPhysics( "2");
};

bool CheckCollisionWithFlipper( string p_flipperName)
{
	l_result = false;

	if (l_billePhys->CollisionCheck( Object_GetByName( p_flipperName)->GetPhysicsObject(), true))
	{
		l_flipperNodeName = p_flipperName + "Node";
		l_result = true;
	};

	return l_result;
};

void CheckCollisionWithRightFlippers( string p_ccwrfTable)
{
	CheckCollisionWithFlipper( "Flipper" + p_ccwrfTable + "Right1");
	if (l_result)
	{
		l_ballOnRightFlipper = true;
	}
	else
	{
		CheckCollisionWithFlipper( "Flipper" + p_ccwrfTable + "Right2");
		if (l_result)
		{
			l_ballOnRightFlipper = true;
		}
		else
		{
			CheckCollisionWithFlipper( "Flipper" + p_ccwrfTable + "Center2");
			if (l_result)
			{
				l_ballOnRightFlipper = true;
			}
			else
			{
				CheckCollisionWithFlipper( "Flipper" + p_ccwrfTable + "Center4");
				if (l_result)
				{
					l_ballOnRightFlipper = true;
				};
			};
		};
	};
};

void CheckCollisionWithLeftFlippers( string p_ccwlfTable)
{
	CheckCollisionWithFlipper( "Flipper" + p_ccwlfTable + "Left1");
	if (l_result)
	{
		l_ballOnLeftFlipper = true;
	}
	else
	{
		CheckCollisionWithFlipper( "Flipper" + p_ccwlfTable + "Left2");
		if (l_result)
		{
			l_ballOnLeftFlipper = true;
		}
		else
		{
			CheckCollisionWithFlipper( "Flipper" + p_ccwlfTable + "Center1");
			if (l_result)
			{
				l_ballOnLeftFlipper = true;
			}
			else
			{
				CheckCollisionWithFlipper( "Flipper" + p_ccwlfTable + "Center3");
				if (l_result)
				{
					l_ballOnLeftFlipper = true;
				};
			};
		};
	};
};

void CheckCollisionsWithFlippers( string p_ccwfTable)
{
	CheckCollisionWithRightFlippers( p_ccwfTable);
	CheckCollisionWithLeftFlippers( p_ccwfTable);
};

void CollideWithRightFlipper( real p_cwrfAngle)
{
	if ( ! l_tilted)
	{
		l_ballOnRightFlipper = false;
		CheckCollisionWithRightFlippers( "1");
		CheckCollisionWithRightFlippers( "2");
		if (l_ballOnRightFlipper)
		{
			l_distanceFromCenter = abs( (l_billeNode->GetPosition() - SceneNode_GetByName( l_flipperNodeName)->GetPosition())->Length());
			l_rAngle = SceneNode_GetByName( l_flipperNodeName)->GetOrientation() * SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_cwrfAngle);
			l_flipperForce = SetVector3( 0.0, 0.0, l_distanceFromCenter * 100.0) * l_rAngle;
			l_billePhys->AddForce( l_flipperForce);
		};
	};
};

void CollideWithLeftFlipper( real p_cwlfAngle)
{
	if ( ! l_tilted)
	{
		l_ballOnLeftFlipper = false;
		CheckCollisionWithLeftFlippers("1");
		CheckCollisionWithLeftFlippers("2");
		if (l_ballOnLeftFlipper)
		{
			l_distanceFromCenter = abs( (l_billeNode->GetPosition() - SceneNode_GetByName( l_flipperNodeName)->GetPosition())->Length());
			l_lAngle = SceneNode_GetByName( l_flipperNodeName)->GetOrientation() * SetQuaternion( SetVector3( 0.0, 1.0, 0.0), p_cwlfAngle);
			l_flipperForce = SetVector3( 0.0, 0.0, l_distanceFromCenter * 100.0) * l_lAngle;
			l_billePhys->AddForce( l_flipperForce);
		};
	};
};

void FlipRight()
{
	if ( ! l_tilted)
	{
		Timer_Kill( "UnFlipRight");
		Timer_Kill( "EndUnFlipRight");
		if ( ! Timer_Exists( "FlipRight") && ! l_rightAtMax)
		{
			Sound_Play_Global( "FlipperUp");
			timer( "FlipRight", TIMERTYPE_CONTINUOUS, 0.2)
			{
				CollideWithRightFlipper( -90.0);
				l_rightAngle = V3_LinearInterpolation( SetVector3( 30.0, 0.0, 0.0), SetVector3( -30.0, 0.0, 0.0), CURRENTTIMER_TIME_LEFT * 5.0);
				l_currentRightAngle = (l_rightAngle[0]);
				OrientRightFlippers( l_currentRightAngle);
			};
			timer( "EndFlipRight", TIMERTYPE_ONCE, 0.2)
			{
				CollideWithRightFlipper( -90.0);
				l_currentRightAngle = -30.0;
				OrientRightFlippers( l_currentRightAngle);
				l_rightAtMax= true;
			};
		};
	};
};

void UnFlipRight()
{
	Timer_Kill( "FlipRight");
	Timer_Kill( "EndFlipRight");
	if ( ! Timer_Exists( "UnFlipRight"))
	{
		Sound_Play_Global( "FlipperDown");
		l_rightAtMax= false;
		timer( "UnFlipRight", TIMERTYPE_CONTINUOUS, 0.2)
		{
			CollideWithRightFlipper( 90.0);
			l_rightAngle = V3_LinearInterpolation( SetVector3( l_currentRightAngle, 0.0, 0.0), SetVector3( 30.0, 0.0, 0.0), CURRENTTIMER_TIME_LEFT * 5.0);
			OrientRightFlippers( l_rightAngle[0]);

		};
		timer( "EndUnFlipRight", TIMERTYPE_ONCE, 0.2)
		{
			CollideWithRightFlipper( 90.0);
			OrientRightFlippers( 30.0);
		};
	};
};

void FlipLeft()
{
	if ( ! l_tilted)
	{
		Timer_Kill( "UnFlipLeft");
		Timer_Kill( "EndUnFlipLeft");
		if ( ! Timer_Exists( "FlipLeft") && ! l_leftAtMax)
		{
			Sound_Play_Global( "FlipperUp");
			timer( "FlipLeft", TIMERTYPE_CONTINUOUS, 0.2)
			{
				CollideWithLeftFlipper( 90.0);
				l_leftAngle = V3_LinearInterpolation( SetVector3( 150.0, 0.0, 0.0), SetVector3( 210.0, 0.0, 0.0), CURRENTTIMER_TIME_LEFT * 5.0);
				l_currentLeftAngle = (l_leftAngle[0]);
				OrientLeftFlippers( l_currentLeftAngle);
			};
			timer( "EndFlipLeft", TIMERTYPE_ONCE, 0.2)
			{
				CollideWithLeftFlipper( 90.0);
				l_currentLeftAngle = 210.0;
				OrientLeftFlippers( l_currentLeftAngle);
				l_leftAtMax = true;
			};
		};
	};
};

void UnFlipLeft()
{
	Timer_Kill( "FlipLeft");
	Timer_Kill( "EndFlipLeft");
	if ( ! Timer_Exists( "UnFlipLeft"))
	{
		Sound_Play_Global( "FlipperDown");
		l_leftAtMax = false;
		timer( "UnFlipLeft", TIMERTYPE_CONTINUOUS, 0.2)
		{
			CollideWithLeftFlipper( -90.0);
			l_leftAngle = V3_LinearInterpolation( SetVector3( l_currentLeftAngle, 0.0, 0.0), SetVector3( 150.0, 0.0, 0.0), CURRENTTIMER_TIME_LEFT * 5.0);
			OrientLeftFlippers( l_leftAngle[0]);
		};
		timer( "EndUnFlipLeft", TIMERTYPE_ONCE, 0.2)
		{
			CollideWithLeftFlipper( -90.0);
			OrientLeftFlippers( 150.0);
		};
	};
};

void AnimBumper()
{
	l_groupAnim->StartAnimation( "bump");

	l_groupAnim->PauseAnimation( "bump");
	timer( "Bump", TIMERTYPE_CONTINUOUS, 0.2)
	{
		l_groupAnim->SetTimeAnimation( "bump", CURRENTTIMER_TIME_ELAPSED * 5.0);
	};
	timer( "EndBump", TIMERTYPE_ONCE, 0.2)
	{
		l_groupAnim->SetTimeAnimation( "bump", 1.0);
		timer( "UnBump", TIMERTYPE_CONTINUOUS, 0.2)
		{
			l_groupAnim->SetTimeAnimation( "bump", CURRENTTIMER_TIME_LEFT * 5.0);
		};
		timer( "EndUnBump", TIMERTYPE_ONCE, 0.2)
		{
			l_groupAnim->StopAnimation( "bump");
		};
	};
};

void SoundBumper( string p_sbBumperName)
{
	if (Object_GetByName( p_sbBumperName)->GetMeshName()->find( "arbre") != npos)
	{
		Sound_Play_Global( "Bumper1");
	}
	elseif (Object_GetByName( p_sbBumperName)->GetMeshName()->find( "manoir") != npos)
	{
		Sound_Play_Global( "Bumper2");
	}
	elseif (Object_GetByName( p_sbBumperName)->GetMeshName()->find( "tete") != npos)
	{
		Sound_Play_Global( "Bumper3");
	}
	elseif (Object_GetByName( p_sbBumperName)->GetMeshName()->find( "fantome") != npos)
	{
		Sound_Play_Global( "Bumper4");
	};
};

bool CheckCollisionWithBumper( string p_bumperName)
{
	l_speed = l_billePhys->GetSpeed();
	if (l_billePhys->CollisionCheck( Object_GetByName( p_bumperName)->GetPhysicsObject(), true))
	{
		l_bumpAngle = V3_GetRotationTo( l_billeNode->GetPosition(), Object_GetByName( p_bumperName)->GetParent()->GetPosition());
		l_groupAnim = AnimationGroup_GetByName( p_bumperName + "Anim");
		l_billePhys->AddForce( SetVector3( 10000.0, 0.0, 10000.0) * l_bumpAngle);
		AnimBumper();
		SoundBumper( p_bumperName);
		g_score = g_score + 500;
		UpdateScore();
		return true;
	}
	else
	{
		return false;
	};
};

bool CheckCollisionWithBumpers( string p_bTable)
{
	l_result = false;

	if (CheckCollisionWithBumper( "Bumper" + p_bTable + "Left1"))
	{
		l_result = true;
	}
	elseif (CheckCollisionWithBumper( "Bumper" + p_bTable + "Left2"))
	{
		l_result = true;
	}
	elseif (CheckCollisionWithBumper( "Bumper" + p_bTable + "Right1"))
	{
		l_result = true;
	}
	elseif (CheckCollisionWithBumper( "Bumper" + p_bTable + "Right2"))
	{
		l_result = true;
	}
	elseif (CheckCollisionWithBumper( "Bumper" + p_bTable + "Center1"))
	{
		l_result = true;
	}
	elseif (CheckCollisionWithBumper( "Bumper" + p_bTable + "Center2"))
	{
		l_result = true;
	}
	elseif (CheckCollisionWithBumper( "Bumper" + p_bTable + "Center3"))
	{
		l_result = true;
	}
	elseif (CheckCollisionWithBumper( "Bumper" + p_bTable + "Center4"))
	{
		l_result = true;
	};

	return l_result;
};

void CheckCollisionsWithBumpers()
{
	if ( ! l_tilted)
	{
		l_speed = l_billePhys->GetSpeed();
		CheckCollisionWithBumpers( "1");
	 	CheckCollisionWithBumpers( "2");
	};
};

bool CheckCollisionWithWall( string p_ccwwWallName)
{
	if (l_billePhys->CollisionCheck( Object_GetByName( p_ccwwWallName)->GetPhysicsObject(), true))
	{
		if (l_timeSinceLastWall > 0.1 && ! l_collideWithWall)
		{
			Sound_Play_Global( "Wall");
		};
		l_timeSinceLastWall = 0.0;
		l_collideWithWall = true;
		return true;
	}
	else
	{
		l_collideWithWall = false;
		return false;
	};
};

bool CheckCollisionWithWalls( string p_ccwwTable)
{
	l_result = false;

	if (CheckCollisionWithWall( "Cote" + p_ccwwTable + "Droit"))
	{
		l_result = true;
	}
	elseif (CheckCollisionWithWall( "Cote" + p_ccwwTable + "Gauche"))
	{
		l_result = true;
	};

	return l_result;
};

void CheckCollisionsWithWalls()
{
	CheckCollisionWithWalls( "1");
 	CheckCollisionWithWalls( "2");
	CheckCollisionWithWall( "Bas");
};

void EndGame()
{
	CheckClearToGo();
	if (g_clearToGo)
	{
		Overlay_Show( "Menu");
		Overlay_Hide( "InGame");
		OverlayElement_GetByName( "Menu/Jouer")->Hide();
		OverlayElement_GetByName( "Menu/Continuer")->Hide();
		OverlayElement_GetByName( "Menu/Recommencer")->Show();
		OverlayElement_GetByName( "Menu/Recommencer/Cout")->Show();
		if (g_free)
		{
			OverlayElement_GetByName( "Menu/Recommencer/Cout")->SetCaption( "gratuit");
		}
		elseif (g_freeLimited)
		{
			OverlayElement_GetByName( "Menu/Recommencer/Cout")->SetCaption( "gratuit, " + l_infos + " parties");
		}
		elseif (g_priced)
		{
			OverlayElement_GetByName( "Menu/Recommencer/Cout")->SetCaption( "payant : " + l_infos + " credits");
		}
		elseif (g_abonne)
		{
			OverlayElement_GetByName( "Menu/Recommencer/Cout")->SetCaption( "abonne");
		};
		Overlay_Hide( "MenuInGame");
	}
	else
	{
		Overlay_Hide( "MenuInGame");
		Overlay_Hide( "Menu");
		if ( ! c_modeInstant)
		{
			string l_endCaption;
			l_endCaption->clear();
			real l_lineWidth;
			l_lineWidth = 0.0;
			Echo( "End - not instant - " + l_infos);
			if (l_infos == "no more free")
			{
				Echo( "End - not instant - not free");
				l_endCaption = "Vous n'avez plus de partie gratuite disponible.";
				l_lineWidth = GetLineWidth( l_endCaption, "Minigame", 40.0);
			}
			else
			{
				Echo( "End - not instant - no money");
				l_endCaption = "Une partie de ce jeu coute " + l_infos + " credits.";
				l_lineWidth = GetLineWidth( l_endCaption, "Minigame", 40.0);
				l_endCaption += endl + "Vous ne disposez pas de ce montant";
			};
			OverlayElement_GetByName( "FinMiniGame")->SetCaption( l_endCaption);
			OverlayElement_GetByName( "FinMiniGame")->SetLeft( (GENERAL_SCREEN_WIDTH - l_lineWidth) / 2.0);
			Overlay_Show( "FinMiniGame");
		};
	};
};

void StopGame()
{
	l_billePhys->SetEnabled( false);
	Timer_Kill( "UpdateBille");
	Timer_Kill( "UnFlipRight");
	Timer_Kill( "EndUnFlipRight");
	Timer_Kill( "FlipRight");
	Timer_Kill( "EndFlipRight");
	Timer_Kill( "UnFlipLeft");
	Timer_Kill( "EndUnFlipLeft");
	Timer_Kill( "FlipLeft");
	Timer_Kill( "EndFlipLeft");
	Timer_Kill( "Bump");
	Timer_Kill( "EndBump");
	Timer_Kill( "UnBump");
	Timer_Kill( "EndUnBump");
//	Overlay_Show( "Menu");
	Overlay_Hide( "MenuInGame");
	OverlayElement_GetByName( "Menu/Jouer")->Show();
	OverlayElement_GetByName( "Menu/Recommencer")->Hide();
	OverlayElement_GetByName( "Menu/Recommencer")->Hide();
	OverlayElement_GetByName( "Menu/Continuer")->Hide();
	l_inGame = false;
	l_gameStarted = false;
	EndGame();
};

void PauseGame()
{
	Overlay_Show( "Menu");
	Overlay_Hide( "MenuInGame");
	Overlay_Hide( "InGame");
	l_billePhys->SetEnabled( false);
	Timer_PauseAll();
	l_inGame = false;
};

void ContinueGame()
{
	Overlay_Hide( "Menu");
	Overlay_Show( "MenuInGame");
	Overlay_Show( "InGame");
	Timer_PlayAll();
	if (l_gameStarted)
	{
		l_billePhys->SetEnabled( true);
	};
	timer( "Start", TIMERTYPE_ONCE, 0.2)
	{
		l_inGame = true;
	};
};

void LoseGame()
{
	Overlay_Hide( "Tilt");
	Overlay_Show( "Fin");
	Overlay_Hide( "MenuInGame");
	l_billePhys->SetEnabled( false);
	_submitHighscore();
	timer( "HideFin", TIMERTYPE_ONCE, 2.0)
	{
		Overlay_Hide( "Fin");
		StopGame();
	};
};

void UpdateBille()
{
	l_currentPosition = l_billeNode->GetPosition();

	if ((l_currentPosition[2]) + 400.0 > g_distance)
	{
		g_distance = l_currentPosition[2] + 400.0;
		UpdateDistance();
	};	

	if ((l_currentPosition[2]) <= (l_platePosition[2]) - 457.5 || (l_currentPosition[2]) < -400.0)
	{
		LoseGame();
	};

	l_timeSinceLastWall = l_timeSinceLastWall + GENERAL_ELAPSED_TIME;

	if (l_billePhys->GetNumCollisions() > 0)
	{
		CheckCollisionsWithFlippers( "1");
		CheckCollisionsWithFlippers( "2");
		CheckCollisionsWithBumpers();
		CheckCollisionsWithWalls();
	};

	l_speed = l_billePhys->GetSpeed();
	l_billePhys->SetSpeed( SetVector3( l_speed[0], 0.0, l_speed[2]));
	l_billePhys->SetTorque( VECTOR3_ZERO);
	l_billePhys->SetAngularSpeed( VECTOR3_ZERO);
};

void UpdatePhysics()
{
	Object_GetByName( "Plateau" + l_plateToChangeStr)->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Cote" + l_plateToChangeStr + "Gauche")->GetPhysicsObject()->ReassertPosition();
	Object_GetByName( "Cote" + l_plateToChangeStr + "Droit")->GetPhysicsObject()->ReassertPosition();

	UpdateLeftFlippersPhysics( l_plateToChangeStr);
	UpdateRightFlippersPhysics( l_plateToChangeStr);
};

void UpdatePlateau( real p_change)
{
	l_plateNode->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName("Gauche" + l_plateToChangeStr + "Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName("Droit" + l_plateToChangeStr + "Node")->Translate( SetVector3( 0.0, 0.0, p_change));

	HideFlippers( l_plateToChangeStr);
	SceneNode_GetByName( "Flipper" + l_plateToChangeStr + "Left1Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Flipper" + l_plateToChangeStr + "Left2Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Flipper" + l_plateToChangeStr + "Center1Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Flipper" + l_plateToChangeStr + "Center3Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Flipper" + l_plateToChangeStr + "Right1Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Flipper" + l_plateToChangeStr + "Right2Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Flipper" + l_plateToChangeStr + "Center2Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Flipper" + l_plateToChangeStr + "Center4Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	ShowFlippers( l_plateToChangeStr);

	HideBumpers( l_plateToChangeStr);
	SceneNode_GetByName( "Bumper" + l_plateToChangeStr + "Left1Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Bumper" + l_plateToChangeStr + "Left2Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Bumper" + l_plateToChangeStr + "Right1Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Bumper" + l_plateToChangeStr + "Right2Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Bumper" + l_plateToChangeStr + "Center1Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Bumper" + l_plateToChangeStr + "Center2Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Bumper" + l_plateToChangeStr + "Center3Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	SceneNode_GetByName( "Bumper" + l_plateToChangeStr + "Center4Node")->Translate( SetVector3( 0.0, 0.0, p_change));
	ShowBumpers( l_plateToChangeStr);

	UpdatePhysics();
};

void ChangePlateau()
{
	l_plateToChange = l_plateToChange + 1;
	if (l_plateToChange > 2)
	{
		l_plateToChange = 1;
	};
	l_plateToChangeStr = itoa( l_plateToChange);
	l_plateNode = SceneNode_GetByName("Plateau" + l_plateToChangeStr + "Node");
	l_platePosition = l_plateNode->GetPosition();
};

void UpdateCamera()
{
	l_currentCamPos = SetVector3( 0.0, 0.0, (l_currentPosition[2]) + 100.0);
	if ( ! l_shaking)
	{
		g_rootCamera->GetParent()->SetPosition( l_currentCamPos);
	};
	l_previousPosition = l_currentPosition;
	if ((l_currentPosition[2]) > (l_platePosition[2]) + 650.0)
	{
		l_level = l_level + 1;
		UpdatePlateau( 1830.0);
		ChangePlateau();
	};
};

void LaunchBall()
{
	l_gameStarted = true;
	l_currentPosition = l_billeNode->GetPosition();
	l_previousPosition = l_billeNode->GetPosition();
	l_billePhys->SetEnabled( true);
	l_initForce = SetVector3( l_initForce[0], 0.0, l_initForce[2]);
	l_billePhys->AddForce( l_initForce);

	Sound_Play_Global( "Lancer");

	timer( "UpdateBille", TIMERTYPE_PERMANENT, 0.0)
	{
		UpdateBille();
		UpdateCamera();
	};
};

void ShakeFlipper()
{
	if ( ! l_tilted && ! l_shaking)
	{
		l_shaking = true;
		l_shake = rand( 0.0, 1.0);
		l_tiltValue = rand( 0.0, 1.0);
		timer( "ShakeFlipper", TIMERTYPE_CONTINUOUS, 1.0)
		{
			l_leftCamPos = SetVector3( l_currentCamPos[0] + 10.0, l_currentCamPos[1], l_currentCamPos[2]);
			l_rightCamPos = SetVector3( l_currentCamPos[0] - 10.0, l_currentCamPos[1], l_currentCamPos[2]);
			if (CURRENTTIMER_TIME_ELAPSED > 0.75)
			{
				g_rootCamera->GetParent()->SetPosition( V3_LinearInterpolation( l_leftCamPos, l_currentCamPos, CURRENTTIMER_TIME_LEFT));
				l_billePhys->AddForce( SetVector3( -200.0, 0.0, 0.0));
			}
			elseif (CURRENTTIMER_TIME_ELAPSED > 0.5)
			{
				g_rootCamera->GetParent()->SetPosition( V3_LinearInterpolation( l_rightCamPos, l_leftCamPos, CURRENTTIMER_TIME_LEFT));
				l_billePhys->AddForce( SetVector3( 200.0, 0.0, 0.0));
			}
			elseif (CURRENTTIMER_TIME_ELAPSED > 0.25)
			{
				g_rootCamera->GetParent()->SetPosition( V3_LinearInterpolation( l_leftCamPos, l_rightCamPos, CURRENTTIMER_TIME_LEFT));
				l_billePhys->AddForce( SetVector3( -200.0, 0.0, 0.0));
			}
			else
			{
				g_rootCamera->GetParent()->SetPosition( V3_LinearInterpolation( l_currentCamPos, l_leftCamPos, CURRENTTIMER_TIME_LEFT));
				l_billePhys->AddForce( SetVector3( 200.0, 0.0, 0.0));
			};
		};
		timer( "StopShaking", TIMERTYPE_ONCE, 1.0)
		{
			l_shaking = false;
		};
		if (abs( l_shake - l_tiltValue) <= 0.1)
		{
			Overlay_Show( "Tilt");
			l_tilted = true;
			timer( "UnTilt", TIMERTYPE_ONCE, 3.0)
			{
				l_tilted = false;
				Overlay_Hide( "Tilt");
			};
		};
	};
};

void InitialiseFlipper()
{
	l_sound = false;
	l_music = false;
	l_musicVol = 1.0;
	l_soundVol = 1.0;
	l_ticPos = 1.0;
	l_ticMusic = OverlayElement_GetByName( "Options/TicMusic");
	l_ticSound = OverlayElement_GetByName( "Options/TicSound");
	l_relativeRegletteWidth = OverlayElement_GetByName( "Options/RegletteMusic")->GetWidth() - l_ticMusic->GetWidth();

	l_inGame = false;
	l_leftDown = false;
	l_gameStarted = false;
	l_ballOnRightFlipper = false;
	l_ballOnLeftFlipper = false;
	l_leftAtMax = false;
	l_rightAtMax= false;
	l_titleShown = true;
	l_plateToChange = 1;
	g_score = 0;
	g_distance = 0.0;
	l_plateToChangeStr = "1";
	current_pitch = 0.0;
	previous_pitch = 0.0;
	l_currentLanceurYaw = 0.0;
	l_initForce = SetVector3( 0.0, 0.0, 20000.0);
	l_originalCamPos = SetVector3( 0.0, 0.0, -300.0);
	g_rootCamera = Camera_GetByName( "RootCamera");
	g_rootCamera->GetParent()->SetOrientation( SetQuaternion( SetVector3( 1.0, 0.0, 0.0), -60.0));
	g_rootCamera->GetParent()->Yaw( 180.0);
	l_lanceurNode = SceneNode_GetByName( "LanceurNode");
	l_plateNode = SceneNode_GetByName("Plateau1Node");
	l_billeNode = SceneNode_GetByName( "BilleNode");
	l_bille = Object_GetByName( "Bille");
	l_billePhys = l_bille->GetPhysicsObject();
	l_billePhys->SetEnabled( false);

	l_level = 0;
	l_plateToChangeStr = "1";
	l_plateNode = SceneNode_GetByName("Plateau" + l_plateToChangeStr + "Node");
	l_platePosition = l_plateNode->GetPosition();
	UpdatePlateau( -l_platePosition[2]);

	l_level = 1;
	l_plateToChangeStr = "2";
	l_plateNode = SceneNode_GetByName("Plateau" + l_plateToChangeStr + "Node");
	l_platePosition = l_plateNode->GetPosition();
	UpdatePlateau( 915.0 - l_platePosition[2]);

	g_rootCamera->GetParent()->SetPosition( SetVector3( 0.0, 0.0, -300.0));
	l_billeNode->SetPosition( SetVector3( 0.0, 0.0, -400.0));

	l_plateToChangeStr = "1";
	l_plateNode = SceneNode_GetByName("Plateau" + l_plateToChangeStr + "Node");
	l_platePosition = l_plateNode->GetPosition();

	Overlay_Hide( "Scores");
	Overlay_Hide( "InGame");
	Overlay_Hide( "Regles");
	Overlay_Hide( "Commandes");
	Overlay_Hide( "Fin");
	Overlay_Hide( "Tilt");
	Overlay_Hide( "Options");
	Overlay_Hide( "MenuInGame");
	OverlayElement_GetByName( "Menu/Continuer")->Hide();
	OverlayElement_GetByName( "Menu/Recommencer")->Hide();
	OverlayElement_GetByName( "Menu/Recommencer/Cout")->Hide();
};

void BeginGame()
{
	l_titleShown = false;

	l_billeNode->SetPosition( SetVector3( 0.0, 1.0, -400.0));
	l_billePhys->SetEnabled( false);
	l_billePhys->ReassertPosition();
	l_billePhys->SetSpeed( VECTOR3_ZERO);
	l_billePhys->SetForce( VECTOR3_ZERO);
	l_billePhys->SetTorque( VECTOR3_ZERO);
	l_billePhys->SetAngularSpeed( VECTOR3_ZERO);

	l_lanceurNode->SetOrientation( SetQuaternion( SetVector3( 0.0, 1.0, 0.0), 180.0));

	g_rootCamera->GetParent()->SetPosition( l_originalCamPos);
	g_rootCamera->GetParent()->SetOrientation( SetQuaternion( SetVector3( 1.0, 0.0, 0.0), -60.0));
	g_rootCamera->GetParent()->Yaw( 180.0);

	l_initForce = SetVector3( 0.0, 0.0, 20000.0);
	l_currentCamPos = l_originalCamPos;

	l_level = 0;
	l_plateToChangeStr = "1";
	l_plateNode = SceneNode_GetByName("Plateau" + l_plateToChangeStr + "Node");
	l_platePosition = l_plateNode->GetPosition();
	UpdatePlateau( -l_platePosition[2]);

	l_level = 1;
	l_plateToChangeStr = "2";
	l_plateNode = SceneNode_GetByName("Plateau" + l_plateToChangeStr + "Node");
	l_platePosition = l_plateNode->GetPosition();
	UpdatePlateau( 915.0 - l_platePosition[2]);

	l_plateToChangeStr = "1";
	l_plateNode = SceneNode_GetByName("Plateau" + l_plateToChangeStr + "Node");
	l_platePosition = l_plateNode->GetPosition();

	g_score = 0;
	g_distance = 0.0;
	UpdateScore();
	UpdateDistance();

	l_shaking = false;
	l_inGame = false;
	l_leftDown = false;
	l_gameStarted = false;
	l_ballOnRightFlipper = false;
	l_ballOnLeftFlipper = false;
	l_leftAtMax = false;
	l_rightAtMax= false;
	l_tilted = false;
	l_plateToChange = 1;
	g_score = 0;
	g_distance = 0.0;
	l_plateToChangeStr = "1";
	current_pitch = 0.0;
	previous_pitch = 0.0;
	l_currentLanceurYaw = 0.0;
	l_timeSinceLastWall = 0.0;
	l_platePosition = VECTOR3_ZERO;
	Overlay_Hide( "Menu");
	OverlayElement_GetByName( "Menu/Jouer")->Hide();
	OverlayElement_GetByName( "Menu/Continuer")->Show();
	Overlay_Show( "InGame");
	Overlay_Hide( "Tilt");
	Overlay_Show( "MenuInGame");
	Overlay_Hide( "Title");
	timer( "Start", TIMERTYPE_ONCE, 0.2)
	{
		l_inGame = true;
	};
	Overlay_Hide( "FinMiniGame");
};

void ResetGame()
{
	InitialiseFlipper();
};

InitialiseFlipper();