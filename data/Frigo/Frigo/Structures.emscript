class RootCamera
{
	camera Camera;
	scene_node Parent;
	real MinPitch;
	real MaxPitch;
	real MinYaw;
	real MaxYaw;
	real CurrentPitch;
	real CurrentYaw;
	real PreviousPitch;
	real PreviousYaw;

	void Init()
	{
		Camera = Camera_GetByName( "RootCamera");
		Parent = Camera->GetParent();
		MinPitch = -30.0;
		MaxPitch = 0.0;
		MinYaw = -30.0;
		MaxYaw = 30.0;
		CurrentPitch = -23.7496;
		PreviousPitch = -23.7496;
		CurrentYaw = -30.0;
		PreviousYaw = -30.0;
	}
}

class Fridge
{
	object Entity;
	object Door;
	object Handle;
	scene_node DoorNode;
	light Light;
	bool DoorOpened;
	vector3 ClosedAngle;
	vector3 OpenedAngle;
	vector3 CurrentAngle;

	void Init()
	{
		Entity = Object_GetByName( "Frigo");
		Door = Object_GetByName( "Porte");
		Handle = Object_GetByName( "Poignee");
		DoorNode = Door->GetParent();
		DoorNode->SetOrientation( SetQuaternion( SetVector3( 0.0, 0.0, 1.0), 180.0));
		Light = Light_GetByName( "light_fridge");
		DoorOpened = false;
		ClosedAngle = SetVector3( 0.0, 0.0, 0.0);
		OpenedAngle = SetVector3( -120.0, 0.0, 0.0);
		Light->Hide();
	}
}

struct Object
{
	int Id;
	string Name;
	string MapIndex;
	string Mesh;
	string Image;
	int Price;
	bool Composed;
	real Fruit;
	real Vegetable;
	real AddedSugar;
	real Fat;
}

class ObjectInstance
{
	Object InstanceObject;
	object Entity;
	scene_node Node;
	vector3 Position;

	void Delete()
	{
		Object_Destroy( Entity);
		SceneNode_Destroy( Node->GetName());
	}
}

struct Magnet
{
	int Id;
	string Material;
}

class MagnetInstance
{
	Magnet InstanceMagnet;
	object Entity;
	scene_node Node;
	real X;
	real Y;
	real Angle;

	void Delete()
	{
		Echo( "Destroying Magnet");
		Object_Destroy( Entity);
		SceneNode_Destroy( Node->GetName());
	}

	void CheckValid()
	{
		// on the door
		if (X > 85.0)
		{
			X = 85.0;
		}
		elseif (X < 12.0)
		{
			X = 12.0;
		}
		if (Y > 35.0)
		{
			Y = 35.0;
		}
		elseif (Y < -35.0)
		{
			Y = -35.0;
		}

		// not on the handle
		if (X > 75.0 && Y > -17.33 && Y < 26.0)
		{
			X = 75.0;
		}

		// put angle between 0 and 360
		while (Angle > 360.0)
		{
			Angle = Angle - 360.0;
		}
		while (Angle < 0.0)
		{
			Angle = Angle + 360.0;
		}
	}
}

struct StringRealPair
{
	string First;
	real Second;
}

int_map <Magnet> g_allMagnets;
int_map <Object> g_allObjects;
array <string> g_status;
string_map <ObjectInstance> g_fridgeContent;
string_map <MagnetInstance> g_fridgeMagnets;

void ListFridge( string p_header)
{
	iterator <string_map <ObjectInstance> > l_it;
/*
	iterator <string_map <ObjectInstance> > l_endit;
	l_endit = g_fridgeContent->End();
	string l_name;
	ObjectInstance l_object;
	Echo( p_header + " - " + itoa( g_fridgeContent->Size()));
	for (l_it = g_fridgeContent->Begin() ; l_it != l_endit ; l_it++)
	{
		l_object := l_it->Data();
		l_name = l_it->Key();

		Echo( p_header + " - " + l_name + " - " + l_object.InstanceObject.Name);
	}
*/
}

class Player
{
	int Id;
	int FacebookId;
	int PointsTotal;
	int Points;
	int HealthStatus; // 0 à 6
	overlay TotalOV;
	overlay PointsOV;
	overlay HealthOV;

	void LoadObject( string p_objectInfos)
	{
		int l_objectId;
		int l_objectNum;
		string l_name;
		Object l_object;
		ObjectInstance l_instance;
		int l_count;
		l_count = 0;
		int i;
		l_objectId = atoi( strSplitOne( p_objectInfos, "|"));
		l_objectNum = atoi( p_objectInfos);
		if (g_allObjects->Has( l_objectId))
		{
			l_object = g_allObjects->Find( l_objectId);
//			Echo( "LoadObject - " + l_object.Name);
			for (i = 0 ; i < l_objectNum ; i++)
			{
				l_name = "Object";
				if (l_objectId < 10)
				{
					l_name += "0";
				}
				if (l_objectId < 100)
				{
					l_name += "0";
				}
				if (l_objectId < 1000)
				{
					l_name += "0";
				}
				if (l_objectId < 10000)
				{
					l_name += "0";
				}
				if (l_objectId < 100000)
				{
					l_name += "0";
				}
				l_name += itoa( l_objectId) + "_";
				if (l_count < 10)
				{
					l_name += "0";
				}
				l_name += itoa( l_count);
				l_instance.InstanceObject = l_object;
				if (g_fridgeContent->Find_Iter( l_name) == g_fridgeContent->End())
				{
					g_fridgeContent->Add( l_name, l_instance);
				}
				l_count++;
			}

			ListFridge( "LoadObject");
		}
	}

	void LoadMagnet( string p_magnetInfos)
	{
		int l_magnetId;
		int l_idSender;
		MagnetInstance l_instance;
		Magnet l_magnet;
		string l_name;
		l_magnetId = atoi( strSplitOne( p_magnetInfos, "|"));
		if (g_allMagnets->Has( l_magnetId))
		{
			l_magnet = g_allMagnets->Find( l_magnetId);
			l_name = "Magnet_";
			if (l_magnetId < 10)
			{
				l_name += "0";
			}
			if (l_magnetId < 100)
			{
				l_name += "0";
			}
			if (l_magnetId < 1000)
			{
				l_name += "0";
			}
			if (l_magnetId < 10000)
			{
				l_name += "0";
			}
			if (l_magnetId < 100000)
			{
				l_name += "0";
			}
			l_name += itoa( l_magnetId) + "_";

			l_idSender = atoi( strSplitOne( p_magnetInfos, "|"));
			l_name += itoa( l_idSender);

			l_instance.X = ator( strSplitOne( p_magnetInfos, "|"));
			l_instance.Y = ator( strSplitOne( p_magnetInfos, "|"));
			l_instance.Angle = ator( p_magnetInfos);
			l_instance->CheckValid();

			l_instance.InstanceMagnet = l_magnet;
			if (g_fridgeMagnets->Find_Iter( l_name) == g_fridgeMagnets->End())
			{
				Echo( "Magnet added to fridge");
				g_fridgeMagnets->Add( l_name, l_instance);
			}
		}

	}

	void Init( bool p_main)
	{
		string l_playerInfos;
		if (p_main)
		{
			Echo( "Main Player");
			TotalOV = OverlayElement_GetByName( "TopInfos/TotalPoints/Value");
			PointsOV = OverlayElement_GetByName( "TopInfos/CurrentPoints/Value");
			HealthOV = OverlayElement_GetByName( "TopInfos/Health/Value");
			l_playerInfos = StringFromUrl( "http://marc/frigo/open_frigo.php", "");
			Echo( l_playerInfos);
		}
		else
		{
			Echo( "Not Main Player");
			TotalOV = OverlayElement_GetByName( "FriendInfos/TotalPoints/Value");
			PointsOV = OverlayElement_GetByName( "FriendInfos/CurrentPoints/Value");
			HealthOV = OverlayElement_GetByName( "FriendInfos/Health/Value");
			l_playerInfos = StringFromUrl( "http://marc/frigo/open_frigo.php?id_facebook=" + itoa( FacebookId), "");
			Echo( l_playerInfos);
		}


		if ( ! l_playerInfos->empty() && strGetChar( l_playerInfos, 0) != '<')
		{
			PointsTotal = atoi( strSplitOne( l_playerInfos, "|"));
			Points = atoi( strSplitOne( l_playerInfos, "|"));
			HealthStatus = atoi( strSplitOne( l_playerInfos, "|"));

			TotalOV->SetCaption( itoa( PointsTotal));
			PointsOV->SetCaption( itoa( Points));
			HealthOV->SetCaption( g_status[HealthStatus]);

			string l_objects;
			string l_magnets;
			l_magnets = substr( l_playerInfos, 1, npos);
			l_objects = strSplitOne( l_magnets, "@");

			Echo( "Objects : " + l_objects);
			Echo( "Magnets : " + l_magnets);

			while ( ! l_objects->empty())
			{
				this->LoadObject( strSplitOne( l_objects, "$"));
			}

			while ( ! l_magnets->empty())
			{
				this->LoadMagnet( strSplitOne( l_magnets, "$"));
			}

			ListFridge( "Player :: Init");
		}
	}
}

int_map <Player> g_friendsPlayers;

struct Friend
{
	int FacebookId;
	string FirstName;
	string LastName;
	string Image;
	material Material;
	overlay Panel;
}

int_map <Friend> g_allFriends;

class MainPlayer
{
	int TodaysEaten;
	real Fruit;
	real Vegetable;
	real AddedSugar;
	real Fat;

	void LoadFriend( string p_friendInfos)
	{
		Friend l_friend;
		Player l_player;
		int l_id;
		string l_strid;
		string l_lastName;
		string l_firstName;
		string l_image;
		l_strid = strSplitOne( p_friendInfos, "|");
		l_id = atoi( l_strid);
		l_lastName = strSplitOne( p_friendInfos, "|");
		l_firstName = strSplitOne( p_friendInfos, "|");
		l_image = p_friendInfos;
		l_friend.FacebookId = l_id;
		l_friend.FirstName = l_firstName;
		l_friend.LastName = l_lastName;
		l_friend.Image = l_image;
		if (Material_Exists( "Friend/" + l_strid))
		{
			l_friend.Material = Material_GetByName( "Friend/" + l_strid);
		}
		else
		{
			WebImage_Create( "Friend/" + l_strid, l_image);
			WebImage_Reload( "Friend/" + l_strid);
			l_friend.Material = Material_GetByName( "Friend/" + l_strid);
		}
		if (g_allFriends->Find_Iter( l_id) == g_allFriends->End())
		{
			g_allFriends->Add( l_id, l_friend);
		}
		Echo( "Friend : " + l_strid + " - " + l_firstName + " " + l_lastName + " - " + l_image);
	}

	void Init()
	{
		TodaysEaten = 0;
		Fruit = 0.0;
		Vegetable = 0.0;
		AddedSugar = 0.0;
		Fat = 0.0;
	
		// Initialisation du Player à partir du serveur ici
		string l_mainPlayerInfos;
		l_mainPlayerInfos = StringFromUrl( "http://marc/frigo/list_friends.php", "");
		if ( ! l_mainPlayerInfos->empty() && strGetChar( l_mainPlayerInfos, 0) != '<')
		{
			while ( ! l_mainPlayerInfos->empty())
			{
				this->LoadFriend( strSplitOne( l_mainPlayerInfos, "$"));
			}
		}
	}
}

class ObjectsInfo
{
	overlay Overlay;
	overlay Image;
	overlay Name;
	overlay Price;
	overlay Composed;
	overlay Fruit;
	overlay Vegetable;
	overlay AddedSugar;
	overlay Fat;

	void Init()
	{
		Overlay = OverlayElement_GetByName( "ObjectInfos");
		Image = OverlayElement_GetByName( "ObjectInfos/Vignette/Image");
		Name = OverlayElement_GetByName( "ObjectInfos/Name");
		Price = OverlayElement_GetByName( "ObjectInfos/Price");
		Composed = OverlayElement_GetByName( "ObjectInfos/Composed");
		Fruit = OverlayElement_GetByName( "ObjectInfos/Fruit");
		Vegetable = OverlayElement_GetByName( "ObjectInfos/Vegetables");
		AddedSugar = OverlayElement_GetByName( "ObjectInfos/AddedSugar");
		Fat = OverlayElement_GetByName( "ObjectInfos/Fats");
		Overlay->Hide();
	}

	void InitFromObject( Object & p_object, bool p_main, bool p_shopping)
	{
		Echo( "InitFromObject");
		Name->SetCaption( p_object.Name);
		Price->SetCaption( itoa( p_object.Price));
		if (p_object.Composed)
		{
			Composed->SetCaption( "Oui");
		}
		else
		{
			Composed->SetCaption( "Non");
		}
		Fruit->SetCaption( rtoa( p_object.Fruit * 100.0) + "%");
		Vegetable->SetCaption( rtoa( p_object.Vegetable * 100.0) + "%");
		Fat->SetCaption( rtoa( p_object.Fat * 100.0) + "%");
		AddedSugar->SetCaption( rtoa( p_object.AddedSugar * 100.0) + "%");
		Image->SetMaterial( p_object.Image);
		Overlay->Show();
		if (p_main)
		{
			OverlayElement_GetByName( "ObjectInfos/Give")->Show();
		}
		else
		{
			OverlayElement_GetByName( "ObjectInfos/Give")->Hide();
		}
		if (p_shopping)
		{
			OverlayElement_GetByName( "ObjectInfos/Give")->Hide();
			OverlayElement_GetByName( "ObjectInfos/Eat")->Hide();
		}
	}
}

class Mouse
{
	bool LeftDown;
	bool MiddleDown;
	bool RightDown;
	real X;
	real Y;
	object PickedObject;
	overlay LastPickedOverlay;
	overlay PickedOverlay;
	overlay Tooltip;
	overlay TooltipText;
	bool ObjectSelected;
	bool VisitFriendSelected;
	bool SendFriendSelected;

	void Init()
	{
		LeftDown = false;
		MiddleDown = false;
		RightDown = false;
		PickedObject = NULL;
		X = MOUSE_POSITION_X;
		Y = MOUSE_POSITION_Y;
		Tooltip = OverlayElement_GetByName( "Tooltip");
		TooltipText = OverlayElement_GetByName( "Tooltip/Text");
		Tooltip->Hide();
		VisitFriendSelected = false;
		ObjectSelected = false;
	}
}

Mouse g_mouse;
Player g_selectedPlayer;
overlay g_selectedOverlay;
Fridge g_fridge;
Player g_mainPlayersPlayer;
string_map <StringRealPair> g_tooltipTexts;
string_map <Object> g_objectFromTooltip;


void ShowMessageBox( string p_caption)
{
	OverlayElement_GetByName( "Frigo/MessageBox/Caption")->SetCaption( p_caption);
	Overlay_Show( "Frigo/MessageBox");
}