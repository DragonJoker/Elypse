project( ElypseCore )

set( ${PROJECT_NAME}_VERSION_MAJOR	0 )
set( ${PROJECT_NAME}_VERSION_MINOR	9 )
set( ${PROJECT_NAME}_VERSION_BUILD	4 )

if ( NOT WIN32 )
	find_package( Atk )
	find_package( Freetype )
	find_package( Cairo )
	find_package( Pango )
	find_package( GTK )
	find_package( Atkmm )
	find_package( GTKmm )
	find_package( GDKmm )
	find_package( Glibmm )
	find_package( GIOmm )
	find_package( Cairomm )
	find_package( Pangomm )
	find_package( SigC++ )
	find_package( GStreamer )
	find_package( LibXml )
else()
	find_package( DSHOW )
endif ( NOT WIN32 )

if ( NOT WIN32 )
	include_directories( ${Atk_INCLUDE_DIR} )
	include_directories( ${Freetype_INCLUDE_DIR} )
	include_directories( ${Cairo_INCLUDE_DIR} )
	include_directories( ${Pango_INCLUDE_DIR} )
	include_directories( ${PangoConfig_INCLUDE_DIR} )
	include_directories( ${GTK_INCLUDE_DIR} )
	include_directories( ${GDK_INCLUDE_DIR} )
	include_directories( ${GDKConfig_INCLUDE_DIR} )
	include_directories( ${Glib_INCLUDE_DIR} )
	include_directories( ${GlibConfig_INCLUDE_DIR} )
	include_directories( ${Atkmm_INCLUDE_DIR} )
	include_directories( ${GTKmm_INCLUDE_DIR} ) 
	include_directories( ${GTKmmConfig_INCLUDE_DIR} )
	include_directories( ${GDKmm_INCLUDE_DIR} )
	include_directories( ${GDKmmConfig_INCLUDE_DIR} )
	include_directories( ${GDK-PixBuf_INCLUDE_DIR} )
	include_directories( ${Glibmm_INCLUDE_DIR} )
	include_directories( ${GlibmmConfig_INCLUDE_DIR} )
	include_directories( ${GIOmm_INCLUDE_DIR} )
	include_directories( ${Cairomm_INCLUDE_DIR} )
	include_directories( ${Pangomm_INCLUDE_DIR} )
	include_directories( ${PangommConfig_INCLUDE_DIR} )
	include_directories( ${SigC++_INCLUDE_DIR} )
	include_directories( ${SigC++Config_INCLUDE_DIR} )
	include_directories( ${GSTREAMER_INCLUDE_DIR} )
	include_directories( ${LIBXML_INCLUDE_DIR} )
else ()
	if ( DSHOW_FOUND )
		message( STATUS "+ Found DirectShow" )
		include_directories( ${DSHOW_INCLUDE_DIRS} )
	endif ()
endif ( NOT WIN32 )

include_directories( ${CMAKE_SOURCE_DIR}/Core/GeneralLib/Src )

set( GtkmmLibraries "")
FOREACH( Lib ${SigC++_LIBRARY} )
	if ( GtkmmLibraries )
		set( GtkmmLibraries "${GtkmmLibraries}|${Lib}" )
	else()
		set( GtkmmLibraries "${Lib}" )
	endif()
ENDFOREACH()
FOREACH( Lib ${Atk_LIBRARY} )
	if ( GtkmmLibraries )
		set( GtkmmLibraries "${GtkmmLibraries}|${Lib}" )
	else()
		set( GtkmmLibraries "${Lib}" )
	endif()
ENDFOREACH()
FOREACH(Lib ${Atkmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Pango_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Pangomm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Freetype_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Cairo_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Cairomm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GTK_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GDK_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GDK-PixBuf_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GIO_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Glib_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GTKmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GDKmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Glibmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GIOmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()

set( XmlLibraries "")
FOREACH(Lib ${LIBXML_LIBRARY_DIR})
	if (XmlLibraries)
		set(XmlLibraries "${XmlLibraries}|${Lib}")
	else()
		set(XmlLibraries "${Lib}")
	endif()
ENDFOREACH()

set( GstLibraries "")
FOREACH(Lib ${GSTREAMER_LIBRARIES})
	if (GstLibraries)
		set(GstLibraries "${GstLibraries}|${Lib}")
	else()
		set(GstLibraries "${Lib}")
	endif()
ENDFOREACH()

set( DShowLibraries "")
FOREACH(Lib ${DSHOW_LIBRARIES})
	if (DShowLibraries)
		set(DShowLibraries "${DShowLibraries}|${Lib}")
	else()
		set(DShowLibraries "${Lib}")
	endif()
ENDFOREACH()

add_target(
	${PROJECT_NAME}
	api_dll
	"GeneralLib"
	"GeneralLib;${BoostLibraries};${ZlibLibraries};${LibZipLibraries};${CurlLibraries};${FmodLibraries};${OgreLibraries};${OdeLibraries};${GstLibraries};${DShowLibraries};${GTK2_LIBRARIES};${XmlLibraries};${GtkmmLibraries}"
	"PrecompiledHeader.h"
	"PrecompiledHeader.cpp"
)
	
set_property( TARGET ${PROJECT_NAME} PROPERTY FOLDER "Core" )
set( Build "yes (version ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_BUILD})" PARENT_SCOPE )
add_target_astyle( ${PROJECT_NAME} ".h;.hpp;.inl;.cpp" )

install_dll( ${PROJECT_NAME} ${Boost_DATE_TIME_LIBRARY_DEBUG} Debug )
install_dll( ${PROJECT_NAME} ${Boost_DATE_TIME_LIBRARY_RELEASE} Release )
install_dll( ${PROJECT_NAME} ${Boost_FILESYSTEM_LIBRARY_DEBUG} Debug )
install_dll( ${PROJECT_NAME} ${Boost_FILESYSTEM_LIBRARY_RELEASE} Release )
install_dll( ${PROJECT_NAME} ${Boost_SYSTEM_LIBRARY_DEBUG} Debug )
install_dll( ${PROJECT_NAME} ${Boost_SYSTEM_LIBRARY_RELEASE} Release )
install_dll( ${PROJECT_NAME} ${Fmod_LIBRARY} Debug )
install_dll( ${PROJECT_NAME} ${Fmod_LIBRARY} Release )
install_dll( ${PROJECT_NAME} ${Ogre_LIBRARY_DEBUG} Debug _d )
install_dll( ${PROJECT_NAME} ${Ogre_LIBRARY_RELEASE} Release )
copy_dll( ${PROJECT_NAME} ${Boost_DATE_TIME_LIBRARY_DEBUG} Debug )
copy_dll( ${PROJECT_NAME} ${Boost_DATE_TIME_LIBRARY_RELEASE} Release )
copy_dll( ${PROJECT_NAME} ${Boost_FILESYSTEM_LIBRARY_DEBUG} Debug )
copy_dll( ${PROJECT_NAME} ${Boost_FILESYSTEM_LIBRARY_RELEASE} Release )
copy_dll( ${PROJECT_NAME} ${Boost_SYSTEM_LIBRARY_DEBUG} Debug )
copy_dll( ${PROJECT_NAME} ${Boost_SYSTEM_LIBRARY_RELEASE} Release )
copy_dll( ${PROJECT_NAME} ${Fmod_LIBRARY} Debug )
copy_dll( ${PROJECT_NAME} ${Fmod_LIBRARY} Release )
copy_dll( ${PROJECT_NAME} ${Ogre_LIBRARY_DEBUG} Debug )
copy_dll( ${PROJECT_NAME} ${Ogre_LIBRARY_RELEASE} Release )
