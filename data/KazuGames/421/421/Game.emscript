bool l_gameStarted;
bool l_inGame;
bool l_titleShown;
bool l_music;
bool l_sound;
bool l_dicesLaunched;
bool l_dicesStopped;
bool l_dice1Stopped;
bool l_dice2Stopped;
bool l_dice3Stopped;
bool l_speedLower;
bool l_angularSpeedLower;
bool l_diceStopped;
bool l_dice1Kept;
bool l_dice2Kept;
bool l_dice3Kept;

int i;
int l_nbDicesToLaunch;
int l_currentDice;
int l_faceValue;
int l_nbTries;
int l_maxTries;

real l_relativeRegletteWidth;
real l_ticPos;
real l_musicVol;
real l_soundVol;
real l_xAngle;
real l_yAngle;
real l_zAngle;
real l_diceX;

vector3 l_result;
vector3 l_godetStartPosition;
vector3 l_godetMiddlePosition;
vector3 l_godetEndPosition;
vector3 l_godetCurrentPosition;
vector3 l_godetStartAngle;
vector3 l_godetMiddleAngle;
vector3 l_godetEndAngle;
vector3 l_godetCurrentAngle;
vector3 l_minSpeed;
vector3 l_minAngularSpeed;

vector3 l_dice1StartPos;
vector3 l_dice1CurrentPos;
vector3 l_dice1EndPos;
vector3 l_dice2StartPos;
vector3 l_dice2CurrentPos;
vector3 l_dice2EndPos;
vector3 l_dice3StartPos;
vector3 l_dice3CurrentPos;
vector3 l_dice3EndPos;

vector3 l_dice1StartAngle;
vector3 l_dice1CurrentAngle;
vector3 l_dice1EndAngle;
vector3 l_dice2StartAngle;
vector3 l_dice2CurrentAngle;
vector3 l_dice2EndAngle;
vector3 l_dice3StartAngle;
vector3 l_dice3CurrentAngle;
vector3 l_dice3EndAngle;
vector3 l_axis;

quaternion l_orientation;
quaternion l_dice1CurrentOrientation;
quaternion l_dice2CurrentOrientation;
quaternion l_dice3CurrentOrientation;
quaternion l_dice1PreviousOrientation;
quaternion l_dice2PreviousOrientation;
quaternion l_dice3PreviousOrientation;

string l_name;
string l_dicesKept;
string l_dicesToLaunch;
string l_launchFaces;
string l_keptFaces;
string l_checkFaces;

overlay l_ticSound;
overlay l_ticMusic;

object l_selectedObject;

scene_node l_dice1;
scene_node l_dice2;
scene_node l_dice3;
scene_node l_godet;

physics_object l_dice1Phys;
physics_object l_dice2Phys;
physics_object l_dice3Phys;

void PauseGame()
{
	Overlay_Hide( "MenuInGame");
	Overlay_Show( "Menu");
	Timer_PauseAll();
	l_inGame = false;
};

void ContinueGame()
{
	Overlay_Show( "MenuInGame");
	Overlay_Hide( "Menu");
	Timer_PlayAll();
	l_inGame = true;
};

void BeginGame()
{
	Overlay_Hide( "Title");
	Overlay_Hide( "Menu");
	Overlay_Show( "MenuInGame");
	Timer_PlayAll();
	l_titleShown = false;
	l_gameStarted = true;
	l_nbTries = 0;
	timer( "BeginGame", TIMERTYPE_ONCE, 0.3)
	{
		l_inGame = true;
	};
};

void InitialiseGame();

void StopGame()
{
	InitialiseGame();
	Timer_KillAll();
	l_inGame = false;
	l_gameStarted = false;
	Overlay_Hide( "Fin");
	Overlay_Hide( "MenuInGame");
	Object_GetByName( "Dice1")->SetSubMaterial( 0, "421/surface");
	Object_GetByName( "Dice2")->SetSubMaterial( 0, "421/surface");
	Object_GetByName( "Dice3")->SetSubMaterial( 0, "421/surface");
	l_keptFaces->clear();
	l_name->clear();
	l_dicesKept->clear();
	l_dicesToLaunch->clear();
	l_launchFaces->clear();
	l_checkFaces->clear();
	l_dice1Kept = false;
	l_dice2Kept = false;
	l_dice3Kept = false;
	SceneNode_GetByName( "Dice1")->SetVisible( false);
	SceneNode_GetByName( "Dice2")->SetVisible( false);
	SceneNode_GetByName( "Dice3")->SetVisible( false);
};

void CheckEndDices()
{
	l_keptFaces = l_keptFaces + l_launchFaces;

	Echo( "CheckEndDices - " + l_keptFaces);

	if (l_keptFaces->find( "4") != npos && l_keptFaces->find( "1") != npos && l_keptFaces->find( "2") != npos)
	{
		Echo( "CheckEndDices - Win");
		g_score = 4000 - (l_nbTries * 1000);
		OverlayElement_GetByName( "Fin")->SetMaterial( "Gagne");
		_submitHighscore();
	}
	else
	{
		Echo( "CheckEndDices - Lose");
		g_score = 0;
		OverlayElement_GetByName( "Fin")->SetMaterial( "Perdu");
		_submitHighscore();
	};
	Overlay_Show( "Fin");
};

bool g_clearToGo = true;
bool g_free = true;

void EndGame()
{
	Overlay_Hide( "MenuInGame");

	l_inGame = false;
	l_gameStarted = false;
	Overlay_Show( "Menu");
	OverlayElement_GetByName( "Menu/Jouer")->Hide();
	OverlayElement_GetByName( "Menu/Continuer")->Hide();
	OverlayElement_GetByName( "Menu/Recommencer")->Show();
	OverlayElement_GetByName( "Menu/Recommencer/Cout")->Show();
	OverlayElement_GetByName( "Menu/Recommencer/Cout")->SetCaption( "");
};

void IsSpeedLower( vector3 p_speed, vector3 p_minSpeed)
{
	l_speedLower = (abs(p_speed[0]) < abs(p_minSpeed[0]) && abs(p_speed[1]) < abs(p_minSpeed[1]) && abs(p_speed[2]) < abs(p_minSpeed[2]));
};

void IsAngularSpeedLower( vector3 p_angularSpeed, vector3 p_minAngularSpeed, scene_node p_iasDice)
{
	l_angularSpeedLower = (abs(p_angularSpeed[0]) < abs(p_minAngularSpeed[0]) && abs(p_angularSpeed[1]) < abs(p_minAngularSpeed[1]) && abs(p_angularSpeed[2]) < abs(p_minAngularSpeed[2]));
};

void DiceStopped( vector3 p_dsSpeed, vector3 p_dsAngularSpeed, scene_node p_dsDice)
{
	IsSpeedLower( p_dsSpeed, l_minSpeed);
	IsAngularSpeedLower( p_dsAngularSpeed, l_minAngularSpeed, p_dsDice);
	l_diceStopped = (l_speedLower && l_angularSpeedLower);
};

void RetrieveFace( scene_node p_rfDice)
{
	l_orientation = p_rfDice->GetOrientation();
	l_result = l_orientation * UNIT_X; // 3
	if (abs( (l_result[1]) - 1.0) < 0.1)
	{
		l_axis = UNIT_X;
		l_faceValue = 3;
	}
	else
	{
		l_result = l_orientation * UNIT_Y; // 6
		if (abs( (l_result[1]) - 1.0) < 0.1)
		{
			l_axis = UNIT_Y;
			l_faceValue = 6;
		}
		else
		{
			l_result = l_orientation * UNIT_Z; // 2
			if (abs( (l_result[1]) - 1.0) < 0.1)
			{
				l_axis = UNIT_Z;
				l_faceValue = 2;
			}
			else
			{
				l_result = l_orientation * NEGATIVE_UNIT_X; // 4
				if (abs( (l_result[1]) - 1.0) < 0.1)
				{
					l_axis = NEGATIVE_UNIT_X;
					l_faceValue = 4;
				}
				else
				{
					l_result = l_orientation * NEGATIVE_UNIT_Y; // 1
					if (abs( (l_result[1]) - 1.0) < 0.1)
					{
						l_axis = NEGATIVE_UNIT_Y;
						l_faceValue = 1;
					}
					else
					{
						l_result = l_orientation * NEGATIVE_UNIT_Z; // 5
						if (abs( (l_result[1]) - 1.0) < 0.1)
						{
							l_axis = NEGATIVE_UNIT_Z;
							l_faceValue = 5;
						}
						else
						{
							Echo( "UnknownFace");
						};
					};
				};
			};
		};
	};
//	Echo( "RetrieveFace - Face : " + itoa( l_faceValue));
};

void Reorient( scene_node p_rNode)
{
	if (l_axis == UNIT_X)
	{
// 3
		p_rNode->Pitch( -p_rNode->GetPitch());
	}
	elseif (l_axis == NEGATIVE_UNIT_X)
	{
// 4
		p_rNode->Pitch( -p_rNode->GetPitch());
	}
	elseif (l_axis == UNIT_Y)
	{
// 6
		p_rNode->Yaw( -p_rNode->GetYaw());
	}
	elseif (l_axis == NEGATIVE_UNIT_Y)
	{
// 1
		p_rNode->Yaw( -p_rNode->GetYaw());
	}
	elseif (l_axis == UNIT_Z)
	{
// 2
		p_rNode->Yaw( -p_rNode->GetYaw());
	}
	elseif (l_axis == NEGATIVE_UNIT_Z)
	{
// 5
		p_rNode->Yaw( -p_rNode->GetYaw());
	};
};

void StopDice( scene_node p_sdDice, physics_object p_sdDicePhys)
{
	p_sdDicePhys->SetEnabled( false);
	RetrieveFace( p_sdDice);
};

void CheckDices()
{
	Echo( "CheckDices- " + l_keptFaces + " - " + l_launchFaces);
	l_checkFaces = l_keptFaces + l_launchFaces;
	Echo( "CheckDices- " + l_checkFaces);
	if (l_checkFaces->find( "4") != npos && l_checkFaces->find( "1") != npos && l_checkFaces->find( "2") != npos)
	{
		Echo( "CheckDices - Win");
		l_inGame = false;
		l_gameStarted = false;
		Overlay_Hide( "MenuInGame");
		g_score = 4000 - (l_nbTries * 1000);
		OverlayElement_GetByName( "Fin")->SetMaterial( "Gagne");
		Overlay_Show( "Fin");
		_submitHighscore();
		timer( "EndGame", TIMERTYPE_ONCE, 2.0)
		{
			Overlay_Hide( "Fin");
			EndGame();
		};
	};
};

void UpdateDices()
{
	for (i = 0 ; i < l_nbDicesToLaunch ; i++)
	{
		if (i == 0 && ! l_dice1Stopped)
		{
			l_dice1CurrentOrientation = l_dice1->GetOrientation();
			DiceStopped( l_dice1Phys->GetSpeed(), l_dice1Phys->GetAngularSpeed(), l_dice1);
			if (l_diceStopped)
			{
				l_dice1Stopped = true;
				l_diceX = l_diceX + 20.0;
				StopDice( l_dice1, l_dice1Phys);
				l_launchFaces = l_launchFaces + itoa( l_faceValue);
			};
			l_dice1PreviousOrientation = l_dice1CurrentOrientation;
		}
		elseif (i == 1 && ! l_dice2Stopped)
		{
			l_dice2CurrentOrientation = l_dice2->GetOrientation();
			DiceStopped( l_dice2Phys->GetSpeed(), l_dice2Phys->GetAngularSpeed(), l_dice2);
			if (l_diceStopped)
			{
				l_dice2Stopped = true;
				l_diceX = l_diceX + 20.0;
				StopDice( l_dice2, l_dice2Phys);
				l_launchFaces = l_launchFaces + itoa( l_faceValue);
			};
			l_dice2PreviousOrientation = l_dice2CurrentOrientation;
		}
		elseif (i == 2 && ! l_dice3Stopped)
		{
			l_dice3CurrentOrientation = l_dice3->GetOrientation();
			DiceStopped( l_dice3Phys->GetSpeed(), l_dice3Phys->GetAngularSpeed(), l_dice3);
			if (l_diceStopped)
			{
				l_dice3Stopped = true;
				l_diceX = l_diceX + 20.0;
				StopDice( l_dice3, l_dice3Phys);
				l_launchFaces = l_launchFaces + itoa( l_faceValue);
			};
			l_dice3PreviousOrientation = l_dice3CurrentOrientation;
		};
	};

	l_dicesStopped = (l_dice1Stopped && l_dice2Stopped && l_dice3Stopped);
	if (l_dicesStopped)
	{
		Echo( "Dices Stopped");
		Timer_Kill( "UpdateDices");
		
		if (l_nbTries == l_maxTries)
		{
			CheckEndDices();
			Overlay_Hide( "MenuInGame");
			timer( "EndGame", TIMERTYPE_ONCE, 2.0)
			{
				Overlay_Hide( "Fin");
				EndGame();
			};
		}
		else
		{
			CheckDices();
		};
	};
};

void LaunchDice( scene_node p_ldDice, physics_object p_ldDicePhys, vector3 p_ldPosition)
{
	l_xAngle = rand( 0.0, 4.0);
	l_yAngle = rand( 0.0, 4.0);
	l_zAngle = rand( 0.0, 4.0);
	p_ldDice->SetPosition( p_ldPosition);
	p_ldDice->SetVisible( true);
	p_ldDice->Pitch( l_xAngle * 90.0);
	p_ldDice->Yaw( l_yAngle * 90.0);
	p_ldDice->RotateLocal( UNIT_Z, l_zAngle * 90.0);
	p_ldDicePhys->ReassertPosition();
	p_ldDice->Hide();
};

void EndDiceLaunch( scene_node p_edlDice, physics_object p_edlDicePhys)
{
	p_edlDice->Show();
	Sound_Play( p_edlDice->GetName(), p_edlDice->GetName());
	p_edlDicePhys->SetEnabled( true);
	p_edlDicePhys->SetSpeed( SetVector3( rand( 50.0, 80.0), rand( -30.0, -40.0), 0.0));
	p_edlDicePhys->SetAngularSpeed( SetVector3( rand( -20.0, -30.0), rand( -20.0, -30.0), rand( -20.0, -30.0)));
};

void LaunchDices()
{
	l_launchFaces->clear();
	l_nbTries = l_nbTries + 1;
	l_dicesLaunched = true;
	l_dicesStopped = false;
	l_dicesToLaunch = "123";
	l_nbDicesToLaunch = 3;
	l_currentDice = 1;
	l_diceX = (l_dicesKept->length() * 20.0) - 40.0;

	l_godet->SetPosition( l_godetStartPosition);
	l_godet->SetOrientation( SetQuaternion( UNIT_Z, l_godetStartAngle[0]));
	l_godet->Show();

	for (i = 0 ; i < l_dicesKept->length() ; i++)
	{
		l_dicesToLaunch->erase( l_dicesToLaunch->find( ctoa( strGetChar( l_dicesKept, i))), 1);
		l_nbDicesToLaunch = l_nbDicesToLaunch - 1;
	};
//	Echo( "Dices To Launch : " + l_dicesToLaunch);
	for (i = 0 ; i < l_dicesToLaunch->length() ; i++)
	{
		l_name = "Dice" + strGetChar( l_dicesToLaunch, i);
		if (i == 0)
		{
			l_dice1 = SceneNode_GetByName( l_name);
			l_dice1Phys = Object_GetByName( l_dice1->GetName())->GetPhysicsObject();
			LaunchDice( l_dice1, l_dice1Phys, l_godetEndPosition - SetVector3( 15.0, 8.0, 0.0));
		}
		elseif (i == 1)
		{
			l_dice2 = SceneNode_GetByName( l_name);
			l_dice2Phys = Object_GetByName( l_dice2->GetName())->GetPhysicsObject();
			LaunchDice( l_dice2, l_dice2Phys, l_godetEndPosition);
		}
		else
		{
			l_dice3 = SceneNode_GetByName( l_name);
			l_dice3Phys = Object_GetByName( l_dice3->GetName())->GetPhysicsObject();
			LaunchDice( l_dice3, l_dice3Phys, l_godetEndPosition + SetVector3( 15.0, 8.0, 0.0));
		};
	};

	timer( "LaunchDices", TIMERTYPE_CONTINUOUS, 0.3)
	{
		l_godetCurrentPosition = V3_BezierInterpolation( l_godetStartPosition, l_godetMiddlePosition, l_godetEndPosition, CURRENTTIMER_TIME_ELAPSED / 0.3);
		l_godet->SetPosition( l_godetCurrentPosition);
		l_godetCurrentAngle = V3_BezierInterpolation( l_godetStartAngle, l_godetMiddleAngle, l_godetEndAngle,  CURRENTTIMER_TIME_ELAPSED / 0.3);
		l_godet->SetOrientation( SetQuaternion( UNIT_Z, (l_godetCurrentAngle[0])));
	};
	timer ( "EndDicesLaunch", TIMERTYPE_ONCE, 0.3)
	{
		l_dicesLaunched = false;
		l_godet->Hide();
		for (i = 0 ; i < l_nbDicesToLaunch ; i++)
		{
			if (i == 0)
			{
				l_dice1Stopped = false;
				EndDiceLaunch( l_dice1, l_dice1Phys);
			}
			elseif (i == 1)
			{
				l_dice2Stopped = false;
				EndDiceLaunch( l_dice2, l_dice2Phys);
			}
			else
			{
				l_dice3Stopped = false;
				EndDiceLaunch( l_dice3, l_dice3Phys);
			};
		};
		l_dice1CurrentOrientation = l_dice1->GetOrientation();
		l_dice2CurrentOrientation = l_dice2->GetOrientation();
		l_dice3CurrentOrientation = l_dice3->GetOrientation();
		timer( "UpdateDices", TIMERTYPE_PERMANENT, 0.0)
		{
			UpdateDices();
		};
	};
};

void SelectDice()
{
	l_selectedObject = MousePickupObject( MOUSE_POSITION_X, MOUSE_POSITION_Y, true);
	l_name = l_selectedObject->GetName();
//	Echo( "SelectDice - " + l_name);
	if (l_name->find( "Dice") != npos)
	{
		l_name = substr( l_name, 4, 1);
		RetrieveFace( l_selectedObject->GetParent());
		if (l_selectedObject->GetSubMaterialName( 0) == "421/surface/Selected")
		{
			l_selectedObject->SetSubMaterial( 0, "421/surface");
			l_dicesKept->erase( l_dicesKept->find( l_name), 1);
			l_keptFaces->erase( l_keptFaces->find( itoa( l_faceValue)), 1);

			if (l_selectedObject->GetParent()->GetPosition() == SetVector3( -20.0, 5.0, 75.0))
			{
				l_dice1Kept = false;
			}
			elseif (l_selectedObject->GetParent()->GetPosition() == SetVector3( 0.0, 5.0, 75.0))
			{
				l_dice2Kept = false;
			}
			elseif (l_selectedObject->GetParent()->GetPosition() == SetVector3( 20.0, 5.0, 75.0))
			{
				l_dice3Kept = false;
			};
		}
		else
		{
			l_selectedObject->SetSubMaterial( 0, "421/surface/Selected");
			l_dicesKept = l_dicesKept + l_name;
			l_keptFaces = l_keptFaces + itoa( l_faceValue);
			if ( ! l_dice1Kept)
			{
				l_dice1Kept = true;
				l_selectedObject->GetParent()->SetPosition( SetVector3( -20.0, 5.0, 75.0));
				Reorient( l_selectedObject->GetParent());
				l_selectedObject->GetPhysicsObject()->ReassertPosition();
			}
			elseif ( ! l_dice2Kept)
			{
				l_dice2Kept = true;
				l_selectedObject->GetParent()->SetPosition( SetVector3( 0.0, 5.0, 75.0));
				Reorient( l_selectedObject->GetParent());
				l_selectedObject->GetPhysicsObject()->ReassertPosition();
			}
			elseif ( ! l_dice3Kept)
			{
				l_dice3Kept = true;
				l_selectedObject->GetParent()->SetPosition( SetVector3( 20.0, 5.0, 75.0));
				Reorient( l_selectedObject->GetParent());
				l_selectedObject->GetPhysicsObject()->ReassertPosition();
			};
		};
//		Echo( "SelectDice - " + l_dicesKept + " - " + l_keptFaces);
	};
};

void InitialiseGame()
{
	l_sound = false;
	l_music = false;
	l_musicVol = 1.0;
	l_soundVol = 1.0;
	l_ticPos = 1.0;
	l_ticMusic = OverlayElement_GetByName( "Options/TicMusic");
	l_ticSound = OverlayElement_GetByName( "Options/TicSound");
	l_relativeRegletteWidth = OverlayElement_GetByName( "Options/RegletteMusic")->GetWidth() - l_ticMusic->GetWidth();

	Overlay_Hide( "Regles");
	Overlay_Hide( "Commandes");
	Overlay_Hide( "Options");
	Overlay_Hide( "MenuInGame");
	Overlay_Hide( "Score");
	Overlay_Hide( "Scores");
	Overlay_Hide( "Fin");
	Overlay_Hide( "FinInstant");
	OverlayElement_GetByName( "Menu/Continuer")->Hide();
	OverlayElement_GetByName( "Menu/Recommencer")->Hide();
	OverlayElement_GetByName( "Menu/Recommencer/Cout")->Hide();

	l_godet = SceneNode_GetByName( "Godet");

	l_inGame = false;
	l_gameStarted = false;
	l_titleShown = true;
	l_dicesStopped = true;
	l_dicesLaunched = false;
	l_dice1Stopped = false;
	l_dice2Stopped = false;
	l_dice3Stopped = false;

	l_maxTries = 3;
	l_dice1Kept = false;
	l_dice2Kept = false;
	l_dice3Kept = false;

	l_godetStartAngle = SetVector3( 0.0, 0.0, 0.0);
	l_godetMiddleAngle = SetVector3( -90.0, 0.0, 0.0);
	l_godetEndAngle = SetVector3( -120.0, 0.0, 0.0);
	
	l_godetStartPosition = SetVector3( -400.0, 250.0, 0.0);
	l_godetMiddlePosition = SetVector3( -270.0, 70.0, 0.0);
	l_godetEndPosition = SetVector3( -150.0, 50.0, 0.0);

	l_godet->SetPosition( l_godetStartPosition);
	l_godet->SetOrientation( SetQuaternion( UNIT_Z, l_godetStartAngle[0]));

	Object_GetByName( "Dice1")->GetPhysicsObject()->SetEnabled( false);
	Object_GetByName( "Dice2")->GetPhysicsObject()->SetEnabled( false);
	Object_GetByName( "Dice3")->GetPhysicsObject()->SetEnabled( false);
	SceneNode_GetByName( "Dice1")->SetVisible( false);
	SceneNode_GetByName( "Dice2")->SetVisible( false);
	SceneNode_GetByName( "Dice3")->SetVisible( false);

	l_minSpeed = SetVector3( 0.2, 0.2, 0.2);
	l_minAngularSpeed = SetVector3( 0.05, 0.05, 0.05);

	l_dice1EndPos = SetVector3( -20.0, 40.0, 530.0);
	l_dice2EndPos = SetVector3( -20.0, 50.0, 530.0);
	l_dice3EndPos = SetVector3( -20.0, 60.0, 530.0);

	Sound_Play_Global( "Ambiance");

	OverlayElement_GetByName( "Options/MusicOnOff")->Hide();
	OverlayElement_GetByName( "Options/SoundOnOff")->Hide();
	Overlay_Hide( "FinMiniGame");
};

InitialiseGame();