

Overlay_SetAction( "Menu/Jouer")
{
	Echo( "Jouer");
	BeginGame();
};

Overlay_SetAction( "Menu/Recommencer")
{
	Echo( "Recommencer");
	StopGame();
	BeginGame();
};

Overlay_SetAction( "Menu/Continuer")
{
	Echo( "Continuer");
	ContinueGame();
};

Overlay_SetAction( "MenuInGame")
{
	Echo( "InGame");
	PauseGame();
};

Overlay_SetAction( "Menu/Regles")
{
	Overlay_Hide( "Menu");
	Overlay_Show( "Regles");
};

Overlay_SetAction( "Menu/Commandes")
{
	Overlay_Hide( "Menu");
	Overlay_Show( "Commandes");
};

Overlay_SetAction( "Menu/Options")
{
	Overlay_Hide( "Menu");
	Overlay_Show( "Options");
};

Overlay_SetAction( "Menu/Scores")
{
	_retrieveHighScores();
	Overlay_Hide( "Menu");
	Overlay_Show( "Scores");
};

Overlay_SetAction( "Scores/Retour")
{
	Overlay_Show( "Menu");
	Overlay_Hide( "Scores");
};

Overlay_SetAction( "Commandes/Retour")
{
	Overlay_Hide( "Commandes");
	Overlay_Show( "Menu");
};

Overlay_SetAction( "Regles/Retour")
{
	Overlay_Hide( "Regles");
	Overlay_Show( "Menu");
};

Overlay_SetAction( "Options/Retour")
{
	Overlay_Hide( "Options");
	Overlay_Show( "Menu");
};

Overlay_SetAction( "Options/MusicOnOff")
{
	l_music = ( ! l_music);
	Sound_MuteMusic( l_music);

	if ( ! l_music)
	{
		OverlayElement_GetByName( "Options/MusicOnOff")->SetMaterial( "On");
	}
	else
	{
		OverlayElement_GetByName( "Options/MusicOnOff")->SetMaterial( "Off");
	};
};

Overlay_SetAction( "Options/SoundOnOff")
{
	l_sound = ( ! l_sound);
	Sound_MuteSFX( l_sound);

	if ( ! l_sound)
	{
		OverlayElement_GetByName( "Options/SoundOnOff")->SetMaterial( "On");
	}
	else
	{
		OverlayElement_GetByName( "Options/SoundOnOff")->SetMaterial( "Off");
	};
};

void TimerMusic()
{
	timer( "MusicChangeVolume", TIMERTYPE_PERMANENT, 0.0)
	{
		l_ticPos = MOUSE_POSITION_X - l_ticMusic->GetAbsoluteLeft();
		l_ticMusic->Translate( l_ticPos, 0.0);

		l_ticMusic->LimitToParent();

		l_musicVol = l_ticMusic->GetLeft() / l_relativeRegletteWidth;

		Sound_SetMusicVolume( l_musicVol);
	};
};

void TimerSound()
{
	timer( "SoundChangeVolume", TIMERTYPE_PERMANENT, 0.0)
	{
		l_ticPos = MOUSE_POSITION_X - l_ticSound->GetAbsoluteLeft();
		l_ticSound->Translate( l_ticPos, 0.0);

		l_ticSound->LimitToParent();

		l_soundVol = l_ticSound->GetLeft() / l_relativeRegletteWidth;

		Sound_SetSFXVolume( l_soundVol);
	};
};

Overlay_SetAction( "Options/RegletteMusic")
{
	TimerMusic();
};

Overlay_SetAction( "Options/TicMusic")
{
	TimerMusic();
};

Overlay_SetAction( "Options/RegletteSound")
{
	TimerSound();
};

Overlay_SetAction( "Options/TicSound")
{
	TimerSound();
};

void Mouse_LButtonUp()
{
	Timer_Kill( "MusicChangeVolume");
	Timer_Kill( "SoundChangeVolume");
	Timer_Kill( "mouse_LButtonDown");
};

void Turn()
{
	if (l_animName != l_previousAnimName)
	{
		if (l_animName == "stand")
		{
			l_charAnims->StopAnimation( l_previousAnimName);
		};
		l_charAnims->StartAnimation( l_animName);
	};

	if (l_acceleration < 0.0)
	{
		if ( ! Timer_Exists( "TurnRight"))
		{
			timer( "TurnRight", TIMERTYPE_ONCE, 0.33)
			{
				l_charAnims->PauseAnimation( "droite");
				l_playedAnimLength = CURRENTTIMER_TIME_ELAPSED;
			};
		};
	}
	elseif (l_acceleration > 0.0)
	{
		if ( ! Timer_Exists( "TurnLeft"))
		{
			timer( "TurnLeft", TIMERTYPE_ONCE, 0.33)
			{
				l_charAnims->PauseAnimation( "gauche");
				l_playedAnimLength = CURRENTTIMER_TIME_ELAPSED;
			};
		};
	};
};

BindKey( KEYCODE_LEFT, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inZombie && ! l_rightDown)
	{
		l_leftDown = true;
		l_acceleration = 9.81;
		l_previousAnimName = l_animName;
		l_animName = "gauche";
		Turn();
	};
};

BindKey( KEYCODE_RIGHT, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inZombie && ! l_leftDown)
	{
		l_rightDown = true;
		l_acceleration = -9.81;
		l_previousAnimName = l_animName;
		l_animName = "droite";
		Turn();
	};
};

BindKey( KEYCODE_LEFT, BINDKEY_UP)
{
	Timer_Kill( "TurnRight");
	Timer_Kill( "TurnLeft");
	if (l_inGame && ! l_inZombie && l_leftDown)
	{
		l_leftDown = false;
		l_acceleration = 0.0;
		l_previousAnimName = l_animName;
		l_animName = "stand";
		Turn();
	};
};

BindKey( KEYCODE_RIGHT, BINDKEY_UP)
{
	Timer_Kill( "TurnRight");
	Timer_Kill( "TurnLeft");
	if (l_inGame && ! l_inZombie && l_rightDown)
	{
		l_rightDown = false;
		l_acceleration = 0.0;
		l_previousAnimName = l_animName;
		l_animName = "stand";
		Turn();
	};
};

BindKey( KEYCODE_DOWN, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inZombie)
	{
		timer( "Breaking", TIMERTYPE_REPEAT, 0.01)
		{
			l_charNode;
/*
			l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
			l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);

			l_inclinaison = l_inclinaison + 1.0;

			if (l_inclinaison > 45.0)
			{
				l_inclinaison = 45.0;
				Timer_Kill( "Breaking");
			};

			l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), -l_inclinaison);
			l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
*/
		};

		if (l_paused)
		{
			Timer_Pause( "Breaking");
		};
	};
};

BindKey( KEYCODE_DOWN, BINDKEY_UP)
{
	if (l_inGame && ! l_inZombie)
	{
		Timer_Kill( "Breaking");
	};
};

BindKey( KEYCODE_ESCAPE, BINDKEY_UP)
{
	if (l_paused)
	{
		ContinueGame();
	}
	else
	{
		PauseGame();
	};
};

BindKey( KEYCODE_P, BINDKEY_UP)
{
	if (l_paused)
	{
		ContinueGame();
	}
	else
	{
		PauseGame();
	};
};

timer( "Initialisation", TIMERTYPE_ONCE, 0.0)
{
	Initialise();
};
