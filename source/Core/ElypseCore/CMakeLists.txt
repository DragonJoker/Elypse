project( ElypseCore )

set( EC_VERSION_MAJOR	0 )
set( EC_VERSION_MINOR	9 )
set( EC_VERSION_BUILD	4 )

if ( NOT WIN32 )
	find_package( Atk )
	find_package( Freetype )
	find_package( Cairo )
	find_package( Pango )
	find_package( GTK )
	find_package( Atkmm )
	find_package( GTKmm )
	find_package( GDKmm )
	find_package( Glibmm )
	find_package( GIOmm )
	find_package( Cairomm )
	find_package( Pangomm )
	find_package( SigC++ )
	find_package( GStreamer )
	find_package( LibXml )
else()
	find_package( DSHOW )
endif ( NOT WIN32 )

if ( NOT WIN32 )
	include_directories( ${Atk_INCLUDE_DIR} )
	include_directories( ${Freetype_INCLUDE_DIR} )
	include_directories( ${Cairo_INCLUDE_DIR} )
	include_directories( ${Pango_INCLUDE_DIR} )
	include_directories( ${PangoConfig_INCLUDE_DIR} )
	include_directories( ${GTK_INCLUDE_DIR} )
	include_directories( ${GDK_INCLUDE_DIR} )
	include_directories( ${GDKConfig_INCLUDE_DIR} )
	include_directories( ${Glib_INCLUDE_DIR} )
	include_directories( ${GlibConfig_INCLUDE_DIR} )
	include_directories( ${Atkmm_INCLUDE_DIR} )
	include_directories( ${GTKmm_INCLUDE_DIR} ) 
	include_directories( ${GTKmmConfig_INCLUDE_DIR} )
	include_directories( ${GDKmm_INCLUDE_DIR} )
	include_directories( ${GDKmmConfig_INCLUDE_DIR} )
	include_directories( ${GDK-PixBuf_INCLUDE_DIR} )
	include_directories( ${Glibmm_INCLUDE_DIR} )
	include_directories( ${GlibmmConfig_INCLUDE_DIR} )
	include_directories( ${GIOmm_INCLUDE_DIR} )
	include_directories( ${Cairomm_INCLUDE_DIR} )
	include_directories( ${Pangomm_INCLUDE_DIR} )
	include_directories( ${PangommConfig_INCLUDE_DIR} )
	include_directories( ${SigC++_INCLUDE_DIR} )
	include_directories( ${SigC++Config_INCLUDE_DIR} )
	include_directories( ${GSTREAMER_INCLUDE_DIR} )
	include_directories( ${LIBXML_INCLUDE_DIR} )
else ()
	if ( DSHOW_FOUND )
		message( STATUS "+ Found DirectShow" )
		include_directories( ${DSHOW_INCLUDE_DIRS} )
	endif ()
endif ( NOT WIN32 )

if ( OGRE_FOUND AND ODE_FOUND AND FMOD_FOUND )
	include_directories( ${CMAKE_SOURCE_DIR}/Core/GeneralLib/Src )

	set( GtkmmLibraries "")
	FOREACH( Lib ${SigC++_LIBRARY} )
		if ( GtkmmLibraries )
			set( GtkmmLibraries "${GtkmmLibraries}|${Lib}" )
		else()
			set( GtkmmLibraries "${Lib}" )
		endif()
	ENDFOREACH()
	FOREACH( Lib ${Atk_LIBRARY} )
		if ( GtkmmLibraries )
			set( GtkmmLibraries "${GtkmmLibraries}|${Lib}" )
		else()
			set( GtkmmLibraries "${Lib}" )
		endif()
	ENDFOREACH()
	FOREACH(Lib ${Atkmm_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${Pango_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${Pangomm_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${Freetype_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${Cairo_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${Cairomm_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${GTK_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${GDK_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${GDK-PixBuf_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${GIO_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${Glib_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${GTKmm_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${GDKmm_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${Glibmm_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()
	FOREACH(Lib ${GIOmm_LIBRARY})
		if (GtkmmLibraries)
			set(GtkmmLibraries "${GtkmmLibraries}|${Lib}")
		else()
			set(GtkmmLibraries "${Lib}")
		endif()
	ENDFOREACH()

	set( XmlLibraries "")
	FOREACH(Lib ${LIBXML_LIBRARY_DIR})
		if (XmlLibraries)
			set(XmlLibraries "${XmlLibraries}|${Lib}")
		else()
			set(XmlLibraries "${Lib}")
		endif()
	ENDFOREACH()

	set( GstLibraries "")
	FOREACH(Lib ${GSTREAMER_LIBRARIES})
		if (GstLibraries)
			set(GstLibraries "${GstLibraries}|${Lib}")
		else()
			set(GstLibraries "${Lib}")
		endif()
	ENDFOREACH()

	set( DShowLibraries "")
	FOREACH(Lib ${DSHOW_LIBRARIES})
		if (DShowLibraries)
			set(DShowLibraries "${DShowLibraries}|${Lib}")
		else()
			set(DShowLibraries "${Lib}")
		endif()
	ENDFOREACH()

	add_target(
		ElypseCore
		dll
		"GeneralLib"
		"GeneralLib;${BoostLibraries};${ZlibLibraries};${ZZipLibraries};${CurlLibraries};${FmodLibraries};${OgreLibraries};${OdeLibraries};${GstLibraries};${DShowLibraries};${GTK2_LIBRARIES};${XmlLibraries};${GtkmmLibraries}"
		"PrecompiledHeader.h"
		"PrecompiledHeader.cpp"
	)
		
	set_property( TARGET ElypseCore PROPERTY FOLDER "Core" )
	set( Build "yes (version ${EC_VERSION_MAJOR}.${EC_VERSION_MINOR}.${EC_VERSION_BUILD})" PARENT_SCOPE )
	add_target_astyle( ElypseCore ".h;.hpp;.inl;.cpp" )

	install(
		TARGETS	ElypseCore
		RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
		ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
		LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
	)

	file( GLOB_RECURSE ElypseCoreHeaders
		${CMAKE_CURRENT_SOURCE_DIR}/Src/*.h
		${CMAKE_CURRENT_SOURCE_DIR}/Src/*.hpp
		${CMAKE_CURRENT_SOURCE_DIR}/Src/*.inl
	)
		
	install(
		FILES ${ElypseCoreHeaders}
		DESTINATION ${CMAKE_INSTALL_PREFIX}/include/ElypseCore
	)
else()
	if ( NOT OGRE_FOUND )
		set( Build "No (missing Ogre)" PARENT_SCOPE )
	endif ()
	if ( NOT ODE_FOUND )
		set( Build "No (missing ODE)" PARENT_SCOPE )
	endif ()
	if ( NOT FMOD_FOUND )
		set( Build "No (missing FMOD)" PARENT_SCOPE )
	endif ()
endif()
