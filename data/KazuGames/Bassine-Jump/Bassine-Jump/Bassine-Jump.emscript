bool l_music;
bool l_sound;
bool l_inGame;
bool l_inBalcon;
bool l_paused;
bool l_isEditingName;
bool l_setupRace;
bool l_displayChar;
bool l_leftDown;
bool l_rightDown;
bool l_balconLevel;
bool l_balconPreviousLevel;
bool l_menuShown;
bool l_finished;
bool l_firstPlay;
bool l_titleShown;

int i;
int imax;
int l_nbSeconde;
int l_nbCentieme;
int l_maxBalcon;
int l_indexBalconTaken;

real j;
real l_musicVol;
real l_soundVol;
real l_ticPos;
real l_relativeRegletteWidth;
real l_relativeTicWidth;
real l_currentPitch;
real l_previousPitch;
real l_pitch;
real l_currentZoom;
real l_acceleration;
real l_gravity;
real l_inclinaison;
real l_frottement;
real l_rightBorder;
real l_leftBorder;
real l_rightPos;
real l_leftPos;
real l_centerPos;
real l_centerLeftPos;
real l_centerRightPos;
real l_widthBalcon;
real l_heightBalcon;
real l_floorLevel;
real l_widthBuilding;
real l_decalage;
real l_speedKMH;
real l_runTime;
real l_tmpReal;
real l_scoreIndexLastIncrease;

string l_balconTaken;

vector3 l_currentVelocity;
vector3 l_previousVelocity;
vector3 l_position;
vector3 l_balconPos;

camera l_rootCamera;

overlay l_ticMusic;
overlay l_ticSound;
overlay l_display;
overlay l_scoreInGame;
overlay l_chronoInGame;
overlay l_speedInGame;

scene_node l_charNode;
scene_node l_rootNode;
scene_node l_tempNode;

real min( real a, real b)
{
	if (a < b)
	{
		return( a);
	}
	else
	{
		return( b);
	};
};

real max( real c, real d)
{
	if (c > d)
	{
		return( c);
	}
	else
	{
		return( d);
	};
};

void ToggleMenu()
{
	Echo( "ToggleMenu");
	if (l_menuShown)
	{
		Overlay_Hide( "InGame/BottomLeft");
		Overlay_Show( "InGame/Menu");
		OverlayElement_GetByName( "InGame/TopLeft")->Show();
		OverlayElement_GetByName( "InGame/TopRight")->Show();
	}
	else
	{
		Overlay_Show( "InGame/BottomLeft");
		Overlay_Hide( "InGame/Menu");
		OverlayElement_GetByName( "InGame/TopLeft")->Hide();
		OverlayElement_GetByName( "InGame/TopRight")->Hide();
	};

	l_menuShown = ! l_menuShown;
};

void ShowTitle()
{
	if (l_titleShown)
	{
		Overlay_Show( "Title");
	};
};

void HideTitle()
{
	if (l_titleShown)
	{
		Overlay_Hide( "Title");
	};
};

void HideMenu()
{
	l_menuShown = true;
	ToggleMenu();
};

void ShowMenu()
{
	l_menuShown = false;
	ToggleMenu();
};

void PauseGame()
{
	l_paused = true;
	Timer_PauseAll();
	ShowMenu();
};

void ContinueGame()
{
	l_paused = false;
	Timer_PlayAll();

	HideMenu();
};

void ClearRace()
{
	if (l_setupRace)
	{
		for (i = 0 ; i < l_maxBalcon ; i++)
		{
			Object_Destroy( Object_GetByName( "Balcon" + itoa( i)));
			SceneNode_Destroy( "BalconNode" + itoa( i));
		};

		l_maxBalcon = 0;
		l_balconTaken = "";
	};
};

void SetupBalcon( vector3 p_balconPos)
{
	l_tempNode = SceneNode_Create( "BalconNode" + itoa( l_maxBalcon));

	l_tempNode->SetParent( l_rootNode);
	l_tempNode->SetPosition( p_balconPos);

	Object_Create( "Balcon" + itoa( l_maxBalcon), "balcon.mesh")->SetParent( l_tempNode);

	l_maxBalcon ++;
	l_balconTaken = l_balconTaken + "f";
};

void SetupRace()
{
	g_score = 0;

	l_chronoInGame->SetCaption( "0'00''");
	l_speedInGame->SetCaption( "0");
	l_scoreInGame->SetCaption( "0");

	ClearRace();

	for (i = rtoi( l_floorLevel) + 6000 ; i <= -3000 ; i += 3000)
	{
		imax = rtoi( rand( 0.0, 6.0));

		if (imax < 1)
		{
			SetupBalcon( SetVector3( l_centerPos, itor( i), 0.0));
			SetupBalcon( SetVector3( l_rightPos, itor( i), 0.0));
			SetupBalcon( SetVector3( l_leftPos, itor( i), 0.0));
		}
		elseif (imax < 2)
		{
			SetupBalcon( SetVector3( l_leftPos, itor( i), 0.0));
			SetupBalcon( SetVector3( l_centerPos, itor( i), 0.0));
		}
		elseif (imax < 3)
		{
			SetupBalcon( SetVector3( l_centerPos, itor( i), 0.0));
			SetupBalcon( SetVector3( l_rightPos, itor( i), 0.0));
		}
		elseif (imax < 4)
		{
			SetupBalcon( SetVector3( l_leftPos, itor( i), 0.0));
			SetupBalcon( SetVector3( l_centerRightPos, itor( i), 0.0));
		}
		elseif (imax < 5)
		{
			SetupBalcon( SetVector3( l_centerLeftPos, itor( i), 0.0));
			SetupBalcon( SetVector3( l_rightPos, itor( i), 0.0));
		}
		else
		{
			SetupBalcon( SetVector3( l_leftPos, itor( i), 0.0));
			SetupBalcon( SetVector3( l_rightPos, itor( i), 0.0));
		};
	};

	l_setupRace = true;
};

void ResetInclinaison()
{
	if (l_inclinaison != 0.0
	&& ! (Timer_Exists( "Accelerating") || Timer_Exists( "Breaking") || Timer_Exists( "NaturalInclinate")))
	{
		l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
		l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);
		l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
		l_inclinaison = 0.0;
	};
};

void StopGame( bool p_gagne)
{
	l_inGame = false;
	l_finished = true;

	Timer_Kill( "Gaming");
	Timer_Kill( "Friction");

	ResetInclinaison();

	if (p_gagne)
	{
		OverlayElement_GetByName( "InGame/Result")->SetMaterial( "Gagne");
		Overlay_Show( "InGame/SubmitScore");
	}
	else
	{
		OverlayElement_GetByName( "InGame/Result")->SetMaterial( "Perdu");
		g_score = 0;
	};

	OverlayElement_GetByName( "InGame/BottomLeft/Jouer")->Hide();
	OverlayElement_GetByName( "InGame/BottomLeft/Continuer")->Hide();
	OverlayElement_GetByName( "InGame/BottomLeft/Recommencer")->Show();
	OverlayElement_GetByName( "InGame/BottomLeft/Recommencer/Cout")->Show();
	Overlay_Show( "InGame/BottomLeft");
	Overlay_Show( "InGame/Result");

	ShowMenu();

	CheckClearToGo();
	if (g_clearToGo)
	{
		if (g_free)
		{
			OverlayElement_GetByName( "InGame/BottomLeft/Recommencer/Cout")->SetCaption( "gratuit");
		}
		elseif (g_freeLimited)
		{
			OverlayElement_GetByName( "InGame/BottomLeft/Recommencer/Cout")->SetCaption( "gratuit, " + l_infos + " parties");
		}
		elseif (g_priced)
		{
			OverlayElement_GetByName( "InGame/BottomLeft/Recommencer/Cout")->SetCaption( "payant : " + l_infos + " credits");
		}
		elseif (g_abonne)
		{
			OverlayElement_GetByName( "InGame/BottomLeft/Recommencer/Cout")->SetCaption( "abonne");
		};
		l_finished = false;
	}
	else
	{
		Overlay_Hide( "InGame/BottomLeft");
		Overlay_Hide( "InGame/Menu");
		OverlayElement_GetByName( "InGame/TopLeft")->Hide();
		OverlayElement_GetByName( "InGame/TopRight")->Hide();
		if ( ! c_modeInstant)
		{
			string l_endCaption;
			l_endCaption->clear();
			real l_lineWidth;
			l_lineWidth = 0.0;
			Echo( "End - not instant - " + l_infos);
			if (l_infos == "no more free")
			{
				Echo( "End - not instant - not free");
				l_endCaption = "Vous n'avez plus de partie gratuite disponible.";
				l_lineWidth = GetLineWidth( l_endCaption, "Minigame", 40.0);
			}
			else
			{
				Echo( "End - not instant - no money");
				l_endCaption = "Une partie de ce jeu coute " + l_infos + " credits.";
				l_lineWidth = GetLineWidth( l_endCaption, "Minigame", 40.0);
				l_endCaption += endl + "Vous ne disposez pas de ce montant";
			};
			OverlayElement_GetByName( "FinMiniGame")->SetCaption( l_endCaption);
			OverlayElement_GetByName( "FinMiniGame")->SetLeft( (GENERAL_SCREEN_WIDTH - l_lineWidth) / 2.0);
			Overlay_Show( "FinMiniGame");
		};
	};
};

void HidePerso()
{
	Object_GetByName( "Character")->Hide();
	Object_GetByName( "OeilD")->Hide();
	Object_GetByName( "OeilG")->Hide();
	Object_GetByName( "Blouzon")->Hide();
	Object_GetByName( "Hair")->Hide();
};

void ShowPerso()
{
	Object_GetByName( "Character")->Show();
	Object_GetByName( "OeilD")->Show();
	Object_GetByName( "OeilG")->Show();
	Object_GetByName( "Blouzon")->Show();
	Object_GetByName( "Hair")->Show();
};

void Clignotement()
{
	l_displayChar = false;

	timer( "Clignotement", TIMERTYPE_REPEAT, 0.2)
	{
		if (l_displayChar)
		{
			ShowPerso();
		}
		else
		{
			HidePerso();
		};

		l_displayChar = ! l_displayChar;
	};

	timer( "ClignotEnd", TIMERTYPE_ONCE, 2.0)
	{
		Timer_Kill( "Clignotement");

		ShowPerso();

		l_indexBalconTaken = -1;
	};
};

real Frottement()
{
	return( (((l_inclinaison / 30.0) + 0.5) * l_currentVelocity->Length() / 1000.0));
};

void BeginGame()
{
	l_firstPlay = false;
	l_finished = false;
	SetupRace();

	l_inGame = false;
	l_inBalcon = false;
	l_balconLevel = false;
	l_balconPreviousLevel = false;

	l_acceleration = 0.0;
	l_currentZoom = 1000.0;
	l_scoreIndexLastIncrease = 0.0;

	l_currentVelocity = SetVector3( 0.0, 0.0, 0.0);
	l_previousVelocity = l_currentVelocity;

	l_charNode->SetPosition( SetVector3( l_decalage, 0.0, 500.0));

	ShowPerso();

	AnimationGroup_GetByName( "Perso")->StopAnimation( "crash");
	AnimationGroup_GetByName( "Perso")->StartAnimation( "Stand");

	SceneNode_GetByName( "CameraNode")->Reset();

	l_rootCamera->GetParent()->Yaw( 90.0);
	l_rootCamera->GetParent()->Pitch( l_currentPitch);
	l_rootCamera->SetPosition( l_rootCamera->GetPosition() * (1000.0 / V3_GetLength( l_rootCamera->GetPosition())));

	timer( "CameraStarting", TIMERTYPE_REPEAT, 0.01)
	{
		if (CURRENTTIMER_NUMEXECS == 90)
		{
			Timer_Kill( "CameraStarting");

			l_rootCamera->GetParent()->Yaw( 1.0);
		}
		else
		{
			l_rootCamera->GetParent()->Yaw( 1.0);
		};
	};

	Overlay_Show( "InGame/TopLeft");
	Overlay_Show( "InGame/TopRight");
	Overlay_Hide( "InGame/Result");
	Overlay_Hide( "Title");
	OverlayElement_GetByName( "InGame/BottomLeft/Jouer")->Hide();
	OverlayElement_GetByName( "InGame/BottomLeft/Recommencer")->Hide();
	OverlayElement_GetByName( "InGame/BottomLeft/Recommencer/Cout")->Hide();
	OverlayElement_GetByName( "InGame/BottomLeft/Continuer")->Show();

	HideMenu();

	l_display->SetCaption( "Pret ?");

	OverlayElement_GetByName( "Start/Display")->Show();
	Overlay_Show( "Start");

	Timer_Kill( "Pret-3");
	Timer_Kill( "Pret-2");
	Timer_Kill( "Pret-1");
	Timer_Kill( "Pret-go");
	Timer_Kill( "Pret-vanish");
	Timer_Kill( "Friction");
	Timer_Kill( "Gaming");

	timer( "Pret-3", TIMERTYPE_ONCE, 1.0)
	{
		l_display->SetCaption( "3");
	};

	timer( "Pret-2", TIMERTYPE_ONCE, 2.0)
	{
		l_display->SetCaption( "2");
	};

	timer( "Pret-1", TIMERTYPE_ONCE, 3.0)
	{
		l_display->SetCaption( "1");

		AnimationGroup_GetByName( "Perso")->StopAnimation( "Stand");
		AnimationGroup_GetByName( "Perso")->StartAnimation( "intro");

		timer( "PlaceCamera", TIMERTYPE_REPEAT, 0.01)
		{
			if (CURRENTTIMER_NUMEXECS == 200)
			{
				Timer_Kill( "PlaceCamera");
			};

			l_currentZoom += 5.0;
			l_rootCamera->GetParent()->Pitch( -90.0 / 200.0);
			l_rootCamera->SetPosition( l_rootCamera->GetPosition() * (l_currentZoom / V3_GetLength( l_rootCamera->GetPosition())));
		};
	};

	timer( "Pret-go", TIMERTYPE_ONCE, 4.0)
	{
		l_display->SetCaption( "Go !");
	};

	timer( "Pret-vanish", TIMERTYPE_ONCE, 5.0)
	{
		Overlay_Hide( "Start");

		l_inGame = true;

		timer( "Friction", TIMERTYPE_REPEAT, 0.1)
		{
			l_previousVelocity = l_currentVelocity;

			if (l_currentVelocity->Length() > 0.0)
			{
				l_currentVelocity = l_currentVelocity * (1.0 - Frottement());

				if (l_currentVelocity[0] < 0.1 && l_currentVelocity[0] > -0.1)
				{
					l_currentVelocity = SetVector3( 0.0, l_currentVelocity[1], 0.0);
				};

				if (l_currentVelocity[1] < 0.1)
				{
					l_currentVelocity = SetVector3( l_currentVelocity[0], 0.0, 0.0);
				};
			};

			g_score += rtoi( 10.0 * (45.0 - l_inclinaison) * l_currentVelocity->Length());
		};

		timer( "Gaming", TIMERTYPE_PERMANENT, 0.0)
		{
			l_previousVelocity = l_currentVelocity;

			if ( ! l_inBalcon)
			{
				l_currentVelocity = SetVector3( l_currentVelocity[0] + l_acceleration * 0.05, l_currentVelocity[1] + l_gravity * 0.05, 0.0);
			}
			else
			{
				l_currentVelocity = SetVector3( 0.0, 0.0, 0.0);
			};

			l_position = l_charNode->GetPosition();

			if (l_position[0] > l_leftBorder)
			{
				l_currentVelocity = SetVector3( 0.0, l_currentVelocity[1], 0.0);
				l_charNode->SetPosition( SetVector3( l_leftBorder, l_position[1], l_position[2]));
			}
			elseif (l_position[0] < l_rightBorder)
			{
				l_currentVelocity = SetVector3( 0.0, l_currentVelocity[1], 0.0);
				l_charNode->SetPosition( SetVector3( l_rightBorder, l_position[1], l_position[2]));
			};

			if (l_currentVelocity->Length() > 0.0)
			{
				l_charNode->Translate( SetVector3( 100.0 * l_currentVelocity[0] * GENERAL_ELAPSED_TIME, -100.0 * l_currentVelocity[1] * GENERAL_ELAPSED_TIME, 0.0));
			};

			if (l_inGame && ! l_inBalcon)
			{
				l_position = l_charNode->GetPosition();

				for (i = 0 ; i < l_maxBalcon ; i ++)
				{
					if (l_indexBalconTaken == i || strGetChar( l_balconTaken, i) == 't')
					{
						continue();
					};

					l_tempNode = SceneNode_GetByName( "BalconNode" + itoa( i));
					l_balconPos = l_tempNode->GetPosition();
					l_balconLevel = (l_position[1] <= (l_balconPos[1] + l_heightBalcon) && l_position[1] >= l_balconPos[1]);

					if (l_position[0] >= (l_balconPos[0] - l_widthBalcon / 2.0)
					&& l_position[0] <= (l_balconPos[0] + l_widthBalcon / 2.0))
					{
						if (l_balconLevel)
						{
							ResetInclinaison();

							l_inBalcon = true;
							l_scoreIndexLastIncrease = l_balconPos[1];
							l_acceleration = 0.0;
							strSetChar( l_balconTaken, i, 't');
							l_tempNode->SetVisible( false);

							l_currentVelocity = SetVector3( 0.0, 0.0, 0.0);
							l_previousVelocity = l_currentVelocity;
							l_indexBalconTaken = i;

							l_tmpReal = -(l_floorLevel - l_balconPos[1]);
							g_score = g_score - rtoi( l_tmpReal * l_currentVelocity->Length());
							l_scoreIndexLastIncrease = l_balconPos[1];

							if (g_score < 0)
							{
								g_score = 0;
							};

							AnimationGroup_GetByName( "Perso")->StopAnimation( "move");
							AnimationGroup_GetByName( "Perso")->StartAnimation( "crash");

							timer( "EndCrash", TIMERTYPE_ONCE, AnimationGroup_GetByName( "Perso")->GetObject( "Character")->GetAnimation( "crash")->GetLength())
							{
								l_inBalcon = false;
								l_currentVelocity = SetVector3( 0.0, 0.0, 0.0);
								l_previousVelocity = l_currentVelocity;

								AnimationGroup_GetByName( "Perso")->StartAnimation( "move");

								Clignotement();
							};
						};
					}
					elseif (l_balconLevel && ! l_balconPreviousLevel && ! l_inBalcon)
					{
						l_balconPreviousLevel = true;

						if (l_balconPos[1] < l_scoreIndexLastIncrease)
						{
							l_tmpReal = -(l_floorLevel - l_balconPos[1]) * 0.1;
							g_score += rtoi( l_tmpReal * l_currentVelocity->Length());
							l_scoreIndexLastIncrease = l_balconPos[1];
						};
					}
					else
					{
						if ( ! l_balconLevel && l_balconPreviousLevel)
						{
							l_balconPreviousLevel = false;
						};
					};
				};
			};

			if (l_inGame)
			{
				l_runTime = CURRENTTIMER_TIME_ELAPSED;
			};

			l_nbSeconde = rtoi( l_runTime);
			l_runTime = l_runTime - itor( l_nbSeconde);
			l_nbCentieme = rtoi( l_runTime * 100.0);
			l_speedKMH = itor( rtoi( l_currentVelocity->Length() * 360.0)) / 100.0;

			l_scoreInGame->SetCaption( itoa( g_score));
			l_chronoInGame->SetCaption( itoa( l_nbSeconde) + "'" + itoa( l_nbCentieme) + "''");
			l_speedInGame->SetCaption( rtoa( l_speedKMH));

			if (l_inGame)
			{
				l_position = l_charNode->GetPosition();

				if ((l_position - SetVector3( l_decalage, l_floorLevel, 500.0))->Length() <= 250.0)
				{
					StopGame( true);

					AnimationGroup_GetByName( "Perso")->StopAnimation( "move");

					HidePerso();
				}
				elseif (l_position[1] <= l_floorLevel)
				{
					StopGame( false);
					l_inBalcon = true;

					AnimationGroup_GetByName( "Perso")->StopAnimation( "move");
					AnimationGroup_GetByName( "Perso")->StartAnimation( "crash");

					timer( "CrashPause", TIMERTYPE_ONCE, AnimationGroup_GetByName( "Perso")->GetObject( "Character")->GetAnimation( "crash")->GetLength() - 0.1)
					{
						AnimationGroup_GetByName( "Perso")->PauseAnimation( "crash");
					};
				};
			};
		};
	};
};

void Initialise()
{
	l_titleShown = true;
	l_sound = false;
	l_music = false;
	l_inGame = false;
	l_inBalcon = false;
	l_paused = false;
	l_isEditingName = false;
	l_setupRace = false;
	l_displayChar = true;
	l_leftDown = false;
	l_rightDown = false;
	l_firstPlay = true;

	l_musicVol = 1.0;
	l_soundVol = 1.0;
	l_ticPos = 1.0;
	l_currentPitch = -20.0;
	l_previousPitch = -20.0;
	l_currentZoom = 1000.0;
	l_currentVelocity = SetVector3( 0.0, 0.0, 0.0);
	l_previousVelocity = SetVector3( 0.0, 0.0, 0.0);
	l_acceleration = 0.0;
	l_gravity = 9.81;
	l_frottement = 0.05;
	l_inclinaison = 0.0;
	l_leftBorder = 1980.0;
	l_rightBorder = -1840.0;
	l_widthBalcon = 1110.0;
	l_heightBalcon = 165.0;
	l_widthBuilding = 4150.0;
	l_floorLevel = -48100.0;
	l_decalage = 145.0;
	l_centerPos = l_decalage / 2.0;
	l_leftPos = ((l_widthBuilding - l_widthBalcon) / 2.0) + (l_decalage / 2.0);
	l_rightPos = (-(l_widthBuilding - l_widthBalcon) / 2.0) + (l_decalage / 2.0) + 18.0;
	l_centerRightPos = (l_leftPos + l_rightPos - l_widthBalcon) / 2;
	l_centerLeftPos = (l_leftPos + l_rightPos + l_widthBalcon) / 2;
	l_maxBalcon = 0;
	l_indexBalconTaken = -1;
	g_score = 0;
	l_nbSeconde = 0;
	l_nbCentieme = 0;
	l_runTime = 0.0;

	l_ticMusic = OverlayElement_GetByName( "Options/TicMusic");
	l_ticSound = OverlayElement_GetByName( "Options/TicSound");
	l_display = OverlayElement_GetByName( "Start/Display");
	l_scoreInGame = OverlayElement_GetByName( "InGame/TopLeft/ScoreTxt");
	l_chronoInGame = OverlayElement_GetByName( "InGame/TopRight/ChronoTxt");
	l_speedInGame = OverlayElement_GetByName( "InGame/TopRight/VitesseTxt");

	l_rootNode = SceneNode_GetByName( "root node");
	l_charNode = SceneNode_GetByName( "PersoNode");
	l_rootCamera = Camera_GetByName( "RootCamera");

	l_relativeRegletteWidth = OverlayElement_GetByName( "Options/RegletteMusic")->GetWidth() - l_ticMusic->GetWidth();
	l_relativeTicWidth = l_ticMusic->GetWidth() / GENERAL_SCREEN_WIDTH;

	l_rootCamera->GetParent()->Yaw( 90.0);
	l_rootCamera->GetParent()->Pitch( l_currentPitch);
	l_rootCamera->SetPosition( l_rootCamera->GetPosition() * (l_currentZoom / V3_GetLength( l_rootCamera->GetPosition())));

	HidePerso();

	AnimationGroup_GetByName( "Perso")->StartAnimation( "Stand");

	Overlay_Hide( "InGame/SubmitScore");
	Overlay_Hide( "Commandes");
	Overlay_Hide( "Options");
	Overlay_Hide( "Regles");
	Overlay_Hide( "Start");
	Overlay_Hide( "Zcore");
	Overlay_Hide( "InGame/TopLeft");
	Overlay_Hide( "InGame/TopRight");
	Overlay_Hide( "InGame/Result");
	OverlayElement_GetByName( "InGame/BottomLeft/Continuer")->Hide();
	OverlayElement_GetByName( "InGame/BottomLeft/Recommencer")->Hide();
	OverlayElement_GetByName( "InGame/BottomLeft/Recommencer/Cout")->Hide();
	ShowMenu();

	SetupRace();

	Sound_Play_Global( "Ambiance");

	OverlayElement_GetByName( "Options/MusicOnOff")->Hide();
	OverlayElement_GetByName( "Options/SoundOnOff")->Hide();
	Overlay_Hide( "FinMiniGame");
};
