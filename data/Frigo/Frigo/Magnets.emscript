string g_material;
MagnetInstance g_currentPlacedMagnet;
int g_minMagnetMenu;
int g_magnetCount;
int g_giverId;

bool g_canAskForMagnet;
bool g_placingMagnet;
bool g_rotatingMagnet;

bool ShowMagnets( int p_begin, int p_end)
{
	int i;
	int l_end;
	l_end = p_end;
	if (l_end >= g_allMagnets->Size())
	{
		l_end = g_allMagnets->Size();
	}
	iterator <int_map <Magnet> >  l_it;
	l_it = g_allMagnets->Begin();
	iterator <int_map <Magnet> >  l_endit;
	l_endit = g_allMagnets->End();
	for (i = 0 ; i < p_begin && l_it != l_endit ; i++)
	{
		l_it++;
	}

	if (l_it == l_endit)
	{
		return false;
	}

	for (i = 0 ; i < g_magnetCount ; i++)
	{
		OverlayElement_GetByName( "MagnetDesign/Magnet" + itoa( i) + "/Image")->SetMaterial( "Vignette");
	}
	Magnet l_magnet;
	int l_count;
	l_count = 0;
	for (i = p_begin ; i < l_end && l_it != l_endit ; i++)
	{
		l_magnet = l_it->Data();
		OverlayElement_GetByName( "MagnetDesign/Magnet" + itoa( l_count) + "/Image")->SetMaterial( "vignetteMagnet/" + l_magnet.Material);
		l_count++;
		l_it++;
	}
	return true;
}

void AskAddMagnet()
{
	g_canAskForMagnet = false;
	g_mouse.X = MOUSE_POSITION_X;
	g_mouse.Y = MOUSE_POSITION_Y;
	Overlay_Show( "MagnetConfirm");
}

void CreateMagnet( string p_material)
{
	Echo( "CreateMagnet");
	g_currentPlacedMagnet.Entity = Object_GetByName("Magnet_" + itoa( g_fridgeMagnets->Size()));
	if (g_currentPlacedMagnet.Entity == NULL)
	{
		g_currentPlacedMagnet.Entity = Object_Create( "Magnet_" + itoa( g_fridgeMagnets->Size()), "magnet.mesh");
	}
	Echo( "CreateMagnet - " + g_currentPlacedMagnet.Entity->GetName());
	if (SceneNode_Exists( "NodeMagnet_" + itoa( g_fridgeMagnets->Size())))
	{
		g_currentPlacedMagnet.Node = SceneNode_GetByName( "NodeMagnet_" + itoa( g_fridgeMagnets->Size()));
	}
	else
	{
		g_currentPlacedMagnet.Node = SceneNode_Create( "NodeMagnet_" + itoa( g_fridgeMagnets->Size()));
	}
	Echo( "CreateMagnet - " + g_currentPlacedMagnet.Node->GetName());
	g_currentPlacedMagnet.Entity->SetMaterial( "magnet/" + p_material);
	g_currentPlacedMagnet.Node->SetParent( g_fridge.DoorNode);
	g_currentPlacedMagnet.Node->SetInheritOrientation( true);
	g_currentPlacedMagnet.Node->SetPosition( g_fridge.DoorNode->GetPosition());
	g_currentPlacedMagnet.Node->Translate( SetVector3( 40.0, 0.0, 4.9));
	g_currentPlacedMagnet.Node->Pitch( 90.0);
	g_currentPlacedMagnet.Node->Yaw( 180.0);
	g_currentPlacedMagnet.Entity->SetParent( g_currentPlacedMagnet.Node);
	Echo( "CreateMagnet - " + itoa( g_fridgeMagnets->Size()));
}


void SelectMagnet( int p_index)
{
	overlay l_overlay;
	l_overlay = OverlayElement_GetByName( "MagnetDesign/Magnet" + itoa( p_index) + "/Image");
	g_selectedOverlay->SetMaterial( "Vignette");
	g_selectedOverlay = OverlayElement_GetByName( "MagnetDesign/Magnet" + itoa( p_index));
	g_selectedOverlay->SetMaterial( "VignetteSel");
	string l_material;
	l_material = l_overlay->GetMaterialName();
	strSplitOne( l_material, "/");
	g_material = l_material;
	if (g_allMagnets->Has( g_minMagnetMenu + p_index + 1))
	{
		g_currentPlacedMagnet.InstanceMagnet = g_allMagnets->Find( g_minMagnetMenu + p_index + 1);
	}
}

void PlaceMagnet()
{
	g_placingMagnet = true;
	CreateMagnet( g_material);
	vector3 l_magnetPosition;
	timer( "PlaceMagnet", TIMERTYPE_PERMANENT, 0.0)
	{
		g_currentPlacedMagnet.X = g_currentPlacedMagnet.Node->GetPosition()[0] - (MOUSE_DIFFERENCE_X / 3.0);
		g_currentPlacedMagnet.Y = g_currentPlacedMagnet.Node->GetPosition()[1] + (MOUSE_DIFFERENCE_Y / 3.0);
		g_currentPlacedMagnet->CheckValid();
		l_magnetPosition = SetVector3( g_currentPlacedMagnet.X, g_currentPlacedMagnet.Y, 4.9);
		Echo( vtoa( l_magnetPosition));
		g_currentPlacedMagnet.Node->SetPosition( l_magnetPosition);
	}
}

void RotateMagnet()
{
	g_rotatingMagnet = true;
	g_currentPlacedMagnet.Angle = 0.0;
	timer( "RotateMagnet", TIMERTYPE_PERMANENT, 0.0)
	{
		g_currentPlacedMagnet.Angle -= MOUSE_DIFFERENCE_X;
		g_currentPlacedMagnet->CheckValid();
		g_currentPlacedMagnet.Node->SetOrientation( SetQuaternion( SetVector3( 0.0, 0.0, 1.0), g_currentPlacedMagnet.Angle));
		g_currentPlacedMagnet.Node->Pitch( 90.0);
		g_currentPlacedMagnet.Node->Yaw( 180.0);
	}
}

void SaveMagnet()
{
	string l_result;
	l_result = StringFromUrl( "http://" + g_baseSite + "/add_magnet.php?target_id=" + itoa( g_selectedPlayer.FacebookId) + "&id_magnet=" + itoa( g_currentPlacedMagnet.InstanceMagnet.Id) + "&posx=" + rtoa( g_currentPlacedMagnet.X) + "&posy=" + rtoa( g_currentPlacedMagnet.Y) + "&angle=" + rtoa( g_currentPlacedMagnet.Angle), "");
	if (l_result == "ok")
	{
		g_fridgeMagnets->Add( "Magnet_" + itoa( g_fridgeMagnets->Size()), g_currentPlacedMagnet);
	}
	elseif (l_result == "too much")
	{
		g_currentPlacedMagnet->Delete();
		ShowMessageBox( "Impossible de placer" + endl + "un magnet sur ce frigo" + endl + "vous l'avez deja fait");
	}
}

void RemoveMagnet()
{
	g_canOpenDoor = false;
	string l_result;
	l_result = StringFromUrl( "http://" + g_baseSite + "/remove_magnet.php?target_id=" + itoa( g_giverId), "");
	Echo( itoa( g_giverId) + " - " + l_result);
	if (l_result == "ok")
	{
		FlushFridgeContent();
		g_selectedPlayer->Init( true);
		RefreshFridgeContent();
	}
}

void SelectMagnetOnDoor()
{
	string l_name;
	l_name = g_mouse.PickedObject->GetName();
	if (g_fridgeMagnets->Has( l_name))
	{
		strSplitOne( l_name, "_");
		strSplitOne( l_name, "_");
		Echo( l_name);
		g_giverId = atoi( l_name);
		Echo( "magnet found");
		g_currentPlacedMagnet := g_fridgeMagnets->Find( l_name);
		if (g_allFriends->Has( g_giverId))
		{
			Echo( "friend found");
			Friend l_friend;
			l_friend = g_allFriends->Find( g_giverId);
			string l_friendName;
			l_friendName = l_friend.FirstName + " " + l_friend.LastName;
			OverlayElement_GetByName( "MagnetInfos/Caption")->SetCaption( "Ce magnet a ete pose par" + endl + l_friendName);
			Overlay_Show( "MagnetInfos");
		}
	}
}