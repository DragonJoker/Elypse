project( GeneralLib )

set( ${PROJECT_NAME}_VERSION_MAJOR	${VERSION_MAJOR} )
set( ${PROJECT_NAME}_VERSION_MINOR	${VERSION_MINOR} )
set( ${PROJECT_NAME}_VERSION_BUILD	${VERSION_BUILD} )

set( CMAKE_CURRENT_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/include/Core/${PROJECT_NAME} )

if ( MSVC )
	set( MSVC_DEFINITIONS
		_CRT_SECURE_NO_WARNINGS
		_SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING
		_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING
	)
endif ()

set( ${PROJECT_NAME}_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/Config.h
)
set( ${PROJECT_NAME}_SRC_FILES
)
source_group( "Header Files" FILES ${${PROJECT_NAME}_HDR_FILES} )
source_group( "Source Files" FILES ${${PROJECT_NAME}_SRC_FILES} )

set( ${PROJECT_NAME}_FOLDER_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/AutoSingleton.h
	${CMAKE_CURRENT_INCLUDE_DIR}/CircularQueue.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Named.h
	${CMAKE_CURRENT_INCLUDE_DIR}/NonCopyable.h
	${CMAKE_CURRENT_INCLUDE_DIR}/OwnedBy.h
	${CMAKE_CURRENT_INCLUDE_DIR}/ReferenceCounted.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Singleton.h
	${CMAKE_CURRENT_INCLUDE_DIR}/SlottedArrayPool.h
	${CMAKE_CURRENT_INCLUDE_DIR}/SlottedObjectPool.h
)
set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_FOLDER_HDR_FILES}
)
source_group( "Header Files\\Theory" FILES ${${PROJECT_NAME}_FOLDER_HDR_FILES} )

file( GLOB ${PROJECT_NAME}_FOLDER_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/Bezier.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Factorial.h
	${CMAKE_CURRENT_INCLUDE_DIR}/FastMath.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Pascal.h
)
set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_FOLDER_HDR_FILES}
)
source_group( "Header Files\\Math" FILES ${${PROJECT_NAME}_FOLDER_HDR_FILES} )

file( GLOB ${PROJECT_NAME}_FOLDER_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/Condition.h
	${CMAKE_CURRENT_INCLUDE_DIR}/MultiThreadConfig.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Mutex.h
	${CMAKE_CURRENT_INCLUDE_DIR}/MutexManager.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Thread.h
	${CMAKE_CURRENT_INCLUDE_DIR}/ThreadedQueue.h
	${CMAKE_CURRENT_INCLUDE_DIR}/WorkerThread.h
	${CMAKE_CURRENT_INCLUDE_DIR}/ThreadPool.h
)
file( GLOB ${PROJECT_NAME}_FOLDER_SRC_FILES
	${CMAKE_CURRENT_SOURCE_DIR}/ThreadPool.cpp
)
set( ${PROJECT_NAME}_SRC_FILES
	${${PROJECT_NAME}_SRC_FILES}
	${${PROJECT_NAME}_FOLDER_SRC_FILES}
)
set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_FOLDER_HDR_FILES}
)
source_group( "Header Files\\MultiThreading" FILES ${${PROJECT_NAME}_FOLDER_HDR_FILES} )
source_group( "Source Files\\MultiThreading" FILES ${${PROJECT_NAME}_FOLDER_SRC_FILES} )

file( GLOB ${PROJECT_NAME}_FOLDER_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/CompInfo.h
	${CMAKE_CURRENT_INCLUDE_DIR}/FileVersion.h
	${CMAKE_CURRENT_INCLUDE_DIR}/InfoCpu.h
	${CMAKE_CURRENT_INCLUDE_DIR}/RegistryKey.h
	${CMAKE_CURRENT_INCLUDE_DIR}/RegistryManager.h
)
file( GLOB ${PROJECT_NAME}_FOLDER_SRC_FILES
	${CMAKE_CURRENT_SOURCE_DIR}/FileVersion.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/RegistryKey.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/RegistryManager.cpp
)
set( ${PROJECT_NAME}_SRC_FILES
	${${PROJECT_NAME}_SRC_FILES}
	${${PROJECT_NAME}_FOLDER_SRC_FILES}
)
set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_FOLDER_HDR_FILES}
)
source_group( "Header Files\\Computer" FILES ${${PROJECT_NAME}_FOLDER_HDR_FILES} )
source_group( "Source Files\\Computer" FILES ${${PROJECT_NAME}_FOLDER_SRC_FILES} )

file( GLOB ${PROJECT_NAME}_FOLDER_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/Buffer.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Manager.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Memory.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Memory_Impl.h
)
file( GLOB ${PROJECT_NAME}_FOLDER_SRC_FILES
	${CMAKE_CURRENT_SOURCE_DIR}/Memory.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Memory_Impl.cpp
)
set( ${PROJECT_NAME}_SRC_FILES
	${${PROJECT_NAME}_SRC_FILES}
	${${PROJECT_NAME}_FOLDER_SRC_FILES}
)
set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_FOLDER_HDR_FILES}
)
source_group( "Header Files\\Templates" FILES ${${PROJECT_NAME}_FOLDER_HDR_FILES} )
source_group( "Source Files\\Templates" FILES ${${PROJECT_NAME}_FOLDER_SRC_FILES} )

file( GLOB ${PROJECT_NAME}_FOLDER_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/DownloadableFile.h
	${CMAKE_CURRENT_INCLUDE_DIR}/File.h
	${CMAKE_CURRENT_INCLUDE_DIR}/FileManager.h
	${CMAKE_CURRENT_INCLUDE_DIR}/NeoCurl.h
	${CMAKE_CURRENT_INCLUDE_DIR}/ZipArchive.h
	${CMAKE_CURRENT_INCLUDE_DIR}/ZipBase.h
	${CMAKE_CURRENT_INCLUDE_DIR}/ZipDirectory.h
	${CMAKE_CURRENT_INCLUDE_DIR}/ZipFile.h
)
file( GLOB ${PROJECT_NAME}_FOLDER_SRC_FILES
	${CMAKE_CURRENT_SOURCE_DIR}/DownloadableFile.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/File.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/FileManager.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/NeoCurl.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/ZipArchive.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/ZipFile.cpp
)
set( ${PROJECT_NAME}_SRC_FILES
	${${PROJECT_NAME}_SRC_FILES}
	${${PROJECT_NAME}_FOLDER_SRC_FILES}
)
set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_FOLDER_HDR_FILES}
)
source_group( "Header Files\\Files" FILES ${${PROJECT_NAME}_FOLDER_HDR_FILES} )
source_group( "Source Files\\Files" FILES ${${PROJECT_NAME}_FOLDER_SRC_FILES} )

file( GLOB ${PROJECT_NAME}_FOLDER_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/TcpAcceptor.h
	${CMAKE_CURRENT_INCLUDE_DIR}/TcpConnector.h
	${CMAKE_CURRENT_INCLUDE_DIR}/TcpReader.h
	${CMAKE_CURRENT_INCLUDE_DIR}/TcpWriter.h
)
file( GLOB ${PROJECT_NAME}_FOLDER_SRC_FILES
	${CMAKE_CURRENT_SOURCE_DIR}/TcpAcceptor.cpp
)
set( ${PROJECT_NAME}_SRC_FILES
	${${PROJECT_NAME}_SRC_FILES}
	${${PROJECT_NAME}_FOLDER_SRC_FILES}
)
set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_FOLDER_HDR_FILES}
)
source_group( "Header Files\\Network" FILES ${${PROJECT_NAME}_FOLDER_HDR_FILES} )
source_group( "Source Files\\Network" FILES ${${PROJECT_NAME}_FOLDER_SRC_FILES} )

file( GLOB ${PROJECT_NAME}_FOLDER_HDR_FILES
	${CMAKE_CURRENT_INCLUDE_DIR}/Assertion.h
	${CMAKE_CURRENT_INCLUDE_DIR}/DynamicLibrary.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Exception.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Execute.h
	${CMAKE_CURRENT_INCLUDE_DIR}/MD5.h
	${CMAKE_CURRENT_INCLUDE_DIR}/MinMax.h
	${CMAKE_CURRENT_INCLUDE_DIR}/MinMax.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Path.h
	${CMAKE_CURRENT_INCLUDE_DIR}/PreciseTimer.h
	${CMAKE_CURRENT_INCLUDE_DIR}/STLMacros.h
	${CMAKE_CURRENT_INCLUDE_DIR}/STLMapMacros.h
	${CMAKE_CURRENT_INCLUDE_DIR}/STLSetMacros.h
	${CMAKE_CURRENT_INCLUDE_DIR}/StringConverter.h
	${CMAKE_CURRENT_INCLUDE_DIR}/StringUtils.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Url.h
	${CMAKE_CURRENT_INCLUDE_DIR}/Utils.h
)
file( GLOB ${PROJECT_NAME}_FOLDER_SRC_FILES
	${CMAKE_CURRENT_SOURCE_DIR}/Execute.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/MD5.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/Path.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/PreciseTimer.cpp
	${CMAKE_CURRENT_SOURCE_DIR}/StringConverter.cpp
)
set( ${PROJECT_NAME}_SRC_FILES
	${${PROJECT_NAME}_SRC_FILES}
	${${PROJECT_NAME}_FOLDER_SRC_FILES}
)
set( ${PROJECT_NAME}_HDR_FILES
	${${PROJECT_NAME}_HDR_FILES}
	${${PROJECT_NAME}_FOLDER_HDR_FILES}
)
source_group( "Header Files\\Utils" FILES ${${PROJECT_NAME}_FOLDER_HDR_FILES} )
source_group( "Source Files\\Utils" FILES ${${PROJECT_NAME}_FOLDER_SRC_FILES} )

add_target_min(
	${PROJECT_NAME}
	lib
)
add_library( elypse::General
	ALIAS
	${PROJECT_NAME}
)
target_compile_definitions( ${PROJECT_NAME}
	PUBLIC
		UNICODE
		_UNICODE
		${MSVC_DEFINITIONS}
)
target_include_directories( ${PROJECT_NAME}
	PUBLIC
		$<BUILD_INTERFACE:${CMAKE_CURRENT_INCLUDE_DIR}>
		$<INSTALL_INTERFACE:include>
		${Boost_INCLUDE_DIR}
	PRIVATE
		${CMAKE_CURRENT_SOURCE_DIR}/Win32
)
target_link_libraries( ${PROJECT_NAME}
	PUBLIC
		${Boost_LIBRARIES}
		libzip::zip
		ZLIB::ZLIB
		CURL::libcurl
)

target_install_headers( ${PROJECT_NAME} ${CMAKE_CURRENT_INCLUDE_DIR} )
set_property( TARGET ${PROJECT_NAME} PROPERTY FOLDER "Core" )
add_target_astyle( ${PROJECT_NAME} ".h;.hpp;.inl;.cpp" )
target_add_doc( ${PROJECT_NAME} "" "*.h *.hpp" )

set( Build "yes (version ${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_BUILD})" PARENT_SCOPE )
