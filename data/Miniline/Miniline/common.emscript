struct Player
{
	string Name;
	animation_group Anims;
	scene_node Node;
	int Sex;
	int Body;
	int Hair;
	int HairMaterial;
	int Skin;
	int Dress;
	int EyeMaterial;
	int Brow;
	int BrowMaterial;
	int Special01;	// Beard or EyeLash
	int Special02;	// Beard colour or Lipstick

	string BodyMesh;
	string HairMesh;
	string HairColour;
	string BrowMesh;
	string BrowColour;
	string DressMesh;
	string SkinMaterial;
	string EyeColour;
	string BeardMesh;
	string BeardColour;
	string EyeLashColour;
	string LipstickColour;
	
	string BodyName;
	string HairName;
	string HairColourName;
	string BrowName;
	string BrowColourName;
	string EyeColourName;
	string DressName;
	string SkinName;
	string BeardName;
	string BeardColourName;
	string EyeLashColourName;
	string LipstickColourName;
	
	object BodyObject;
	object LEyeObject;
	object REyeObject;
	object HairObject;
	object BeardObject;
	object BrowObject;
	object DressObject;
}

void PlayerCopy( Player pc_src, Player pc_dest)
{
	pc_dest.Name = pc_src.Name;
	pc_dest.Anims = pc_src.Anims;
	pc_dest.Node = pc_src.Node;
	pc_dest.Sex = pc_src.Sex;
	pc_dest.Body = pc_src.Body;
	pc_dest.Hair = pc_src.Hair;
	pc_dest.HairMaterial = pc_src.HairMaterial;
	pc_dest.Skin = pc_src.Skin;
	pc_dest.Dress = pc_src.Dress;
	pc_dest.EyeMaterial = pc_src.EyeMaterial;
	pc_dest.Brow = pc_src.Brow;
	pc_dest.BrowMaterial = pc_src.BrowMaterial;
	pc_dest.Special01 = pc_src.Special01;
	pc_dest.Special02 = pc_src.Special02;

	pc_dest.BodyMesh = pc_src.BodyMesh;
	pc_dest.HairMesh = pc_src.HairMesh;
	pc_dest.HairColour = pc_src.HairColour;
	pc_dest.BrowMesh = pc_src.BrowMesh;
	pc_dest.BrowColour = pc_src.BrowColour;
	pc_dest.DressMesh = pc_src.DressMesh;
	pc_dest.SkinMaterial = pc_src.SkinMaterial;
	pc_dest.EyeColour = pc_src.EyeColour;
	pc_dest.BeardMesh = pc_src.BeardMesh;
	pc_dest.BeardColour = pc_src.BeardColour;
	pc_dest.EyeLashColour = pc_src.EyeLashColour;
	pc_dest.LipstickColour = pc_src.LipstickColour;

	pc_dest.BodyName = pc_src.BodyName;
	pc_dest.HairName = pc_src.HairName;
	pc_dest.HairColourName = pc_src.HairColourName;
	pc_dest.BrowName = pc_src.BrowName;
	pc_dest.BrowColourName = pc_src.BrowColourName;
	pc_dest.EyeColourName = pc_src.EyeColourName;
	pc_dest.DressName = pc_src.DressName;
	pc_dest.SkinName = pc_src.SkinName;
	pc_dest.BeardName = pc_src.BeardName;
	pc_dest.BeardColourName = pc_src.BeardColourName;
	pc_dest.EyeLashColourName = pc_src.EyeLashColourName;
	pc_dest.LipstickColourName = pc_src.LipstickColourName;

	pc_dest.BodyObject = pc_src.BodyObject;
	pc_dest.LEyeObject = pc_src.LEyeObject;
	pc_dest.REyeObject = pc_src.REyeObject;
	pc_dest.HairObject = pc_src.HairObject;
	pc_dest.BeardObject = pc_src.BeardObject;
	pc_dest.BrowObject = pc_src.BrowObject;
	pc_dest.DressObject = pc_src.DressObject;
}

typedef array <string> StringArray;

struct MainPlayer
{
	Player Character;
	physics_object BodyPhys;
	quaternion Orientation;
	vector3 Position;
	vector3 PreviousUnCollPosition;
	quaternion PreviousUnCollOrientation;
	vector3 Direction;
	vector3 Speed;
	real BaseAngle;
	real CurrentYaw;
	real LastSentYaw;
	real WalkSpeed;
	real RunSpeed;
	bool TurningLeft;
	bool TurningRight;
	bool Walking;
	bool Running;
	bool Backward;
	bool Sitting;
	bool Sat;
	bool SittingOnFloor;
	bool SatOnFloor;
	bool Talking;
}

struct SectionMeshes
{
	StringArray Meshes;
	StringArray Names;
}

Player g_currentChar;
MainPlayer g_mainChar;

SectionMeshes g_manBodies;
SectionMeshes g_womanBodies;

SectionMeshes g_manHairs;
SectionMeshes g_womanHairs;

SectionMeshes g_manHairsMaterials;
SectionMeshes g_womanHairsMaterials;

SectionMeshes g_manDresses;
SectionMeshes g_womanDresses;

SectionMeshes g_manBrows;
SectionMeshes g_womanBrows;

SectionMeshes g_manEyesMaterials;
SectionMeshes g_womanEyesMaterials;

SectionMeshes g_manSkins;
SectionMeshes g_womanSkins;

SectionMeshes g_manBeards;

SectionMeshes g_womanEyeLashes;
SectionMeshes g_womanLipsticks;

bool g_mouseLeftDown;
bool g_fucked;
bool g_inGame;

camera g_rootCamera;
vector3 g_cameraPosition;
real g_currentPitch;
real g_previousPitch;
real g_minPitch;
real g_maxPitch;
real g_currentZoom;

int i;

StringArray g_portals;
StringArray g_angleGrounds;
StringArray g_flatGrounds;
StringArray g_notGrounds;
int g_groundCollisionsNumber;
bool g_collides;
bool g_collidesWithPortals;
bool g_collidesWithGrounds;
bool g_collidesWithFlatGrounds;
bool g_collidesWithAngleGrounds;
bool g_collidesWithElseThanGrounds;
string g_currentZone;
string_map <Player> g_distantChars;
StringArray  g_distantCharsNames;
real l_timeSinceLastFrame;

string common_selectedMesh;
string common_selectedName;
string common_selectedMaterial;
bool common_boolResult;


bool chat_showFriendsList;
bool rs_showRoomsList;
bool chat_showEmotes;
bool chat_showMenu;

int msAvatar;
int msJoin;
int msQuit;
int msUpdateRooms;
int msUpdate;
int msWalk;
int msTurn;
int msTalk;
int msWhisp;
int msBeginWalk;
int msEndWalk;
int msEmote;
int msRemoveFriend;
int msRemoveIgnored;
int msUpdateFriendsList;
int msUpdateIgnoredList;
int msNewFriend;
int msNewIgnored;
int msNewFriendAccept;
int msNewFriendRefuse;
int msBeginRun;
int msEndRun;
int msSitDown;
int msSitUp;

int mrJoin;
int mrQuit;
int mrAvatar;
int mrRooms;
int mrUpdate;
int mrWalk;
int mrTurn;
int mrWhisp;
int mrWhispOK;
int mrWhispFail;
int mrBeginWalk;
int mrEndWalk;
int mrEmote;
int mrNewFriendDoesntExist;
int mrNewFriendAlreadyFriend;
int mrNewFriendAsk;
int mrNewIgnoredDoesntExist;
int mrNewIgnoredAlreadyIgnored;
int mrNewIgnoredDone;
int mrUpdateFriendsList;
int mrUpdateIgnoredList;
int mrNewFriendRefuse;
int mrNewFriendAccept;
int mrTalk;
int mrKickUser;
int mrBeginRun;
int mrEndRun;
int mrSitDown;
int mrSitUp;

real g_xMouseModifier;
real g_yMouseModifier;

vector3 g_currentCameraPos;
vector3 g_wantedCameraPos;
vector3 g_previousCameraPos;

string l_message;
string chat_displayedMessage;

void CameraZoomIn()
{
	g_currentZoom = g_currentZoom * 0.9;
	if (g_currentZoom > 3000.0)
	{
		g_currentZoom = 3000.0;
	}
	g_rootCamera->SetPosition( SetVector3( 0.0, 0.0, g_currentZoom));
	g_rootCamera->Clamp( "default_static", g_currentZoom);
}

void CameraZoomOut()
{
	g_currentZoom = g_currentZoom * 1.1;
	if (g_currentZoom > 3000.0)
	{
		g_currentZoom = 3000.0;
	}
	g_rootCamera->SetPosition( SetVector3( 0.0, 0.0, g_currentZoom));
	g_rootCamera->Clamp( "default_static", g_currentZoom);
}

void MoveCameraTo( real mcd_offset)
{
	vector3 mcd_beginOffset;
	vector3 mcd_currentOffset;
	vector3 mcd_endOffset;
	mcd_currentOffset = g_rootCamera->GetPosition();
	mcd_endOffset = SetVector3( 0.0, mcd_offset, mcd_currentOffset[2]);
	mcd_beginOffset = SetVector3( 0.0, mcd_currentOffset[1], mcd_currentOffset[2]);
	Timer_Kill( "MoveCameraDown");
	timer( "MoveCameraDown", TIMERTYPE_CONTINUOUS, 2.0)
	{
		mcd_currentOffset = V3_LinearInterpolation( mcd_beginOffset, mcd_endOffset, CURRENTTIMER_TIME_LEFT / 2.0);
		g_rootCamera->SetPosition( mcd_currentOffset);
	}
}

string l_pickedOverlayName;

void MouseLDown()
{
	g_mouseLeftDown = true;
	l_pickedOverlayName = OverlayElement_MousePickup( MOUSE_POSITION_X, MOUSE_POSITION_Y)->GetName();
	if (l_pickedOverlayName != "Chat/EmotesMenu" && l_pickedOverlayName != "Chat/FriendsIgnoredList" && l_pickedOverlayName != "Chat/Menu" && l_pickedOverlayName != "RoomsList")
	{
		Overlay_Hide( "Chat/EmotesMenu");
		Overlay_Hide( "Chat/FriendsIgnoredList");
		Overlay_Hide( "Chat/Menu");
		Overlay_Hide( "RoomsList");
		OverlayElement_GetByName( "Chat/Toolbar/Friends")->SetMaterial( "Chat/Friends");
		OverlayElement_GetByName( "Chat/Toolbar/Rooms")->SetMaterial( "Chat/Rooms");
		OverlayElement_GetByName( "Chat/Toolbar/Menu")->SetMaterial( "Chat/BtnMenu");
		OverlayElement_GetByName( "Chat/Toolbar/Emotes")->SetMaterial( "Chat/Emotes");
		chat_showFriendsList = false;
		rs_showRoomsList = false;
		chat_showEmotes = false;
		chat_showMenu = false;
	}
}

void MouseLUp()
{
	g_mouseLeftDown = false;
	Timer_Kill( "ElevatorScroll");
	Timer_Kill( "SoundChangeVolume");
	Timer_Kill( "MusicChangeVolume");
}

void InitialiseCamera()
{
	g_previousPitch = 0.0;
	g_currentPitch = 0.0;
	g_rootCamera = Camera_GetByName( "RootCamera");
	string ic_distantChars;
	string ic_charName;
	timer( "MouseLeftDown", TIMERTYPE_PERMANENT, 0.0)
	{
		if (g_mouseLeftDown)
		{
			g_rootCamera->GetParent()->Yaw( 150.0 * g_xMouseModifier * MOUSE_DIFFERENCE_X / GENERAL_SCREEN_HEIGHT);
			g_currentPitch = g_previousPitch + (150.0 * g_yMouseModifier * MOUSE_DIFFERENCE_Y / GENERAL_SCREEN_WIDTH);
			if (g_currentPitch < g_minPitch)
			{
				g_currentPitch = g_minPitch;
			}
			elseif (g_currentPitch > g_maxPitch)
			{
				g_currentPitch = g_maxPitch;
			}

			g_rootCamera->GetParent()->Pitch( g_currentPitch - g_previousPitch);
			g_previousPitch = g_currentPitch;
		}
	}
	g_currentZoom = 1500.0;
}

void BuildSectionAnimations( animation_group ba_persoAnims, animated_object ba_object)
{
//	Echo( "BuildSectionAnimations - Begin");
	ba_persoAnims->StopAllAnimations();
	ba_persoAnims->StopAllAnimations();
	ba_object->GetAnimation( "stand2")->SetLooped( true);
	ba_persoAnims->SetAnimationTimeOut( "stand2", 0.3);
	ba_object->GetAnimation( "sit")->SetLooped( true);
	ba_persoAnims->SetAnimationTimeIn( "sitdown", 0.3);
	ba_persoAnims->SetAnimationTimeOut( "sit", 0.3);
	ba_persoAnims->SetAnimationTimeIn( "situp", 0.3);
	ba_object->GetAnimation( "Marche")->SetLooped( true);
	ba_persoAnims->SetAnimationTimeIn( "Marche", 0.3);
	ba_persoAnims->SetAnimationTimeOut( "Marche", 0.3);
	ba_object->GetAnimation( "run")->SetLooped( true);
	ba_persoAnims->SetAnimationTimeIn( "run", 0.3);
	ba_persoAnims->SetAnimationTimeOut( "run", 0.3);
	ba_persoAnims->ChainAnimation( "parle", "stand2");
	ba_persoAnims->ChainAnimation( "oui", "stand2");
	ba_persoAnims->ChainAnimation( "non", "stand2");
	ba_persoAnims->ChainAnimation( "coucou", "stand2");
	ba_persoAnims->ChainAnimation( "rire", "stand2");
	ba_persoAnims->ChainAnimation( "pleure", "stand2");
	ba_persoAnims->ChainAnimation( "bisou", "stand2");
	ba_persoAnims->ChainAnimation( "etonnement", "stand2");
	ba_persoAnims->ChainAnimation( "colere", "stand2");
	ba_persoAnims->ChainAnimation( "stand", "stand2");
	ba_persoAnims->ChainAnimation( "sitdown", "sit");
	ba_persoAnims->ChainAnimation( "situp", "stand2");
	ba_persoAnims->StartAnimation( "stand2");
//	Echo( "BuildSectionAnimations - End");
}

void GetMeshAndName( int gman_index, SectionMeshes gman_meshes)
{
	if (gman_index >= 0 && gman_index < gman_meshes.Meshes->Size())
	{
		common_selectedMesh = (gman_meshes.Meshes)[gman_index];
		common_selectedName = (gman_meshes.Names)[gman_index];
	}
}

void GetMaterialAndName( int gmaan_index, SectionMeshes gmaan_materials)
{
	if (gmaan_index >= 0 && gmaan_index < gmaan_materials.Meshes->Size())
	{
		common_selectedMaterial = (gmaan_materials.Meshes)[gmaan_index];
		common_selectedName = (gmaan_materials.Names)[gmaan_index];
	}
}

void LoadManBody( int lmb_bodyIndex)
{
//	Echo( "LoadManBody - Begin");
	GetMeshAndName( lmb_bodyIndex, g_manBodies);
	g_currentChar.BodyMesh = common_selectedMesh;
	g_currentChar.BodyName = common_selectedName;

	g_currentChar.BodyObject = Object_Create( g_currentChar.Name + "_Body", g_currentChar.BodyMesh);
	g_currentChar.BodyObject->SetParent( g_currentChar.Node);
	g_currentChar.Anims->AddObject( g_currentChar.BodyObject);
	BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.BodyObject->GetName()));

	g_currentChar.LEyeObject = Object_Create( g_currentChar.Name + "_LEye", "oeilg.mesh");
	g_currentChar.LEyeObject->SetParent( g_currentChar.Node);
	g_currentChar.Anims->AddObject( g_currentChar.LEyeObject);
	BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.LEyeObject->GetName()));

	g_currentChar.REyeObject = Object_Create( g_currentChar.Name + "_REye", "oeild.mesh");
	g_currentChar.REyeObject->SetParent( g_currentChar.Node);
	g_currentChar.Anims->AddObject( g_currentChar.REyeObject);
	BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.REyeObject->GetName()));
//	Echo( "LoadManBody - End");
}

void LoadWomanBody( int lwb_bodyIndex)
{
//	Echo( "LoadWomanBody - Begin");
	GetMeshAndName( lwb_bodyIndex, g_womanBodies);
	g_currentChar.BodyMesh = common_selectedMesh;
	g_currentChar.BodyName = common_selectedName;

	g_currentChar.BodyObject = Object_Create( g_currentChar.Name + "_Body", g_currentChar.BodyMesh);
	g_currentChar.BodyObject->SetParent( g_currentChar.Node);
	g_currentChar.Anims->AddObject( g_currentChar.BodyObject);
	BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.BodyObject->GetName()));

	g_currentChar.LEyeObject = Object_Create( g_currentChar.Name + "_LEye", "oeilggirl.mesh");
	g_currentChar.LEyeObject->SetParent( g_currentChar.Node);
	g_currentChar.Anims->AddObject( g_currentChar.LEyeObject);
	BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.LEyeObject->GetName()));

	g_currentChar.REyeObject = Object_Create( g_currentChar.Name + "_REye", "oeildgirl.mesh");
	g_currentChar.REyeObject->SetParent( g_currentChar.Node);
	g_currentChar.Anims->AddObject( g_currentChar.REyeObject);
	BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.REyeObject->GetName()));
//	Echo( "LoadWomanBody - End");
}

void LoadCharHair()
{
	g_currentChar.HairObject = Object_Create( g_currentChar.Name + "_Hair", g_currentChar.HairMesh);
	g_currentChar.HairObject->SetParent( g_currentChar.Node);
	g_currentChar.Anims->AddObject( g_currentChar.HairObject);

	for (i = 0 ; i < g_currentChar.HairObject->GetNumSubMaterials() ; i++)
	{
		if (g_currentChar.HairObject->GetSubMaterialName( i)->find( "peau") != npos)
		{
			g_currentChar.HairObject->SetSubMaterial( i, g_currentChar.SkinMaterial);
		}

		if (g_currentChar.HairObject->GetSubMaterialName( i)->find( "cheveux") != npos)
		{
			g_currentChar.HairObject->SetSubMaterial( i, g_currentChar.HairColour);
		}
	}

	BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.HairObject->GetName()));
}

void LoadManHair( int lmr_hairIndex)
{
//	Echo( "LoadManHair - Begin");
	GetMeshAndName( lmr_hairIndex, g_manHairs);
	g_currentChar.HairMesh = common_selectedMesh;
	g_currentChar.HairName = common_selectedName;
	LoadCharHair();
//	Echo( "LoadManHair - End");
}

void LoadWomanHair( int lwr_hairIndex)
{
//	Echo( "LoadWomanHair - Begin");
	GetMeshAndName( lwr_hairIndex, g_womanHairs);
	g_currentChar.HairMesh = common_selectedMesh;
	g_currentChar.HairName = common_selectedName;
	LoadCharHair();
//	Echo( "LoadWomanHair - End");
}

void LoadCharHairColour()
{
	if (g_currentChar.HairObject != NULL)
	{
		for (i = 0 ; i < g_currentChar.HairObject->GetNumSubMaterials() ; i++)
		{
			if (g_currentChar.HairObject->GetSubMaterialName( i)->find( "cheveux") != npos)
			{
				g_currentChar.HairObject->SetSubMaterial( i, common_selectedMaterial);
			}
		}
	}
}

void LoadManHairColour( int lmrc_hairColourIndex)
{
//	Echo( "LoadManHairColour - Begin");
	GetMaterialAndName( lmrc_hairColourIndex, g_manHairsMaterials);
	g_currentChar.HairColourName = common_selectedName;
	g_currentChar.HairColour = common_selectedMaterial;
	LoadCharHairColour();
//	Echo( "LoadManHairColour - End");
}

void LoadWomanHairColour( int lwrc_hairColourIndex)
{
//	Echo( "LoadWomanHairColour - Begin");
	GetMaterialAndName( lwrc_hairColourIndex, g_womanHairsMaterials);
	g_currentChar.HairColourName = common_selectedName;
	g_currentChar.HairColour = common_selectedMaterial;
	LoadCharHairColour();
//	Echo( "LoadWomanHairColour - End");
}

void LoadManBeard( int lmbd_beardIndex)
{
//	Echo( "LoadManBeard - Begin");
	GetMeshAndName( lmbd_beardIndex, g_manBeards);
	g_currentChar.BeardMesh = common_selectedMesh;
	g_currentChar.BeardName = common_selectedName;
//	Echo( "LoadManBeard - Mesh : " + common_selectedMesh + " - Name : " + common_selectedName);

	if (common_selectedMesh != "none")
	{
		g_currentChar.BeardObject = Object_Create( g_currentChar.Name + "_Beard", g_currentChar.BeardMesh);
		g_currentChar.BeardObject->SetParent( g_currentChar.Node);
		g_currentChar.Anims->AddObject( g_currentChar.BeardObject);
	
		for (i = 0 ; i < g_currentChar.BeardObject->GetNumSubMaterials() ; i++)
		{
			if (g_currentChar.BeardObject->GetSubMaterialName( i)->find( "cheveux") != npos)
			{
				g_currentChar.BeardObject->SetMaterial( g_currentChar.BeardColour);
			}
		}
	
		BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.BeardObject->GetName()));
	}
	else
	{
		g_currentChar.BeardObject = NULL;
	}
//	Echo( "LoadManBeard - End");
}

void LoadManBeardColour( int lmbc_beardColourIndex)
{
//	Echo( "LoadManBeardColour - Begin");
	GetMaterialAndName( lmbc_beardColourIndex, g_manHairsMaterials);
	g_currentChar.BeardColourName = common_selectedName;
	g_currentChar.BeardColour = common_selectedMaterial;
	if (g_currentChar.BeardObject != NULL)
	{
		g_currentChar.BeardObject->SetMaterial( common_selectedMaterial);
	}
//	Echo( "LoadManBeardColour - End");
}

void LoadCharBrow()
{
	if (common_selectedMesh != "none")
	{
		g_currentChar.BrowObject = Object_Create( g_currentChar.Name + "_Brow", g_currentChar.BrowMesh);
		g_currentChar.BrowObject->SetParent( g_currentChar.Node);
		g_currentChar.Anims->AddObject( g_currentChar.BrowObject);

		g_currentChar.BrowObject->SetMaterial( g_currentChar.BrowColour);

		for (i = 0 ; i < g_currentChar.BrowObject->GetNumSubMaterials() ; i++)
		{
			if (g_currentChar.BrowObject->GetSubMaterialName( i)->find( "cheveux") != npos)
			{
				g_currentChar.BrowObject->SetSubMaterial( i, g_currentChar.BrowColour);
			}
		}
	
		BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.BrowObject->GetName()));
	}
	else
	{
		g_currentChar.BrowObject = NULL;
	}
}

void LoadManBrow( int lmbw_browIndex)
{
//	Echo( "LoadManBrow - Begin");
	GetMeshAndName( lmbw_browIndex, g_manBrows);
	g_currentChar.BrowMesh = common_selectedMesh;
	g_currentChar.BrowName = common_selectedName;
	LoadCharBrow();
//	Echo( "LoadManBrow - End");
}

void LoadWomanBrow( int lwbw_browIndex)
{
//	Echo( "LoadWomanBrow - Begin");
	GetMeshAndName( lwbw_browIndex, g_womanBrows);
	g_currentChar.BrowMesh = common_selectedMesh;
	g_currentChar.BrowName = common_selectedName;
	LoadCharBrow();
//	Echo( "LoadWomanBrow - End");
}

void LoadManBrowColour( int lmbwc_browColourIndex)
{
//	Echo( "LoadManBrowColour - Begin");
	GetMaterialAndName( lmbwc_browColourIndex, g_manHairsMaterials);
	g_currentChar.BrowColourName = common_selectedName;
	g_currentChar.BrowColour = common_selectedMaterial;
	if (g_currentChar.BrowObject != NULL)
	{
		g_currentChar.BrowObject->SetMaterial( common_selectedMaterial);
	}
//	Echo( "LoadManBrowColour - End");
}

void LoadWomanBrowColour( int lwbwc_browColourIndex)
{
//	Echo( "LoadWomanBrowColour - Begin");
	GetMaterialAndName( lwbwc_browColourIndex, g_womanHairsMaterials);
	g_currentChar.BrowColourName = common_selectedName;
	g_currentChar.BrowColour = common_selectedMaterial;
	if (g_currentChar.BrowObject != NULL)
	{
		g_currentChar.BrowObject->SetMaterial( common_selectedMaterial);
	}
//	Echo( "LoadWomanBrowColour - End");
}

void LoadManEyeColour( int lmec_eyeColourIndex)
{
//	Echo( "LoadManEyeColour - Begin");
	GetMaterialAndName( lmec_eyeColourIndex, g_manEyesMaterials);
	g_currentChar.EyeColourName = common_selectedName;
	g_currentChar.EyeColour = common_selectedMaterial;
	g_currentChar.LEyeObject->SetSubMaterial( 1, common_selectedMaterial);
	g_currentChar.REyeObject->SetSubMaterial( 1, common_selectedMaterial);
//	Echo( "LoadManEyeColour - End");
}

void LoadWomanEyeColour( int lwec_eyeColourIndex)
{
//	Echo( "LoadWomanEyeColour - Begin");
	GetMaterialAndName( lwec_eyeColourIndex, g_womanEyesMaterials);
	g_currentChar.EyeColourName = common_selectedName;
	g_currentChar.EyeColour = common_selectedMaterial;
	g_currentChar.LEyeObject->SetSubMaterial( 1, common_selectedMaterial);
	g_currentChar.REyeObject->SetSubMaterial( 1, common_selectedMaterial);
//	Echo( "LoadWomanEyeColour - End");
}

void LoadCharDress()
{
	if (common_selectedMesh != "none")
	{
		g_currentChar.DressObject = Object_Create( g_currentChar.Name + "_Dress", g_currentChar.DressMesh);
		g_currentChar.DressObject->SetParent( g_currentChar.Node);
		g_currentChar.Anims->AddObject( g_currentChar.DressObject);
		BuildSectionAnimations( g_currentChar.Anims, g_currentChar.Anims->GetObject( g_currentChar.DressObject->GetName()));

		for (i = 0 ; i < g_currentChar.DressObject->GetNumSubMaterials() ; i++)
		{
			if (g_currentChar.DressObject->GetSubMaterialName( i)->find( "peau") != npos)
			{
				g_currentChar.DressObject->SetSubMaterial( i, common_selectedMaterial);
			}
		}
	}
	else
	{
		g_currentChar.DressObject = NULL;
	}
}

void LoadManDress( int lmd_dressIndex)
{
//	Echo( "LoadManDress - Begin");
	GetMeshAndName( lmd_dressIndex, g_manDresses);
	g_currentChar.DressMesh = common_selectedMesh;
	g_currentChar.DressName = common_selectedName;
	LoadCharDress();
//	Echo( "LoadManDress - End");
}

void LoadWomanDress( int lwd_dressIndex)
{
//	Echo( "LoadWomanDress - Begin");
	GetMeshAndName( lwd_dressIndex, g_womanDresses);
	g_currentChar.DressMesh = common_selectedMesh;
	g_currentChar.DressName = common_selectedName;
	LoadCharDress();
//	Echo( "LoadWomanDress - End");
}

void LoadCharSkin()
{
	if (Material_Exists( g_currentChar.SkinMaterial))
	{
		Material_Destroy( g_currentChar.SkinMaterial);
	}

	Material_CreateCopy( common_selectedMaterial, g_currentChar.SkinMaterial);

	for (i = 0 ; i < g_currentChar.BodyObject->GetNumSubMaterials() ; i++)
	{
		if (g_currentChar.BodyObject->GetSubMaterialName( i)->find( "peau") != npos)
		{
			g_currentChar.BodyObject->SetSubMaterial( i, g_currentChar.SkinMaterial);
		}
	}

	for (i = 0 ; i < g_currentChar.HairObject->GetNumSubMaterials() ; i++)
	{
		if (g_currentChar.HairObject->GetSubMaterialName( i)->find( "peau") != npos)
		{
			g_currentChar.HairObject->SetSubMaterial( i, g_currentChar.SkinMaterial);
		}
	}

	if (g_currentChar.DressObject != NULL)
	{
		for (i = 0 ; i < g_currentChar.DressObject->GetNumSubMaterials() ; i++)
		{
			if (g_currentChar.DressObject->GetSubMaterialName( i)->find( "peau") != npos)
			{
				g_currentChar.DressObject->SetSubMaterial( i, g_currentChar.SkinMaterial);
			}
		}
	}
}

void LoadManSkin( int lms_skinIndex)
{
//	Echo( "LoadManSkin - Begin");
	GetMaterialAndName( lms_skinIndex, g_manSkins);
	g_currentChar.SkinName = common_selectedName;
	g_currentChar.SkinMaterial = common_selectedMaterial + "/" + g_currentChar.Name;
	LoadCharSkin();
//	Echo( "LoadManSkin - End");
}

void LoadWomanSkin( int lws_skinIndex)
{
//	Echo( "LoadWomanSkin - Begin");
	GetMaterialAndName( lws_skinIndex, g_womanSkins);
	g_currentChar.SkinName = common_selectedName;
	g_currentChar.SkinMaterial = common_selectedMaterial + "/" + g_currentChar.Name;
	LoadCharSkin();
//	Echo( "LoadWomanSkin - End");
}

void LoadWomanEyeLash( int lwel_index)
{
//	Echo( "LoadWomanEyeLash - Begin");
	GetMaterialAndName( lwel_index, g_womanEyeLashes);
	g_currentChar.EyeLashColourName = common_selectedName;
	g_currentChar.EyeLashColour = common_selectedMaterial;
	if (Material_Exists( g_currentChar.SkinMaterial))
	{
		if (lwel_index == 0)
		{
			g_currentChar.EyeLashColour = "yeux" + Material_GetByName( g_currentChar.SkinMaterial)->GetImageName( 0);
		}
		Material_GetByName( g_currentChar.SkinMaterial)->ChangeImage( 1, g_currentChar.EyeLashColour);
	}
//	Echo( "LoadWomanEyeLash - End");
}

void LoadWomanLipstick( int lwls_index)
{
//	Echo( "LoadWomanLipstick - Begin");
	GetMaterialAndName( lwls_index, g_womanLipsticks);
	g_currentChar.LipstickColourName = common_selectedName;
	g_currentChar.LipstickColour = common_selectedMaterial;
	if (Material_Exists( g_currentChar.SkinMaterial))
	{
		if (lwls_index == 0)
		{
			g_currentChar.LipstickColour = "levre" + Material_GetByName( g_currentChar.SkinMaterial)->GetImageName( 0);
		}
		Material_GetByName( g_currentChar.SkinMaterial)->ChangeImage( 2, g_currentChar.LipstickColour);
	}
//	Echo( "LoadWomanLipstick - End");
}

void LoadCharacter()
{
	if ( ! AnimationGroup_Exists( g_currentChar.Name + "Anims"))
	{
		g_currentChar.Anims = AnimationGroup_Create( g_currentChar.Name + "Anims");
	}
	else
	{
		g_currentChar.Anims = AnimationGroup_GetByName( g_currentChar.Name + "Anims");
	}

	if (g_currentChar.Sex == 0)
	{
		LoadManBody( g_currentChar.Body);
		LoadManHair( g_currentChar.Hair);
		LoadManBeard( g_currentChar.Special01);
		LoadManBrow( g_currentChar.Brow);
		LoadManDress( g_currentChar.Dress);
		LoadManEyeColour( g_currentChar.EyeMaterial);
		LoadManHairColour( g_currentChar.HairMaterial);
		LoadManBeardColour( g_currentChar.Special02);
		LoadManBrowColour( g_currentChar.BrowMaterial);
		LoadManSkin( g_currentChar.Skin);
	}
	else
	{
		LoadWomanBody( g_currentChar.Body);
		LoadWomanHair( g_currentChar.Hair);
		LoadWomanDress( g_currentChar.Dress);
		LoadWomanBrow( g_currentChar.Brow);
		LoadWomanEyeColour( g_currentChar.EyeMaterial);
		LoadWomanHairColour( g_currentChar.HairMaterial);
		LoadWomanBrowColour( g_currentChar.BrowMaterial);
		LoadWomanEyeLash( g_currentChar.Special01));
		LoadWomanLipstick( g_currentChar.Special02));
		LoadWomanSkin( g_currentChar.Skin);
	}
}

void RemoveCharacter( string rc_charName)
{
	if ( ! rc_charName->empty())
	{
		animation_group rc_anims;
		rc_anims = AnimationGroup_GetByName( rc_charName + "Anims");
		rc_anims->StopAllAnimations();
		AnimationGroup_Destroy( rc_charName + "Anims");
		Object_Destroy( Object_GetByName( rc_charName + "_Body"));
		Object_Destroy( Object_GetByName( rc_charName + "_LEye"));
		Object_Destroy( Object_GetByName( rc_charName + "_REye"));
		Object_Destroy( Object_GetByName( rc_charName + "_Hair"));
		Object_Destroy( Object_GetByName( rc_charName + "_Dress"));
		Object_Destroy( Object_GetByName( rc_charName + "_Beard"));
		Object_Destroy( Object_GetByName( rc_charName + "_Brow"));
		Timer_Kill( "Update_" + rc_charName + "_BullePosition");
		Timer_Kill( "Update_" + rc_charName + "_NamePosition");
		OverlayElement_Destroy( "Chat/Bulles/" + rc_charName);
		OverlayElement_Destroy( "Chat/Names/" + rc_charName);

		if (SceneNode_Exists( rc_charName))
		{
			SceneNode_GetByName( rc_charName + "_Node")->Hide();
		}
		g_distantChars->Erase( rc_charName);
	}
}

void RemoveAllChars()
{
	for (i = 0 ; i < g_distantCharsNames->Size() ; i++)
	{
		if (g_distantChars->Has( g_distantCharsNames[i]))
		{
			RemoveCharacter( g_distantCharsNames[i]);
		}
	}
	g_distantCharsNames->Clear();
	g_distantChars->Clear();
}

void ChangeZone( string cz_nextZone)
{
	if (cz_nextZone != g_currentZone)
	{
		l_message->clear();
		chat_displayedMessage->clear();
		Network_ClientSendMessage( "ChatClient", pack_int( msQuit));
		g_inGame = false;
		g_fucked = true;
		Timer_Kill( "MouseLeftDown");
		Timer_Kill( "MoveLight");

		g_mainChar.Character.Anims->StopAllAnimations();
		g_mainChar.Character.Anims = NULL;
		AnimationGroup_Destroy( g_mainChar.Character.Name + "Anims");
		RemoveAllChars();

		g_mainChar.BodyPhys = NULL;
		Simulation_ClearObjects( "Main");
		g_mainChar.BodyPhys = PhysicsObject_GetByName( g_mainChar.Character.Name + "_Body");
		if (g_mainChar.BodyPhys != NULL)
		{
			Echo( "Physics Not Cleared");
		};

		ClearOverlays();
		ClearScene();
		Scene_Unload( g_currentZone);
		Scene_Load( cz_nextZone);
		Overlay_Hide( "Chat/MessageBox");

		Network_ClientSendMessage( "ChatClient", pack_int( msJoin) + pack_int( cz_nextZone->length()) + cz_nextZone);

		g_currentZone = cz_nextZone;
		g_fucked = false;
	}
	else
	{
		OverlayElement_GetByName( "Chat/Toolbar/Rooms")->SetMaterial( "Chat/Rooms");
	}
}

string ccw_name;
	
void CheckCollisionsWith( StringArray ccw_names, physics_object ccw_phys)
{
	physics_object ccw_physObject;
	g_collides = false;

	for (i = 0 ; i < (ccw_names->Size()) && ! g_collides ; i++)
	{
		ccw_name = (ccw_names[i]);
		ccw_physObject = PhysicsObject_GetByName( ccw_name);
		if (ccw_physObject != NULL)
		{
			g_collides = (ccw_phys->GetNumCollisionsWith( ccw_physObject, true) != 0);
		}
	}
}

void CollisionsWithGrounds()
{
	CheckCollisionsWith( g_flatGrounds, g_mainChar.BodyPhys);
	g_collidesWithFlatGrounds = g_collides;

	CheckCollisionsWith( g_angleGrounds, g_mainChar.BodyPhys);
	g_collidesWithAngleGrounds = g_collides;

	g_collidesWithGrounds = (g_collidesWithAngleGrounds || g_collidesWithFlatGrounds);

	real cwg_ySpeed;
	if (g_mainChar.Running)
	{
		cwg_ySpeed = 300.0;
	}
	else
	{
		cwg_ySpeed = 100.0;
	}

	if ( ! g_collidesWithGrounds)
	{
		if ((g_mainChar.Position)[1] > 5.0 && g_mainChar.Speed != VECTOR3_ZERO)
		{
			cwg_ySpeed = cwg_ySpeed * (-200.0);
			g_mainChar.Speed = SetVector3( (g_mainChar.Speed)[0], (g_mainChar.Speed)[1] + cwg_ySpeed, (g_mainChar.Speed)[2]);
		}
	}
	elseif (g_collidesWithAngleGrounds)
	{
		if (g_mainChar.Speed != VECTOR3_ZERO)
		{
			cwg_ySpeed = cwg_ySpeed * 200.0;
			g_mainChar.Speed = SetVector3( (g_mainChar.Speed)[0], (g_mainChar.Speed)[1] + cwg_ySpeed, (g_mainChar.Speed)[2]);
		}
	}
	elseif (g_collidesWithFlatGrounds)
	{
		g_mainChar.Speed = SetVector3( (g_mainChar.Speed)[0], 0.0, (g_mainChar.Speed)[2]);
	}
}

void CollisionsWithElseThanGrounds()
{
	CheckCollisionsWith( g_notGrounds, g_mainChar.BodyPhys);
	g_collidesWithElseThanGrounds = g_collides;

	if (g_collidesWithElseThanGrounds)
	{
		g_mainChar.Speed = VECTOR3_ZERO;
		g_mainChar.Character.Node->SetPosition( g_mainChar.PreviousUnCollPosition);
		g_mainChar.Character.Anims->StopAllAnimations();
		g_mainChar.Character.Anims->StartAnimation( "stand2");
		g_mainChar.Position = g_mainChar.PreviousUnCollPosition;
		Network_ClientSendMessage( "ChatClient", pack_int( msEndWalk) + pack_real( (g_mainChar.Position)[0]) + pack_real( (g_mainChar.Position)[1]) + pack_real( (g_mainChar.Position)[2]) + pack_int( btoi( g_mainChar.Backward)));
		g_mainChar.Walking = false;
		g_mainChar.Backward = false;
		g_mainChar.Running = false;
	}
	else
	{
		g_mainChar.PreviousUnCollPosition = g_mainChar.Position;
	}
}

void CollisionsWithPortals()
{
	CheckCollisionsWith( g_portals, g_mainChar.BodyPhys);
	g_collidesWithPortals = g_collides;

	if (g_collidesWithPortals)
	{
		ChangeZone( Portal_GetTargetZone( g_currentZone, ccw_name + "Portal"));
	}
}

void CorrectAngle()
{
	g_mainChar.Speed->Normalise();
	if (g_mainChar.Running)
	{
		g_mainChar.Speed = g_mainChar.Speed * g_mainChar.RunSpeed * l_timeSinceLastFrame;
	}
	else
	{
		g_mainChar.Speed = g_mainChar.Speed * g_mainChar.WalkSpeed * l_timeSinceLastFrame;
	}

	g_mainChar.Character.Node->Reset();
	g_mainChar.Character.Node->Yaw( g_mainChar.CurrentYaw);
	g_mainChar.Character.Node->SetPosition( g_mainChar.Character.Node->GetPosition() + g_mainChar.Speed);
}

void LoadMainCharacter()
{
	PlayerCopy( g_mainChar.Character, g_currentChar);
	g_mainChar.CurrentYaw = 180.0;

	LoadCharacter();
	PlayerCopy( g_currentChar, g_mainChar.Character);

	Simulation_SetCurrent( "Main");

	g_mainChar.BodyPhys = PhysicsObject_Create( g_mainChar.Character.BodyObject, false, false);
	g_mainChar.BodyPhys->AddBoudingSphere( 40.0, SetVector3( 0.0, 40.0, 0.0));

	real lmc_walkTime;
	real lmc_turnTime;
	real lmc_updateTime;

	timer( "CharUpdate", TIMERTYPE_REPEAT, 0.02)
	{
		if ( ! g_fucked)
		{
			g_mainChar.Position = g_mainChar.Character.Node->GetPosition();

			if ( ! g_mainChar.Sat && ! g_mainChar.Sitting)
			{
				if (g_mainChar.TurningLeft)
				{
					g_mainChar.CurrentYaw += (g_mainChar.BaseAngle * l_timeSinceLastFrame);
					g_mainChar.LastSentYaw += (g_mainChar.BaseAngle * l_timeSinceLastFrame);
					g_mainChar.Character.Node->Yaw( g_mainChar.BaseAngle * l_timeSinceLastFrame);
				}
				elseif (g_mainChar.TurningRight)
				{
					g_mainChar.CurrentYaw -= (g_mainChar.BaseAngle * l_timeSinceLastFrame);
					g_mainChar.LastSentYaw -= (g_mainChar.BaseAngle * l_timeSinceLastFrame);
					g_mainChar.Character.Node->Yaw( 0.0 - (g_mainChar.BaseAngle * l_timeSinceLastFrame));
				}
	
				if (g_mainChar.CurrentYaw >= 360.0)
				{
					g_mainChar.CurrentYaw -= 360.0;
				}
				elseif (g_mainChar.CurrentYaw <= -360.0)
				{
					g_mainChar.CurrentYaw += 360.0;
				}
			}
			else
			{
				g_mainChar.TurningLeft = false;
				g_mainChar.TurningRight = false;
			}

			l_timeSinceLastFrame = GENERAL_ELAPSED_TIME;
			lmc_updateTime += l_timeSinceLastFrame;
			lmc_walkTime += l_timeSinceLastFrame;
			lmc_turnTime += l_timeSinceLastFrame;

			g_mainChar.Direction = UNIT_Z * g_mainChar.Character.Node->GetOrientation();
			g_mainChar.BodyPhys->ReassertPosition();
			if (g_mainChar.Walking)
			{
				g_mainChar.Sat = false;
				g_mainChar.SatOnFloor = false;

				lmc_turnTime = 0.0;
				lmc_updateTime = 0.0;

				if (lmc_walkTime >= 0.25)
				{
					Network_ClientSendMessage( "ChatClient", pack_int( msWalk) + pack_real( (g_mainChar.Position)[0]) + pack_real( (g_mainChar.Position)[1]) + pack_real( (g_mainChar.Position)[2]) + pack_int( btoi( g_mainChar.Backward)) + pack_int( btoi( g_mainChar.Running)));
					g_mainChar.LastSentYaw = 0.0;
					lmc_walkTime = 0.0;
				}

				if ( ! g_mainChar.Backward)
				{
					if (g_mainChar.Running)
					{
						g_mainChar.Speed = g_mainChar.Direction * g_mainChar.RunSpeed * 100.0;
					}
					else
					{
						g_mainChar.Speed = g_mainChar.Direction * g_mainChar.WalkSpeed * 100.0;
					}
				}
				else
				{
					g_mainChar.Running = false;
					g_mainChar.Speed = g_mainChar.Direction * g_mainChar.WalkSpeed * (-100.0);
				}

				Simulation_Update();
				CollisionsWithGrounds();
				CollisionsWithElseThanGrounds();
				CollisionsWithPortals();
			}
			else
			{
				lmc_walkTime = 0.0;

				g_mainChar.Speed = VECTOR3_ZERO;
				if (g_mainChar.TurningLeft || g_mainChar.TurningRight)
				{
					lmc_updateTime = 0.0;
					if (lmc_turnTime >= 0.25)
					{
						Network_ClientSendMessage( "ChatClient", pack_int( msTurn) + pack_real( g_mainChar.LastSentYaw));
						g_mainChar.LastSentYaw = 0.0;
						lmc_turnTime = 0.0;
					}
				}
				else
				{
					lmc_turnTime = 0.0;

					if (lmc_updateTime >= 1.0)
					{
						Network_ClientSendMessage( "ChatClient", pack_int( msUpdate) + pack_real( (g_mainChar.Position)[0]) + pack_real( (g_mainChar.Position)[1]) + pack_real( (g_mainChar.Position)[2]) + pack_real( g_mainChar.CurrentYaw));
						lmc_updateTime = 0.0;
					}
				}
			}

			CorrectAngle();

			if (((g_mainChar.Position)[1]) < 0.0)
			{
				g_mainChar.Position = SetVector3( (g_mainChar.Position)[0], 1.0, (g_mainChar.Position)[2]);
				g_mainChar.Character.Node->SetPosition( g_mainChar.Position);
				g_mainChar.BodyPhys->ReassertPosition();
			}

			g_previousCameraPos = g_rootCamera->GetPosition();
			g_rootCamera->Clamp( "default_static", g_currentZoom);
			g_wantedCameraPos = g_rootCamera->GetPosition();
			g_currentCameraPos = g_previousCameraPos + ((g_wantedCameraPos - g_previousCameraPos) / 8.0);
			g_rootCamera->SetPosition( g_currentCameraPos);
		}
	}
}

void InitialiseManMeshes()
{
	g_manBodies.Meshes->Add( "corps.mesh");
	g_manBodies.Names->Add( "Normal");

	g_manHairs.Names->Add( "Normale");
	g_manHairs.Meshes->Add( "coiffe_coupe.mesh");
	g_manHairs.Names->Add( "Punk");
	g_manHairs.Meshes->Add( "coiffe_punk.mesh");
	g_manHairs.Names->Add( "Queue de cheval");
	g_manHairs.Meshes->Add( "coiffe_queuedechev.mesh");
	g_manHairs.Names->Add( "Mage");
	g_manHairs.Meshes->Add( "coiffe_mage.mesh");
	g_manHairs.Names->Add( "Casque Joe");
	g_manHairs.Meshes->Add( "coiffe_joe.mesh");
	g_manHairs.Names->Add( "Ecouteurs");
	g_manHairs.Meshes->Add( "coiffe_musique.mesh");
	g_manHairs.Names->Add( "Casque Romain");
	g_manHairs.Meshes->Add( "coiffe_romain.mesh");
	g_manHairs.Names->Add( "Casque Viking");
	g_manHairs.Meshes->Add( "coiffe_viking.mesh");
	g_manHairs.Names->Add( "Cowboy");
	g_manHairs.Meshes->Add( "coiffe_cowboy.mesh");
	g_manHairs.Names->Add( "Haut de forme");
	g_manHairs.Meshes->Add( "coiffe_hauteforme.mesh");
	g_manHairs.Names->Add( "Alien");
	g_manHairs.Meshes->Add( "coiffe_alien.mesh");
	g_manHairs.Names->Add( "Aluk");
	g_manHairs.Meshes->Add( "coiffe_aluc.mesh");
	g_manHairs.Names->Add( "Angelique");
	g_manHairs.Meshes->Add( "coiffe_ange.mesh");
	g_manHairs.Names->Add( "Batboy");
	g_manHairs.Meshes->Add( "coiffe_batman.mesh");
	g_manHairs.Names->Add( "Demoniaque");
	g_manHairs.Meshes->Add( "coiffe_demon.mesh");
	g_manHairs.Names->Add( "Drake");
	g_manHairs.Meshes->Add( "coiffe_drake.mesh");
	g_manHairs.Names->Add( "Elfique");
	g_manHairs.Meshes->Add( "coiffe_elfe.mesh");
	g_manHairs.Names->Add( "Loup-garou");
	g_manHairs.Meshes->Add( "coiffe_garou.mesh");
	g_manHairs.Names->Add( "Goku");
	g_manHairs.Meshes->Add( "coiffe_goku.mesh");
	g_manHairs.Names->Add( "Halloween");
	g_manHairs.Meshes->Add( "coiffe_haloween.mesh");
	g_manHairs.Names->Add( "Lunk");
	g_manHairs.Meshes->Add( "coiffe_lunk.mesh");
	g_manHairs.Names->Add( "Robot");
	g_manHairs.Meshes->Add( "coiffe_robot.mesh");
	g_manHairs.Names->Add( "Terminator");
	g_manHairs.Meshes->Add( "coiffe_termina.mesh");
	g_manHairs.Names->Add( "Ent");
	g_manHairs.Meshes->Add( "coiffe_trent.mesh");
	g_manHairs.Names->Add( "Vampire");
	g_manHairs.Meshes->Add( "coiffe_vampire.mesh");
	g_manHairs.Names->Add( "Ninja");
	g_manHairs.Meshes->Add( "coiffe_ninja.mesh");
	g_manHairs.Names->Add( "Casquette endroit");
	g_manHairs.Meshes->Add( "coiffe_casquettef.mesh");
	g_manHairs.Names->Add( "Casquette envers");
	g_manHairs.Meshes->Add( "coiffe_casquetteb.mesh");

	g_manHairsMaterials.Names->Add( "Blond");
	g_manHairsMaterials.Meshes->Add( "corpsminiboy/cheveux-blond");
	g_manHairsMaterials.Names->Add( "Noir");
	g_manHairsMaterials.Meshes->Add( "corpsminiboy/cheveux");
	g_manHairsMaterials.Names->Add( "Chatain");
	g_manHairsMaterials.Meshes->Add( "corpsminiboy/cheveux-chatain");
	g_manHairsMaterials.Names->Add( "Roux");
	g_manHairsMaterials.Meshes->Add( "corpsminiboy/cheveux-roux");
	g_manHairsMaterials.Names->Add( "Gris");
	g_manHairsMaterials.Meshes->Add( "corpsminiboy/cheveux-gris");
	g_manHairsMaterials.Names->Add( "Blanc");
	g_manHairsMaterials.Meshes->Add( "corpsminiboy/cheveux-blanc");

	g_manDresses.Names->Add( "Torse nu");
	g_manDresses.Meshes->Add( "none");
	g_manDresses.Names->Add( "Cache poussiere");
	g_manDresses.Meshes->Add( "tenue_cachepouss.mesh");
	g_manDresses.Names->Add( "Blouson");
	g_manDresses.Meshes->Add( "tenue_blouzon.mesh");
	g_manDresses.Names->Add( "Plastron romain");
	g_manDresses.Meshes->Add( "tenue_romain.mesh");
	g_manDresses.Names->Add( "Plastron viking");
	g_manDresses.Meshes->Add( "tenue_viking.mesh");
	g_manDresses.Names->Add( "Robe mage");
	g_manDresses.Meshes->Add( "tenue_mage.mesh");
	g_manDresses.Names->Add( "Indy");
	g_manDresses.Meshes->Add( "tenue_indiana.mesh");
	g_manDresses.Names->Add( "Alien");
	g_manDresses.Meshes->Add( "tenue_alien.mesh");
	g_manDresses.Names->Add( "Aluk");
	g_manDresses.Meshes->Add( "tenue_aluc.mesh");
	g_manDresses.Names->Add( "Angelique");
	g_manDresses.Meshes->Add( "tenue_ange.mesh");
	g_manDresses.Names->Add( "Batboy");
	g_manDresses.Meshes->Add( "tenue_batman.mesh");
	g_manDresses.Names->Add( "Demoniaque");
	g_manDresses.Meshes->Add( "tenue_demon.mesh");
	g_manDresses.Names->Add( "Drake");
	g_manDresses.Meshes->Add( "tenue_drake.mesh");
	g_manDresses.Names->Add( "Loup-garou");
	g_manDresses.Meshes->Add( "tenue_garou.mesh");
	g_manDresses.Names->Add( "Lunk");
	g_manDresses.Meshes->Add( "tenue_lunk.mesh");
	g_manDresses.Names->Add( "Robot");
	g_manDresses.Meshes->Add( "tenue_robot.mesh");
	g_manDresses.Names->Add( "Ent");
	g_manDresses.Meshes->Add( "tenue_trent.mesh");
	g_manDresses.Names->Add( "Vampire");
	g_manDresses.Meshes->Add( "tenue_vampire.mesh");
	g_manDresses.Names->Add( "Ninja");
	g_manDresses.Meshes->Add( "tenue_ninja.mesh");
	g_manDresses.Names->Add( "Goku");
	g_manDresses.Meshes->Add( "tenue_goku.mesh");

	g_manSkins.Names->Add( "Blanc");
	g_manSkins.Meshes->Add( "corpsminiboy/peau");
	g_manSkins.Names->Add( "Mat");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-mat");
	g_manSkins.Names->Add( "Noir");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-noir");
	g_manSkins.Names->Add( "Jaune");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-jaune");
	g_manSkins.Names->Add( "Demon");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-demon");
	g_manSkins.Names->Add( "Alien");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-alien");
	g_manSkins.Names->Add( "Drake");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-drake");
	g_manSkins.Names->Add( "Loup Garou");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-garou");
	g_manSkins.Names->Add( "Robot");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-robot");
	g_manSkins.Names->Add( "Ent");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-trent");
	g_manSkins.Names->Add( "Vampire");
	g_manSkins.Meshes->Add( "corpsminiboy/peau-vampire");

	g_manBeards.Names->Add( "Aucune");
	g_manBeards.Meshes->Add( "none");
	g_manBeards.Names->Add( "Barbe");
	g_manBeards.Meshes->Add( "poils_barbe.mesh");
	g_manBeards.Names->Add( "Barbe longue");
	g_manBeards.Meshes->Add( "poils_barbelongue.mesh");
	g_manBeards.Names->Add( "Barbiche");
	g_manBeards.Meshes->Add( "poils_barbiche.mesh");
	g_manBeards.Names->Add( "Bouc");
	g_manBeards.Meshes->Add( "poils_bouc.mesh");
	g_manBeards.Names->Add( "Moustache");
	g_manBeards.Meshes->Add( "poils_moustache.mesh");
	g_manBeards.Names->Add( "Pattes");
	g_manBeards.Meshes->Add( "poils_pattes.mesh");

	g_manBrows.Names->Add( "Aucun");
	g_manBrows.Meshes->Add( "none");
	g_manBrows.Names->Add( "Sourcils");
	g_manBrows.Meshes->Add( "sourcils.mesh");

	g_manEyesMaterials.Names->Add( "Noirs");
	g_manEyesMaterials.Meshes->Add( "corpsminiboy/iris");
	g_manEyesMaterials.Names->Add( "Bleus");
	g_manEyesMaterials.Meshes->Add( "corpsminiboy/iris-bleu");
	g_manEyesMaterials.Names->Add( "Verts");
	g_manEyesMaterials.Meshes->Add( "corpsminiboy/iris-vert");
	g_manEyesMaterials.Names->Add( "Marrons");
	g_manEyesMaterials.Meshes->Add( "corpsminiboy/iris-marron");
	g_manEyesMaterials.Names->Add( "Rouges");
	g_manEyesMaterials.Meshes->Add( "corpsminiboy/iris-rouge");
	g_manEyesMaterials.Names->Add( "Jaunes");
	g_manEyesMaterials.Meshes->Add( "corpsminiboy/iris-jaune");
}

void InitialiseWomanMeshes()
{
	g_womanBodies.Names->Add( "Normal");
	g_womanBodies.Meshes->Add( "corpsgirl.mesh");

	g_womanHairs.Names->Add( "Couettes");
	g_womanHairs.Meshes->Add( "coiffe_couettesgirl.mesh");
	g_womanHairs.Names->Add( "Detaches");
	g_womanHairs.Meshes->Add( "coiffe_detachegirl.mesh");
	g_womanHairs.Names->Add( "Queue de cheval");
	g_womanHairs.Meshes->Add( "coiffe_queuedechevgirl.mesh");
	g_womanHairs.Names->Add( "Chouquette");
	g_womanHairs.Meshes->Add( "coiffe_chouquettegirl.mesh");
	g_womanHairs.Names->Add( "Mage");
	g_womanHairs.Meshes->Add( "coiffe_magegirl.mesh");
	g_womanHairs.Names->Add( "Ecouteurs");
	g_womanHairs.Meshes->Add( "coiffe_casquemusiquegirl.mesh");
	g_womanHairs.Names->Add( "Cowgirl");
	g_womanHairs.Meshes->Add( "coiffe_cowgirl.mesh");
	g_womanHairs.Names->Add( "Catgirl");
	g_womanHairs.Meshes->Add( "coiffe_catwomangirl.mesh");
	g_womanHairs.Names->Add( "Ange");
	g_womanHairs.Meshes->Add( "coiffe_angegirl.mesh");
	g_womanHairs.Names->Add( "Demone");
	g_womanHairs.Meshes->Add( "coiffe_demonegirl.mesh");
	g_womanHairs.Names->Add( "Haut de forme");
	g_womanHairs.Meshes->Add( "coiffe_hauteformegirl.mesh");
	g_womanHairs.Names->Add( "Meche");
	g_womanHairs.Meshes->Add( "coiffe_mechegirl.mesh");
	g_womanHairs.Names->Add( "Robot");
	g_womanHairs.Meshes->Add( "coiffe_robotgirl.mesh");
	g_womanHairs.Names->Add( "Ent");
	g_womanHairs.Meshes->Add( "coiffe_trentgirl.mesh");
	g_womanHairs.Names->Add( "Tresse afro");
	g_womanHairs.Meshes->Add( "coiffe_tresseafrogirl.mesh");
	g_womanHairs.Names->Add( "Halloween");
	g_womanHairs.Meshes->Add( "coiffe_haloweengirl.mesh");
	g_womanHairs.Names->Add( "Vampire");
	g_womanHairs.Meshes->Add( "coiffe_vampiregirl.mesh");

	g_womanHairsMaterials.Names->Add( "Noirs");
	g_womanHairsMaterials.Meshes->Add( "corpsminigirl/cheveux");
	g_womanHairsMaterials.Names->Add( "Chatains");
	g_womanHairsMaterials.Meshes->Add( "corpsminigirl/cheveux-chatain");
	g_womanHairsMaterials.Names->Add( "Blonds");
	g_womanHairsMaterials.Meshes->Add( "corpsminigirl/cheveux-blond");
	g_womanHairsMaterials.Names->Add( "Roux");
	g_womanHairsMaterials.Meshes->Add( "corpsminigirl/cheveux-roux");
	g_womanHairsMaterials.Names->Add( "Gris");
	g_womanHairsMaterials.Meshes->Add( "corpsminigirl/cheveux-gris");
	g_womanHairsMaterials.Names->Add( "Blancs");
	g_womanHairsMaterials.Meshes->Add( "corpsminigirl/cheveux-blanc");

	g_womanDresses.Names->Add( "Sportive");
	g_womanDresses.Meshes->Add( "none");
	g_womanDresses.Names->Add( "Cowboy");
	g_womanDresses.Meshes->Add( "tenue_cowgirl.mesh");
	g_womanDresses.Names->Add( "Robe mage");
	g_womanDresses.Meshes->Add( "tenue_magegirl.mesh");
	g_womanDresses.Names->Add( "Catgirl");
	g_womanDresses.Meshes->Add( "tenue_catwomangirl.mesh");
	g_womanDresses.Names->Add( "Ange");
	g_womanDresses.Meshes->Add( "tenue_angegirl.mesh");
	g_womanDresses.Names->Add( "Demone");
	g_womanDresses.Meshes->Add( "tenue_demonegirl.mesh");
	g_womanDresses.Names->Add( "Jupe");
	g_womanDresses.Meshes->Add( "tenue_jupegirl.mesh");
	g_womanDresses.Names->Add( "Robe echancree");
	g_womanDresses.Meshes->Add( "tenue_robechancregirl.mesh");
	g_womanDresses.Names->Add( "Robe chinoise");
	g_womanDresses.Meshes->Add( "tenue_robechinegirl.mesh");
	g_womanDresses.Names->Add( "Robe medievale");
	g_womanDresses.Meshes->Add( "tenue_robemedgirl.mesh");
	g_womanDresses.Names->Add( "Robot");
	g_womanDresses.Meshes->Add( "tenue_robotgirl.mesh");
	g_womanDresses.Names->Add( "Shorty");
	g_womanDresses.Meshes->Add( "tenue_shortigirl.mesh");
	g_womanDresses.Names->Add( "Ent");
	g_womanDresses.Meshes->Add( "tenue_trentgirl.mesh");
	g_womanDresses.Names->Add( "Vampire");
	g_womanDresses.Meshes->Add( "tenue_vampiregirl.mesh");

	g_womanSkins.Names->Add( "Blanc");
	g_womanSkins.Meshes->Add( "corpsminigirl/peau");
	g_womanSkins.Names->Add( "Mat");
	g_womanSkins.Meshes->Add( "corpsminigirl/peau-mat");
	g_womanSkins.Names->Add( "Noir");
	g_womanSkins.Meshes->Add( "corpsminigirl/peau-noir");
	g_womanSkins.Names->Add( "Jaune");
	g_womanSkins.Meshes->Add( "corpsminigirl/peau-jaune");
	g_womanSkins.Names->Add( "Demon");
	g_womanSkins.Meshes->Add( "corpsminigirl/peau-demon");
	g_womanSkins.Names->Add( "Ent");
	g_womanSkins.Meshes->Add( "corpsminigirl/peau-trent");
	g_womanSkins.Names->Add( "Vampire");
	g_womanSkins.Meshes->Add( "corpsminigirl/peau-vampire");

	g_womanBrows.Names->Add( "Aucun");
	g_womanBrows.Meshes->Add( "none");
	g_womanBrows.Names->Add( "Sourcils");
	g_womanBrows.Meshes->Add( "sourcilsgirl.mesh");

	g_womanEyesMaterials.Names->Add( "Noirs");
	g_womanEyesMaterials.Meshes->Add( "corpsminigirl/iris");
	g_womanEyesMaterials.Names->Add( "Bleus");
	g_womanEyesMaterials.Meshes->Add( "corpsminigirl/iris-bleu");
	g_womanEyesMaterials.Names->Add( "Verts");
	g_womanEyesMaterials.Meshes->Add( "corpsminigirl/iris-vert");
	g_womanEyesMaterials.Names->Add( "Marrons");
	g_womanEyesMaterials.Meshes->Add( "corpsminigirl/iris-marron");
	g_womanEyesMaterials.Names->Add( "Rouges");
	g_womanEyesMaterials.Meshes->Add( "corpsminigirl/iris-rouge");
	g_womanEyesMaterials.Names->Add( "Jaunes");
	g_womanEyesMaterials.Meshes->Add( "corpsminigirl/iris-jaune");

	g_womanEyeLashes.Names->Add( "Aucun");
	g_womanEyeLashes.Meshes->Add( "yeuxcorpsgirl.jpg");
	g_womanEyeLashes.Names->Add( "Noir");
	g_womanEyeLashes.Meshes->Add( "yeuxnoirs.jpg");
	g_womanEyeLashes.Names->Add( "Bleu");
	g_womanEyeLashes.Meshes->Add( "yeuxbleus.jpg");
	g_womanEyeLashes.Names->Add( "Rose");
	g_womanEyeLashes.Meshes->Add( "yeuxroses.jpg");

	g_womanLipsticks.Names->Add( "Aucun");
	g_womanLipsticks.Meshes->Add( "transparent.jpg");
	g_womanLipsticks.Names->Add( "Noir");
	g_womanLipsticks.Meshes->Add( "levrenoire.jpg");
	g_womanLipsticks.Names->Add( "Bleu");
	g_womanLipsticks.Meshes->Add( "levrebleu.jpg");
	g_womanLipsticks.Names->Add( "Rose");
	g_womanLipsticks.Meshes->Add( "levrerose.jpg");
}

void InitialiseNetworkMessages()
{
	msAvatar = 1;
	msJoin = 2;
	msQuit = 3;
	msUpdateRooms = 4;
	msUpdate = 5;
	msWalk = 6;
	msTurn = 7;
	msTalk = 8;
	msWhisp = 9;
	msBeginWalk = 10;
	msEndWalk = 11;
	msEmote = 12;
	msRemoveFriend = 13;
	msRemoveIgnored = 14;
	msUpdateFriendsList = 15;
	msUpdateIgnoredList = 16;
	msNewFriend = 17;
	msNewIgnored = 18;
	msNewFriendAccept = 19;
	msNewFriendRefuse = 20;
	msBeginRun = 21;
	msEndRun = 22;
	msSitDown = 28;
	msSitUp = 29;
	
	mrJoin = 2;
	mrQuit = 3;
	mrAvatar = 4;
	mrRooms = 5;
	mrUpdate = 6;
	mrWalk = 7;
	mrTurn = 8;
	mrWhisp = 9;
	mrWhispOK = 10;
	mrWhispFail = 11;
	mrBeginWalk = 12;
	mrEndWalk = 13;
	mrEmote = 14;
	mrNewFriendDoesntExist = 15;
	mrNewFriendAlreadyFriend = 16;
	mrNewFriendAsk = 17;
	mrNewIgnoredDoesntExist = 18;
	mrNewIgnoredAlreadyIgnored = 19;
	mrNewIgnoredDone = 20;
	mrUpdateFriendsList = 21;
	mrUpdateIgnoredList = 22;
	mrNewFriendRefuse = 23;
	mrNewFriendAccept = 24;
	mrTalk = 25;
	mrKickUser = 26;
	mrBeginRun = 27;
	mrEndRun = 28;
	mrSitDown = 40;
	mrSitUp = 41;
}

void InitialiseCommon()
{
	InitialiseNetworkMessages();
	g_fucked = false;
	g_inGame = false;
	g_xMouseModifier = -1.0;
	g_yMouseModifier = 1.0;

	g_mainChar.Character.Name = l_login;
	g_mainChar.Running = false;
	g_mainChar.WalkSpeed = 300.0;
	g_mainChar.RunSpeed = 900.0;
	g_mainChar.BaseAngle = 100.0;
	g_mainChar.CurrentYaw = 0.0;
	g_mainChar.Character.Sex = 0;
	g_mainChar.Character.Body = 0;
	g_mainChar.Character.Hair = 0;
	g_mainChar.Character.HairMaterial = 0;
	g_mainChar.Character.Dress = 0;
	g_mainChar.Character.EyeMaterial = 0;
	g_mainChar.Character.Special01 = 0;
	g_mainChar.Character.Special02 = 0;
	g_mainChar.Character.Brow = 0;
	g_mainChar.Character.BrowMaterial = 0;

	g_currentChar.Sex = 0;
	g_currentChar.Body = 0;
	g_currentChar.Hair = 0;
	g_currentChar.HairMaterial = 0;
	g_currentChar.Dress = 0;
	g_currentChar.EyeMaterial = 0;
	g_currentChar.Special01 = 0;
	g_currentChar.Special02 = 0;
	g_currentChar.Brow = 0;
	g_currentChar.BrowMaterial = 0;

	g_currentPitch = 0.0;
	g_previousPitch = 0.0;

	InitialiseManMeshes();
	InitialiseWomanMeshes();

	g_minPitch = -80.0;
	g_maxPitch = 80.0;

	g_distantChars->Clear();

	InitialiseNetwork();
}

InitialiseCommon();