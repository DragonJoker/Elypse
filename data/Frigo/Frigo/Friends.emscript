bool g_friendVisitConfirmMenuShown;
bool g_friendsMenuShown;

Friend g_selectedFriend;

int g_friendsListBegin;
int g_friendsListEnd;
int g_friendsListCount;
int g_friendsSendBegin;
int g_friendsSendEnd;
int g_friendsSendCount;

string_map <StringRealPair> g_friendsTooltipTexts;
string_map <Friend> g_friendsFromTooltip;
string_map <StringRealPair> g_sendFriendsTooltipTexts;
string_map <Friend> g_sendFriendsFromTooltip;

void ToggleFriendVisitConfirmMenu()
{
	g_friendVisitConfirmMenuShown = ( ! g_friendVisitConfirmMenuShown);
	if (g_friendVisitConfirmMenuShown)
	{
		Overlay_Show( "FriendToVisitConfirm");
	}
	else
	{
		Overlay_Hide( "FriendToVisitConfirm");
		g_mouse.VisitFriendSelected = false;
	}
}

void VisitFriend()
{
	if (g_mouse.VisitFriendSelected)
	{
		g_canAskForMagnet = false;
		g_fridge->Init();
		Timer_Kill( "RefreshInfos");

		FlushFridgeContent();
		g_selectedPlayer.FacebookId = g_selectedFriend.FacebookId;
		g_selectedPlayer->Init( false);
		RefreshFridgeContent();

		OverlayElement_GetByName( "FriendInfos/FirstName")->SetCaption( g_selectedFriend.FirstName);
		OverlayElement_GetByName( "FriendInfos/LastName")->SetCaption( g_selectedFriend.LastName);
		Overlay_Show( "FriendInfos");
		Overlay_Show( "BackToMine");
		ToggleFriendVisitConfirmMenu();
//		g_canAskForMagnet = true;
	}
}

void SelectFriendToVisit( int p_index)
{
	iterator <string_map <StringRealPair> > l_strit;
	iterator <string_map <Friend> > l_strit2;
	l_strit = g_friendsTooltipTexts->Find_Iter( "FriendsList/Friend" + itoa( p_index));
	l_strit2 = g_friendsFromTooltip->Find_Iter( "FriendsList/Friend" + itoa( p_index));
	if (l_strit != g_friendsTooltipTexts->End())
	{
		g_selectedFriend = l_strit2->Data();
		g_mouse.VisitFriendSelected = true;
		g_selectedOverlay->SetMaterial( "Vignette");
		g_selectedOverlay = OverlayElement_GetByName( "FriendsList/Friend" + itoa( p_index));
		g_selectedOverlay->SetMaterial( "VignetteSel");
		OverlayElement_GetByName( "FriendToVisitConfirm/Title")->SetCaption( "Etes vous sur de vouloir" + endl + "aller chez " + l_strit->Data().First + " ?");
		ToggleFriendVisitConfirmMenu();
	}
	else
	{
		g_mouse.VisitFriendSelected = false;
	}
}

bool LoadFriendsForList( int p_begin, int p_end)
{
//	Echo( "LoadFriendsForList - " + itoa( p_begin) + " - " + itoa( p_end));
	Timer_Kill( "FriendsTooltips");
	int i;
	int l_end;
	l_end = p_end;
	if (l_end >= g_allFriends->Size())
	{
		l_end = g_allFriends->Size();
	}
	iterator <int_map <Friend> >  l_it;
	l_it = g_allFriends->Begin();
	iterator <int_map <Friend> >  l_endit;
	l_endit = g_allFriends->End();
	for (i = 0 ; i < p_begin && l_it != l_endit ; i++)
	{
		l_it++;
	}

	if (l_it == l_endit)
	{
		return false;
	}

	for (i = 0 ; i < g_friendsListCount ; i++)
	{
		OverlayElement_GetByName( "FriendsList/Friend" + itoa( i) + "/Image")->SetMaterial( "Vignette");
	}

	g_friendsListBegin = p_begin;
	g_friendsListEnd = l_end;
	Friend l_friend;
	int l_count;
	l_count = 0;
	g_friendsFromTooltip->Clear();
	g_friendsTooltipTexts->Clear();
	StringRealPair l_pair;
	for (i = p_begin ; i < l_end && l_it != l_endit ; i++)
	{
		l_friend = l_it->Data();
		OverlayElement_GetByName( "FriendsList/Friend" + itoa( l_count) + "/Image")->SetMaterial( "Friend/" + itoa( l_friend.FacebookId));
		l_pair.First = l_friend.FirstName + endl + l_friend.LastName;
		l_pair.Second = max( GetLineWidth( l_friend.FirstName, "Minigame", 70.0), GetLineWidth( l_friend.LastName, "Minigame", 70.0));
		g_friendsFromTooltip->Add( "FriendsList/Friend" + itoa( l_count), l_friend);
		g_friendsTooltipTexts->Add( "FriendsList/Friend" + itoa( l_count), l_pair);
		l_count++;
		l_it++;
	}
	iterator <string_map <StringRealPair> > l_strit;
	real l_time;
	timer( "FriendsTooltips", TIMERTYPE_PERMANENT, 0.0)
	{
		g_mouse.X = MOUSE_POSITION_X;
		g_mouse.Y = MOUSE_POSITION_Y;
		g_mouse.PickedOverlay = OverlayElement_MousePickup( g_mouse.X, g_mouse.Y);
		if (g_mouse.PickedOverlay != NULL)
		{
			if (g_mouse.PickedOverlay->GetName()->find( "FriendsList") != npos)
			{
				if (g_mouse.PickedOverlay->GetName()->find( "Image") != npos)
				{
					g_mouse.PickedOverlay = g_mouse.PickedOverlay->GetParent();
				}
				l_strit = g_friendsTooltipTexts->Find_Iter( g_mouse.PickedOverlay->GetName());
				if (l_strit != g_friendsTooltipTexts->End())
				{
					if (g_mouse.LastPickedOverlay == g_mouse.PickedOverlay)
					{
						l_time += GENERAL_ELAPSED_TIME;
						if (l_time >= 0.5 && ! l_strit->Data().First->empty())
						{
							g_mouse.Tooltip->SetTop( MOUSE_POSITION_Y);
							g_mouse.Tooltip->SetLeft( MOUSE_POSITION_X);
							g_mouse.Tooltip->SetWidth( l_strit->Data().Second);
							g_mouse.TooltipText->SetWidth( 90.0 * l_strit->Data().Second / 100.0);
							g_mouse.TooltipText->SetCaption( l_strit->Data().First);
							g_mouse.Tooltip->Show();
						}
					}
					else
					{
						g_mouse.LastPickedOverlay = g_mouse.PickedOverlay;
						l_time = 0.0;
						g_mouse.Tooltip->Hide();
					}
				}
				elseif (g_mouse.PickedOverlay != g_mouse.Tooltip && g_mouse.PickedOverlay != g_mouse.TooltipText)
				{
					g_mouse.Tooltip->Hide();
				}
			}
			elseif (g_mouse.PickedOverlay != g_mouse.Tooltip && g_mouse.PickedOverlay != g_mouse.TooltipText)
			{
				g_mouse.Tooltip->Hide();
			}
		}
		else
		{
			g_mouse.Tooltip->Hide();
		}
	}
}

void SelectFriendToSend( int p_index)
{
	g_selectedOverlay->SetMaterial( "Vignette");
	g_selectedOverlay = OverlayElement_GetByName( "FriendsMenu/FriendsContainer/Item" + itoa( p_index));
	g_selectedOverlay->SetMaterial( "VignetteSel");
	iterator <string_map <StringRealPair> > l_strit;
	iterator <string_map <Friend> > l_strit2;
	l_strit = g_sendFriendsTooltipTexts->Find_Iter( "FriendsMenu/FriendsContainer/Item" + itoa( p_index));
	l_strit2 = g_sendFriendsFromTooltip->Find_Iter( "FriendsMenu/FriendsContainer/Item" + itoa( p_index));
	if (l_strit != g_sendFriendsTooltipTexts->End())
	{
		g_selectedFriend := l_strit2->Data();
		g_mouse.SendFriendSelected = true;
	}
	else
	{
		g_mouse.SendFriendSelected = false;
	}
}

bool LoadFriendsForSend( int p_begin, int p_end)
{
//	Echo( "LoadFriendsForSend");
	Timer_Kill( "FriendsMenuTooltips");
	int i;
	int l_end;
	l_end = p_end;
	if (l_end >= g_allFriends->Size())
	{
		l_end = g_allFriends->Size();
	}
	iterator <int_map <Friend> >  l_it;
	l_it = g_allFriends->Begin();
	iterator <int_map <Friend> >  l_endit;
	l_endit = g_allFriends->End();
	for (i = 0 ; i < p_begin && l_it != l_endit ; i++)
	{
		l_it++;
	}

	if (l_it == l_endit)
	{
		return false;
	}

	for (i = 0 ; i < g_friendsSendCount ; i++)
	{
		OverlayElement_GetByName( "FriendsMenu/FriendsContainer/Item" + itoa( i) + "/Image")->SetMaterial( "Vignette");
	}

	g_friendsSendBegin = p_begin;
	g_friendsSendEnd = l_end;
	Friend l_friend;
	int l_count;
	l_count = 0;
	g_sendFriendsFromTooltip->Clear();
	g_sendFriendsTooltipTexts->Clear();
	StringRealPair l_pair;
	for (i = p_begin ; i < l_end && l_it != l_endit ; i++)
	{
		l_friend = l_it->Data();
		OverlayElement_GetByName( "FriendsMenu/FriendsContainer/Item" + itoa( l_count) + "/Image")->SetMaterial( "Friend/" + itoa( l_friend.FacebookId));
		l_pair.First = l_friend.FirstName + endl + l_friend.LastName;
		l_pair.Second = max( GetLineWidth( l_friend.FirstName, "Minigame", 70.0), GetLineWidth( l_friend.LastName, "Minigame", 70.0));
		g_sendFriendsFromTooltip->Add( "FriendsMenu/FriendsContainer/Item" + itoa( l_count), l_friend);
		g_sendFriendsTooltipTexts->Add( "FriendsMenu/FriendsContainer/Item" + itoa( l_count), l_pair);
		l_count++;
		l_it++;
	}
	iterator <string_map <StringRealPair> > l_strit;
	real l_time;
	timer( "FriendsMenuTooltips", TIMERTYPE_PERMANENT, 0.0)
	{
		g_mouse.X = MOUSE_POSITION_X;
		g_mouse.Y = MOUSE_POSITION_Y;
		g_mouse.PickedOverlay = OverlayElement_MousePickup( g_mouse.X, g_mouse.Y);
		if (g_mouse.PickedOverlay != NULL)
		{
			if (g_mouse.PickedOverlay->GetName()->find( "FriendsMenu") != npos)
			{
				if (g_mouse.PickedOverlay->GetName()->find( "Image") != npos)
				{
					g_mouse.PickedOverlay = g_mouse.PickedOverlay->GetParent();
				}
				l_strit = g_sendFriendsTooltipTexts->Find_Iter( g_mouse.PickedOverlay->GetName());
				if (l_strit != g_sendFriendsTooltipTexts->End())
				{
					if (g_mouse.LastPickedOverlay == g_mouse.PickedOverlay)
					{
						l_time += GENERAL_ELAPSED_TIME;
						if (l_time >= 0.5 && ! l_strit->Data().First->empty())
						{
							g_mouse.Tooltip->SetTop( MOUSE_POSITION_Y);
							g_mouse.Tooltip->SetLeft( MOUSE_POSITION_X);
							g_mouse.Tooltip->SetWidth( l_strit->Data().Second);
							g_mouse.TooltipText->SetWidth( 90.0 * l_strit->Data().Second / 100.0);
							g_mouse.TooltipText->SetCaption( l_strit->Data().First);
							g_mouse.Tooltip->Show();
						}
					}
					else
					{
						g_mouse.LastPickedOverlay = g_mouse.PickedOverlay;
						l_time = 0.0;
						g_mouse.Tooltip->Hide();
					}
				}
				elseif (g_mouse.PickedOverlay != g_mouse.Tooltip && g_mouse.PickedOverlay != g_mouse.TooltipText)
				{
					g_mouse.Tooltip->Hide();
				}
			}
			elseif (g_mouse.PickedOverlay != g_mouse.Tooltip && g_mouse.PickedOverlay != g_mouse.TooltipText)
			{
				g_mouse.Tooltip->Hide();
			}
		}
		else
		{
			g_mouse.Tooltip->Hide();
		}
	}
}