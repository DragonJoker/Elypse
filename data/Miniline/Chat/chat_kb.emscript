string chat_kb_message;
string chat_kb_displayed;
int chat_kb_index;
overlay chat_kb_field;
int chat_kb_maxLetters;

void SetVarsToMessage()
{
	chat_kb_message = l_message;
	chat_kb_index = chat_currentMessageIndex;
	chat_kb_displayed = chat_displayedMessage;
	chat_kb_field = chat_messageField;
	chat_kb_maxLetters = chat_maxMessageLetters;
}

void UnsetVarsToMessage()
{
	l_message = chat_kb_message;
	chat_currentMessageIndex = chat_kb_index;
	chat_displayedMessage = chat_kb_displayed;
}

void SetVarsToFriendName()
{
	chat_kb_message = chat_typedFriendName;
	chat_kb_index = chat_currentFriendNameIndex;
	chat_kb_displayed = chat_displayedFriendName;
	chat_kb_field = chat_friendNameField;
	chat_kb_maxLetters = chat_maxNameLetters;
}

void UnsetVarsToFriendName()
{
	chat_typedFriendName = chat_kb_message;
	chat_currentFriendNameIndex = chat_kb_index;
	chat_displayedFriendName = chat_kb_displayed;
}

void SetVarsToIgnoredName()
{
	chat_kb_message = chat_typedIgnoredName;
	chat_kb_index = chat_currentIgnoredNameIndex;
	chat_kb_displayed = chat_displayedIgnoredName;
	chat_kb_field = chat_ignoredNameField;
	chat_kb_maxLetters = chat_maxNameLetters;
}

void UnsetVarsToIgnoredName()
{
	chat_typedIgnoredName = chat_kb_message;
	chat_currentIgnoredNameIndex = chat_kb_index;
	chat_displayedIgnoredName = chat_kb_displayed;
}

void AddLetterToText()
{
	if (chat_kb_message->length() < chat_kb_maxLetters)
	{
		string altt_before;
		string altt_after;
		if (chat_kb_index == 0)
		{
			altt_before->clear();
		}
		else
		{
			altt_before = substr( chat_kb_message, 0, chat_kb_index);
		}
		if (chat_kb_index >= chat_kb_message->length() - 1)
		{
			altt_after->clear();
		}
		else
		{
			altt_after = substr( chat_kb_message, chat_kb_index, npos);
		}
	
		chat_kb_message = altt_before + chat_letter + altt_after;
		chat_kb_displayed = altt_before + chat_letter + "|" + altt_after;
		chat_kb_index++;
	
		ChatAdjustTextToField( chat_kb_displayed, chat_kb_index, chat_kb_field, 16.0);
	}
}

void AddLetter()
{
	if (g_mainChar.Talking || chat_typeFriendName || chat_typeIgnoredName)
	{
		if (l_shiftDown)
		{
			chat_letter = chat_shiftLetter;
		}
		elseif (l_altDown)
		{
			chat_letter = chat_altLetter;
		}
		else
		{
			chat_letter = chat_normalLetter;
		}
		if ( ! chat_letter->empty())
		{
			if (g_mainChar.Talking)
			{
				SetVarsToMessage();
				AddLetterToText();
				UnsetVarsToMessage();
			}
			elseif (chat_typeFriendName)
			{
				SetVarsToFriendName();
				AddLetterToText();
				UnsetVarsToFriendName();
			}
			elseif (chat_typeIgnoredName)
			{
				SetVarsToIgnoredName();
				AddLetterToText();
				UnsetVarsToIgnoredName();
			}
		}
	}
}

void RemovePreviousLetterFromText()
{
	if (chat_kb_index > 0)
	{
		string rplft_before;
		string rplft_after;
		if (chat_kb_index == 0)
		{
			rplft_before->clear();
		}
		else
		{
			rplft_before = substr( chat_kb_message, 0, chat_kb_index - 1);
		}
		if (chat_kb_index >= chat_kb_message->length() - 1)
		{
			rplft_after->clear();
		}
		else
		{
			rplft_after = substr( chat_kb_message, chat_kb_index, npos);
		}
	
		chat_kb_message = rplft_before + rplft_after;
		chat_kb_displayed = rplft_before + "|" + rplft_after;
		chat_kb_index--;
	
		ChatAdjustTextToField( chat_kb_displayed, chat_kb_index, chat_kb_field, 16.0);
	}
}

void RemovePreviousLetter()
{
	if (g_mainChar.Talking)
	{
		SetVarsToMessage();
		RemovePreviousLetterFromText();
		UnsetVarsToMessage();
	}
	elseif (chat_typeFriendName)
	{
		SetVarsToFriendName();
		RemovePreviousLetterFromText();
		UnsetVarsToFriendName();
	}
	elseif (chat_typeIgnoredName)
	{
		SetVarsToIgnoredName();
		RemovePreviousLetterFromText();
		UnsetVarsToIgnoredName();
	}
}

void RemoveNextLetterFromText()
{
	string rnlft_before;
	string rnlft_after;
	if (chat_kb_index == 0)
	{
		rnlft_before->clear();
	}
	else
	{
		rnlft_before = substr( chat_kb_message, 0, chat_kb_index);
	}
	if (chat_kb_index >= chat_kb_message->length() - 1)
	{
		rnlft_after->clear();
	}
	else
	{
		rnlft_after = substr( chat_kb_message, chat_kb_index + 1, chat_kb_message->length() - 1);
	}

	chat_kb_message = rnlft_before + rnlft_after;
	chat_kb_displayed = rnlft_before + "|" + rnlft_after;

	ChatAdjustTextToField( chat_kb_displayed, chat_kb_index, chat_kb_field, 16.0);
}

void RemoveNextLetter()
{
	if (g_mainChar.Talking)
	{
		SetVarsToMessage();
		RemoveNextLetterFromText();
		UnsetVarsToMessage();
	}
	elseif (chat_typeFriendName)
	{
		SetVarsToFriendName();
		RemoveNextLetterFromText();
		UnsetVarsToFriendName();
	}
	elseif (chat_typeIgnoredName)
	{
		SetVarsToIgnoredName();
		RemoveNextLetterFromText();
		UnsetVarsToIgnoredName();
	}
}

void MoveTextCursor( int mtc_direction)
{
	if ((mtc_direction < 0 && chat_kb_index > 0) || (mtc_direction > 0 && chat_kb_index < chat_kb_message->length()))
	{
		string mtc_before;
		string mtc_after;
		mtc_before = substr( chat_kb_message, 0, chat_kb_index + mtc_direction);
		mtc_after = substr( chat_kb_message, chat_kb_index + mtc_direction, chat_kb_message->length());

		chat_kb_displayed = mtc_before + "|" + mtc_after;
		chat_kb_index = chat_kb_index + mtc_direction;

		ChatAdjustTextToField( chat_kb_displayed, chat_kb_index, chat_kb_field, 16.0);
	}
}

void MoveCursor( int mc_direction)
{
	if (g_mainChar.Talking)
	{
		SetVarsToMessage();
		MoveTextCursor( mc_direction);
		UnsetVarsToMessage();
	}
	elseif (chat_typeFriendName)
	{
		SetVarsToFriendName();
		MoveTextCursor( mc_direction);
		UnsetVarsToFriendName();
	}
	elseif (chat_typeIgnoredName)
	{
		SetVarsToIgnoredName();
		MoveTextCursor( mc_direction);
		UnsetVarsToIgnoredName();
	}
}

BindKey( KEYCODE_UP, BINDKEY_DOWN)
{
	if ( ! g_mainChar.Talking && ! g_mainChar.Sitting)
	{
		StartWalking( false);
	}
}

BindKey( KEYCODE_UP, BINDKEY_UP)
{
	if ( ! g_mainChar.Talking && ! g_mainChar.Sitting)
	{
		EndWalking();
	}
}

BindKey( KEYCODE_DOWN, BINDKEY_DOWN)
{
	if ( ! g_mainChar.Talking && ! g_mainChar.Sitting)
	{
		StartWalking( true);
	}
}

BindKey( KEYCODE_DOWN, BINDKEY_UP)
{
	if ( ! g_mainChar.Talking && ! g_mainChar.Sitting)
	{
		EndWalking();
	}
}

BindKey( KEYCODE_ESCAPE, BINDKEY_UP)
{
	HideMenu();
	HideRoomsMenu();
	HideFriendsMenu();
	HideEmoteMenu();
}

BindKey( KEYCODE_LEFT, BINDKEY_DOWN)
{
	if (g_mainChar.Talking)
	{
		MoveCursor( -1);
	}
	else
	{
		g_mainChar.TurningLeft = true;
	}
}

BindKey( KEYCODE_LEFT, BINDKEY_REPEATED)
{
	if (g_mainChar.Talking)
	{
		MoveCursor( -1);
	}
}

BindKey( KEYCODE_LEFT, BINDKEY_UP)
{
	EndTurning();
}

BindKey( KEYCODE_RIGHT, BINDKEY_DOWN)
{
	if (g_mainChar.Talking)
	{
		MoveCursor( 1);
	}
	else
	{
		g_mainChar.TurningRight = true;
	}
}

BindKey( KEYCODE_RIGHT, BINDKEY_REPEATED)
{
	if (g_mainChar.Talking)
	{
		MoveCursor( 1);
	}
}

BindKey( KEYCODE_RIGHT, BINDKEY_UP)
{
	EndTurning();
}

BindKey( KEYCODE_CAPSLOCK, BINDKEY_DOWN)
{
	l_shiftDown = ! l_shiftDown;
	if (g_mainChar.Walking && ! g_mainChar.Backward)
	{
		StartWalking( false);
	}
}

BindKey( KEYCODE_BACKSPACE, BINDKEY_DOWN)
{
	RemovePreviousLetter();
}

BindKey( KEYCODE_BACKSPACE, BINDKEY_REPEATED)
{
	RemovePreviousLetter();
}

BindKey( KEYCODE_DEL, BINDKEY_DOWN)
{
	RemoveNextLetter();
}

BindKey( KEYCODE_DEL, BINDKEY_REPEATED)
{
	RemoveNextLetter();
}

BindKey( KEYCODE_ENTER, BINDKEY_DOWN)
{
	g_mainChar.Talking = (! g_mainChar.Talking);
	if (g_mainChar.Talking)
	{
		BeginTalking();
	}
	else
	{
		if ( ! l_message->empty() && l_message != "/whisp" && l_message != "/w")
		{
			if (substr( l_message, 0, 2)->find( "/w") == npos)
			{
//				Echo( "Normal message : " + l_message);
				l_message = "/normal " + l_message;
			}

			SendMessage( l_message);
			l_message->clear();
			chat_displayedMessage->clear();
		}
	}
}

BindKey( KEYCODE_ALT, BINDKEY_DOWN)
{
	l_altDown = true;
}

BindKey( KEYCODE_ALT, BINDKEY_UP)
{
	l_altDown = false;
}

BindKey( KEYCODE_SHIFT, BINDKEY_DOWN)
{
	l_shiftDown = ! l_shiftDown;
	if (g_mainChar.Walking && ! g_mainChar.Backward)
	{
		StartWalking( false);
	}
}

BindKey( KEYCODE_SHIFT, BINDKEY_UP)
{
	l_shiftDown = ! l_shiftDown;
	if (g_mainChar.Walking)
	{
		StartWalking( g_mainChar.Backward);
	}
}


BindKey( KEYCODE_SPACE, BINDKEY_DOWN)
{
	chat_shiftLetter = " ";
	chat_altLetter = " ";
	chat_normalLetter = " ";
	AddLetter();
}

BindKey( KEYCODE_SPACE, BINDKEY_REPEATED)
{
	chat_shiftLetter = " ";
	chat_altLetter = " ";
	chat_normalLetter = " ";
	AddLetter();
}

BindKey( KEYCODE_A, BINDKEY_DOWN)
{
	chat_shiftLetter = "A";
	chat_altLetter->clear();
	chat_normalLetter = "a";
	AddLetter();
}

BindKey( KEYCODE_A, BINDKEY_REPEATED)
{
	chat_shiftLetter = "A";
	chat_altLetter->clear();
	chat_normalLetter = "a";
	AddLetter();
}

BindKey( KEYCODE_B, BINDKEY_DOWN)
{
	chat_shiftLetter = "B";
	chat_altLetter->clear();
	chat_normalLetter = "b";
	AddLetter();
}

BindKey( KEYCODE_B, BINDKEY_REPEATED)
{
	chat_shiftLetter = "B";
	chat_altLetter->clear();
	chat_normalLetter = "b";
	AddLetter();
}

BindKey( KEYCODE_C, BINDKEY_DOWN)
{
	chat_shiftLetter = "C";
	chat_altLetter->clear();
	chat_normalLetter = "c";
	AddLetter();
}

BindKey( KEYCODE_C, BINDKEY_REPEATED)
{
	chat_shiftLetter = "C";
	chat_altLetter->clear();
	chat_normalLetter = "c";
	AddLetter();
}

BindKey( KEYCODE_D, BINDKEY_DOWN)
{
	if ( ! g_mainChar.Talking)
	{
		g_mainChar.TurningRight = true;
	}
	else
	{
		chat_shiftLetter = "D";
		chat_altLetter->clear();
		chat_normalLetter = "d";
		AddLetter();
	}
}

BindKey( KEYCODE_D, BINDKEY_UP)
{
	if ( ! g_mainChar.Talking)
	{
		g_mainChar.TurningRight = false;
	}
}

BindKey( KEYCODE_D, BINDKEY_REPEATED)
{
	chat_shiftLetter = "D";
	chat_altLetter->clear();
	chat_normalLetter = "d";
	AddLetter();
}

BindKey( KEYCODE_E, BINDKEY_DOWN)
{
	chat_shiftLetter = "E";
	chat_altLetter->clear();
	chat_normalLetter = "e";
	AddLetter();
}

BindKey( KEYCODE_E, BINDKEY_REPEATED)
{
	chat_shiftLetter = "E";
	chat_altLetter->clear();
	chat_normalLetter = "e";
	AddLetter();
}

BindKey( KEYCODE_F, BINDKEY_DOWN)
{
	chat_shiftLetter = "F";
	chat_altLetter->clear();
	chat_normalLetter = "f";
	AddLetter();
}

BindKey( KEYCODE_F, BINDKEY_REPEATED)
{
	chat_shiftLetter = "F";
	chat_altLetter->clear();
	chat_normalLetter = "f";
	AddLetter();
}

BindKey( KEYCODE_G, BINDKEY_DOWN)
{
	chat_shiftLetter = "G";
	chat_altLetter->clear();
	chat_normalLetter = "g";
	AddLetter();
}

BindKey( KEYCODE_G, BINDKEY_REPEATED)
{
	chat_shiftLetter = "G";
	chat_altLetter->clear();
	chat_normalLetter = "g";
	AddLetter();
}

BindKey( KEYCODE_H, BINDKEY_DOWN)
{
	chat_shiftLetter = "H";
	chat_altLetter->clear();
	chat_normalLetter = "h";
	AddLetter();
}

BindKey( KEYCODE_H, BINDKEY_REPEATED)
{
	chat_shiftLetter = "H";
	chat_altLetter->clear();
	chat_normalLetter = "h";
	AddLetter();
}

BindKey( KEYCODE_I, BINDKEY_DOWN)
{
	chat_shiftLetter = "I";
	chat_altLetter->clear();
	chat_normalLetter = "i";
	AddLetter();
}

BindKey( KEYCODE_I, BINDKEY_REPEATED)
{
	chat_shiftLetter = "I";
	chat_altLetter->clear();
	chat_normalLetter = "i";
	AddLetter();
}

BindKey( KEYCODE_J, BINDKEY_DOWN)
{
	chat_shiftLetter = "J";
	chat_altLetter->clear();
	chat_normalLetter = "j";
	AddLetter();
}

BindKey( KEYCODE_J, BINDKEY_REPEATED)
{
	chat_shiftLetter = "J";
	chat_altLetter->clear();
	chat_normalLetter = "j";
	AddLetter();
}

BindKey( KEYCODE_K, BINDKEY_DOWN)
{
	chat_shiftLetter = "K";
	chat_altLetter->clear();
	chat_normalLetter = "k";
	AddLetter();
}

BindKey( KEYCODE_K, BINDKEY_REPEATED)
{
	chat_shiftLetter = "K";
	chat_altLetter->clear();
	chat_normalLetter = "k";
	AddLetter();
}

BindKey( KEYCODE_L, BINDKEY_DOWN)
{
	chat_shiftLetter = "L";
	chat_altLetter->clear();
	chat_normalLetter = "l";
	AddLetter();
}

BindKey( KEYCODE_L, BINDKEY_REPEATED)
{
	chat_shiftLetter = "L";
	chat_altLetter->clear();
	chat_normalLetter = "l";
	AddLetter();
}

BindKey( KEYCODE_M, BINDKEY_DOWN)
{
	chat_shiftLetter = "M";
	chat_altLetter->clear();
	chat_normalLetter = "m";
	AddLetter();
}

BindKey( KEYCODE_M, BINDKEY_REPEATED)
{
	chat_shiftLetter = "M";
	chat_altLetter->clear();
	chat_normalLetter = "m";
	AddLetter();
}

BindKey( KEYCODE_N, BINDKEY_DOWN)
{
	chat_shiftLetter = "N";
	chat_altLetter->clear();
	chat_normalLetter = "n";
	AddLetter();
}

BindKey( KEYCODE_N, BINDKEY_REPEATED)
{
	chat_shiftLetter = "N";
	chat_altLetter->clear();
	chat_normalLetter = "n";
	AddLetter();
}

BindKey( KEYCODE_O, BINDKEY_DOWN)
{
	chat_shiftLetter = "O";
	chat_altLetter->clear();
	chat_normalLetter = "o";
	AddLetter();
}

BindKey( KEYCODE_O, BINDKEY_REPEATED)
{
	chat_shiftLetter = "O";
	chat_altLetter->clear();
	chat_normalLetter = "o";
	AddLetter();
}

BindKey( KEYCODE_P, BINDKEY_DOWN)
{
	chat_shiftLetter = "P";
	chat_altLetter->clear();
	chat_normalLetter = "p";
	AddLetter();
}

BindKey( KEYCODE_P, BINDKEY_REPEATED)
{
	chat_shiftLetter = "P";
	chat_altLetter->clear();
	chat_normalLetter = "p";
	AddLetter();
}

BindKey( KEYCODE_Q, BINDKEY_DOWN)
{
	if ( ! g_mainChar.Talking)
	{
		g_mainChar.TurningLeft = true;
	}
	else
	{
		chat_shiftLetter = "Q";
		chat_altLetter->clear();
		chat_normalLetter = "q";
		AddLetter();
	}
}

BindKey( KEYCODE_Q, BINDKEY_UP)
{
	if ( ! g_mainChar.Talking)
	{
		g_mainChar.TurningLeft = false;
	}
}

BindKey( KEYCODE_Q, BINDKEY_REPEATED)
{
	chat_shiftLetter = "Q";
	chat_altLetter->clear();
	chat_normalLetter = "q";
	AddLetter();
}

BindKey( KEYCODE_R, BINDKEY_DOWN)
{
	chat_shiftLetter = "R";
	chat_altLetter->clear();
	chat_normalLetter = "r";
	AddLetter();
}

BindKey( KEYCODE_R, BINDKEY_REPEATED)
{
	chat_shiftLetter = "R";
	chat_altLetter->clear();
	chat_normalLetter = "r";
	AddLetter();
}

BindKey( KEYCODE_S, BINDKEY_DOWN)
{
	if ( ! g_mainChar.Talking)
	{
		StartWalking( true);
	}
	else
	{
		chat_shiftLetter = "S";
		chat_altLetter->clear();
		chat_normalLetter = "s";
		AddLetter();
	}
}

BindKey( KEYCODE_S, BINDKEY_UP)
{
	if ( ! g_mainChar.Talking)
	{
		EndWalking();
	}
}

BindKey( KEYCODE_S, BINDKEY_REPEATED)
{
	chat_shiftLetter = "S";
	chat_altLetter->clear();
	chat_normalLetter = "s";
	AddLetter();
}

BindKey( KEYCODE_T, BINDKEY_DOWN)
{
	chat_shiftLetter = "T";
	chat_altLetter->clear();
	chat_normalLetter = "t";
	AddLetter();
}

BindKey( KEYCODE_T, BINDKEY_REPEATED)
{
	chat_shiftLetter = "T";
	chat_altLetter->clear();
	chat_normalLetter = "t";
	AddLetter();
}

BindKey( KEYCODE_U, BINDKEY_DOWN)
{
	chat_shiftLetter = "U";
	chat_altLetter->clear();
	chat_normalLetter = "u";
	AddLetter();
}

BindKey( KEYCODE_U, BINDKEY_REPEATED)
{
	chat_shiftLetter = "U";
	chat_altLetter->clear();
	chat_normalLetter = "u";
	AddLetter();
}

BindKey( KEYCODE_V, BINDKEY_DOWN)
{
	chat_shiftLetter = "V";
	chat_altLetter->clear();
	chat_normalLetter = "v";
	AddLetter();
}

BindKey( KEYCODE_V, BINDKEY_REPEATED)
{
	chat_shiftLetter = "V";
	chat_altLetter->clear();
	chat_normalLetter = "v";
	AddLetter();
}

BindKey( KEYCODE_W, BINDKEY_DOWN)
{
	chat_shiftLetter = "W";
	chat_altLetter->clear();
	chat_normalLetter = "w";
	AddLetter();
}

BindKey( KEYCODE_W, BINDKEY_REPEATED)
{
	chat_shiftLetter = "W";
	chat_altLetter->clear();
	chat_normalLetter = "w";
	AddLetter();
}

BindKey( KEYCODE_X, BINDKEY_DOWN)
{
	if (g_mainChar.Talking || chat_typeFriendName || chat_typeIgnoredName)
	{
		chat_shiftLetter = "X";
		chat_altLetter->clear();
		chat_normalLetter = "x";
		AddLetter();
	}
	else
	{
		if (g_mainChar.SatOnFloor)
		{
			GetUpFromFloor( g_mainChar.Character.Name);
		}
		elseif ( ! g_mainChar.Sat && ! g_mainChar.SittingOnFloor)
		{
			SitOnFloor( g_mainChar.Character.Name);
		}
	}
}

BindKey( KEYCODE_X, BINDKEY_REPEATED)
{
	chat_shiftLetter = "X";
	chat_altLetter->clear();
	chat_normalLetter = "x";
	AddLetter();
}

BindKey( KEYCODE_Y, BINDKEY_DOWN)
{
	chat_shiftLetter = "Y";
	chat_altLetter->clear();
	chat_normalLetter = "y";
	AddLetter();
}

BindKey( KEYCODE_Y, BINDKEY_REPEATED)
{
	chat_shiftLetter = "Y";
	chat_altLetter->clear();
	chat_normalLetter = "y";
	AddLetter();
}

BindKey( KEYCODE_Z, BINDKEY_DOWN)
{
	if ( ! g_mainChar.Talking)
	{
		StartWalking( false);
	}
	else
	{
		chat_shiftLetter = "Z";
		chat_altLetter->clear();
		chat_normalLetter = "z";
		AddLetter();
	}
}

BindKey( KEYCODE_Z, BINDKEY_UP)
{
	if ( ! g_mainChar.Talking)
	{
		EndWalking();
	}
}

BindKey( KEYCODE_Z, BINDKEY_REPEATED)
{
	chat_shiftLetter = "Z";
	chat_altLetter->clear();
	chat_normalLetter = "z";
	AddLetter();
}

BindKey( KEYCODE_0, BINDKEY_DOWN)
{
	chat_shiftLetter = "0";
	chat_altLetter = "@";
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_0, BINDKEY_REPEATED)
{
	chat_shiftLetter = "0";
	chat_altLetter = "@";
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_1, BINDKEY_DOWN)
{
	chat_shiftLetter = "1";
	chat_altLetter->clear();
	chat_normalLetter = "&";
	AddLetter();
}

BindKey( KEYCODE_1, BINDKEY_REPEATED)
{
	chat_shiftLetter = "1";
	chat_altLetter->clear();
	chat_normalLetter = "&";
	AddLetter();
}

BindKey( KEYCODE_2, BINDKEY_DOWN)
{
	chat_shiftLetter = "2";
	chat_altLetter->clear();
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_2, BINDKEY_REPEATED)
{
	chat_shiftLetter = "2";
	chat_altLetter->clear();
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_3, BINDKEY_DOWN)
{
	chat_shiftLetter = "3";
	chat_altLetter = "#";
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_3, BINDKEY_REPEATED)
{
	chat_shiftLetter = "3";
	chat_altLetter = "#";
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_4, BINDKEY_DOWN)
{
	chat_shiftLetter = "4";
	chat_altLetter = "{";
	chat_normalLetter = "'";
	AddLetter();
}

BindKey( KEYCODE_4, BINDKEY_REPEATED)
{
	chat_shiftLetter = "4";
	chat_altLetter = "{";
	chat_normalLetter = "'";
	AddLetter();
}

BindKey( KEYCODE_5, BINDKEY_DOWN)
{
	chat_shiftLetter = "5";
	chat_altLetter = "[";
	chat_normalLetter = "(";
	AddLetter();
}

BindKey( KEYCODE_5, BINDKEY_REPEATED)
{
	chat_shiftLetter = "5";
	chat_altLetter = "[";
	chat_normalLetter = "(";
	AddLetter();
}

BindKey( KEYCODE_6, BINDKEY_DOWN)
{
	chat_shiftLetter = "6";
	chat_altLetter = "|";
	chat_normalLetter = "-";
	AddLetter();
}

BindKey( KEYCODE_6, BINDKEY_REPEATED)
{
	chat_shiftLetter = "6";
	chat_altLetter ="|";
	chat_normalLetter = "-";
	AddLetter();
}

BindKey( KEYCODE_7, BINDKEY_DOWN)
{
	chat_shiftLetter = "7";
	chat_altLetter->clear();
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_7, BINDKEY_REPEATED)
{
	chat_shiftLetter = "7";
	chat_altLetter->clear();
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_8, BINDKEY_DOWN)
{
	chat_shiftLetter = "8";
	chat_altLetter->clear();
	chat_normalLetter = "_";
	AddLetter();
}

BindKey( KEYCODE_8, BINDKEY_REPEATED)
{
	chat_shiftLetter = "8";
	chat_altLetter->clear();
	chat_normalLetter = "_";
	AddLetter();
}

BindKey( KEYCODE_9, BINDKEY_DOWN)
{
	chat_shiftLetter = "9";
	chat_altLetter->clear();
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_9, BINDKEY_REPEATED)
{
	chat_shiftLetter = "9";
	chat_altLetter->clear();
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_NP_0, BINDKEY_DOWN)
{
	chat_shiftLetter = "0";
	chat_altLetter->clear();
	chat_normalLetter = "0";
	AddLetter();
}

BindKey( KEYCODE_NP_0, BINDKEY_REPEATED)
{
	chat_shiftLetter = "0";
	chat_altLetter->clear();
	chat_normalLetter = "0";
	AddLetter();
}

BindKey( KEYCODE_NP_1, BINDKEY_DOWN)
{
	chat_shiftLetter = "1";
	chat_altLetter->clear();
	chat_normalLetter = "1";
	AddLetter();
}

BindKey( KEYCODE_NP_1, BINDKEY_REPEATED)
{
	chat_shiftLetter = "1";
	chat_altLetter->clear();
	chat_normalLetter = "1";
	AddLetter();
}

BindKey( KEYCODE_NP_2, BINDKEY_DOWN)
{
	chat_shiftLetter = "2";
	chat_altLetter->clear();
	chat_normalLetter = "2";
	AddLetter();
}

BindKey( KEYCODE_NP_2, BINDKEY_REPEATED)
{
	chat_shiftLetter = "2";
	chat_altLetter->clear();
	chat_normalLetter = "2";
	AddLetter();
}

BindKey( KEYCODE_NP_3, BINDKEY_DOWN)
{
	chat_shiftLetter = "3";
	chat_altLetter->clear();
	chat_normalLetter = "3";
	AddLetter();
}

BindKey( KEYCODE_NP_3, BINDKEY_REPEATED)
{
	chat_shiftLetter = "3";
	chat_altLetter->clear();
	chat_normalLetter = "3";
	AddLetter();
}

BindKey( KEYCODE_NP_4, BINDKEY_DOWN)
{
	chat_shiftLetter = "4";
	chat_altLetter->clear();
	chat_normalLetter = "4";
	AddLetter();
}

BindKey( KEYCODE_NP_4, BINDKEY_REPEATED)
{
	chat_shiftLetter = "4";
	chat_altLetter->clear();
	chat_normalLetter = "4";
	AddLetter();
}

BindKey( KEYCODE_NP_5, BINDKEY_DOWN)
{
	chat_shiftLetter = "5";
	chat_altLetter->clear();
	chat_normalLetter = "5";
	AddLetter();
}

BindKey( KEYCODE_NP_5, BINDKEY_REPEATED)
{
	chat_shiftLetter = "5";
	chat_altLetter->clear();
	chat_normalLetter = "5";
	AddLetter();
}

BindKey( KEYCODE_NP_6, BINDKEY_DOWN)
{
	chat_shiftLetter = "6";
	chat_altLetter->clear();
	chat_normalLetter = "6";
	AddLetter();
}

BindKey( KEYCODE_NP_6, BINDKEY_REPEATED)
{
	chat_shiftLetter = "6";
	chat_altLetter->clear();
	chat_normalLetter = "6";
	AddLetter();
}

BindKey( KEYCODE_NP_7, BINDKEY_DOWN)
{
	chat_shiftLetter = "7";
	chat_altLetter->clear();
	chat_normalLetter = "7";
	AddLetter();
}

BindKey( KEYCODE_NP_7, BINDKEY_REPEATED)
{
	chat_shiftLetter = "7";
	chat_altLetter->clear();
	chat_normalLetter = "7";
	AddLetter();
}

BindKey( KEYCODE_NP_8, BINDKEY_DOWN)
{
	chat_shiftLetter = "8";
	chat_altLetter->clear();
	chat_normalLetter = "8";
	AddLetter();
}

BindKey( KEYCODE_NP_8, BINDKEY_REPEATED)
{
	chat_shiftLetter = "8";
	chat_altLetter->clear();
	chat_normalLetter = "8";
	AddLetter();
}

BindKey( KEYCODE_NP_9, BINDKEY_DOWN)
{
	chat_shiftLetter = "9";
	chat_altLetter->clear();
	chat_normalLetter = "9";
	AddLetter();
}

BindKey( KEYCODE_NP_9, BINDKEY_REPEATED)
{
	chat_shiftLetter = "9";
	chat_altLetter->clear();
	chat_normalLetter = "9";
	AddLetter();
}

BindKey( KEYCODE_SUPERIOR, BINDKEY_DOWN)
{
	chat_shiftLetter = ">";
	chat_altLetter->clear();
	chat_normalLetter = "<";
	AddLetter();
}

BindKey( KEYCODE_SUPERIOR, BINDKEY_REPEATED)
{
	chat_shiftLetter = ">";
	chat_altLetter->clear();
	chat_normalLetter = "<";
	AddLetter();
}

BindKey( KEYCODE_DEGREE, BINDKEY_DOWN)
{
	chat_shiftLetter->clear();
	chat_altLetter = "]";
	chat_normalLetter = ")";
	AddLetter();
}

BindKey( KEYCODE_DEGREE, BINDKEY_REPEATED)
{
	chat_shiftLetter->clear();
	chat_altLetter = "]";
	chat_normalLetter = ")";
	AddLetter();
}

BindKey( KEYCODE_PLUS, BINDKEY_DOWN)
{
	chat_shiftLetter = "+";
	chat_altLetter = "}";
	chat_normalLetter = "=";
	AddLetter();
}

BindKey( KEYCODE_PLUS, BINDKEY_REPEATED)
{
	chat_shiftLetter = "+";
	chat_altLetter = "}";
	chat_normalLetter = "=";
	AddLetter();
}

BindKey( KEYCODE_PERCENT, BINDKEY_DOWN)
{
	chat_shiftLetter = "%";
	chat_altLetter->clear();
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_PERCENT, BINDKEY_REPEATED)
{
	chat_shiftLetter = "%";
	chat_altLetter->clear();
	chat_normalLetter->clear();
	AddLetter();
}

BindKey( KEYCODE_DOT, BINDKEY_DOWN)
{
	chat_shiftLetter = ".";
	chat_altLetter->clear();
	chat_normalLetter = ";";
	AddLetter();
}

BindKey( KEYCODE_DOT, BINDKEY_REPEATED)
{
	chat_shiftLetter = ".";
	chat_altLetter->clear();
	chat_normalLetter = ";";
	AddLetter();
}

BindKey( KEYCODE_QUESTION, BINDKEY_DOWN)
{
	chat_shiftLetter = "?";
	chat_altLetter->clear();
	chat_normalLetter = ",";
	AddLetter();
}

BindKey( KEYCODE_QUESTION, BINDKEY_REPEATED)
{
	chat_shiftLetter = "?";
	chat_altLetter->clear();
	chat_normalLetter = ",";
	AddLetter();
}

BindKey( KEYCODE_SLASH, BINDKEY_DOWN)
{
	chat_shiftLetter = "/";
	chat_altLetter->clear();
	chat_normalLetter = ":";
	AddLetter();
}

BindKey( KEYCODE_SLASH, BINDKEY_REPEATED)
{
	chat_shiftLetter = "/";
	chat_altLetter->clear();
	chat_normalLetter = ":";
	AddLetter();
}

BindKey( KEYCODE_PARAGRAPH, BINDKEY_DOWN)
{
	chat_shiftLetter->clear();
	chat_altLetter->clear();
	chat_normalLetter = "!";
	AddLetter();
}

BindKey( KEYCODE_PARAGRAPH, BINDKEY_REPEATED)
{
	chat_shiftLetter->clear();
	chat_altLetter->clear();
	chat_normalLetter = "!";
	AddLetter();
}