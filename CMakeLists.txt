cmake_minimum_required( VERSION 2.8)
#--------------------------------------------------------------------------------------------------
#	Initial configurations
#--------------------------------------------------------------------------------------------------
# Set project name, used in folders and in workspace creation
 set(ProjectName "ElypsePlayer")

# Set project version numbers
set( VERSION_MAJOR	0		)
set( VERSION_MINOR	9		)
set( VERSION_BUILD	4		)
set( VERSION_YEAR	2014	)

# Used to look for external modules
set( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules/")
# Experimental Precompiled headers support for GCC
include( ${CMAKE_SOURCE_DIR}/cmake_modules/PCHSupport.cmake)
# Force Unicode projects (MBCS is past :P)
add_definitions(-DUNICODE -D_UNICODE)
# Declare the project
project(${ProjectName})

include( ${CMAKE_SOURCE_DIR}/cmake_modules/Project.cmake)

#--------------------------------------------------------------------------------------------------
#	Looking for needed libraries
#--------------------------------------------------------------------------------------------------
if (MSVC)
	set( Boost_USE_STATIC_LIBS ON)
endif()

if (CMAKE_COMPILER_IS_GNUCXX)
	COMPILER_DUMPVERSION(Castor_COMPILER_VERSION)
	if (${Castor_COMPILER_VERSION} LESS "46")
		find_package( Boost REQUIRED date_time filesystem system thread)
	else ()
		find_package( Boost REQUIRED date_time filesystem system)
	endif ()
else ()
	find_package( Boost REQUIRED date_time filesystem system)
endif ()
if( MSVC )
	find_package( VLD )
endif()

find_package(CURL)
find_package(ZZip)
find_package(ZLIB)
find_package(Ogre)
find_package(FMOD)
find_package(ODE)
set( wxWidgets_USE_STATIC OFF)
if (WIN32)
	find_package( wxWidgets REQUIRED stc scintilla core base aui)
else ()
	find_package( wxWidgets REQUIRED core base stc)
endif()
string( COMPARE EQUAL "${wxWidgets_USE_DEBUG}" "ON" IsWxDebug)
set( wxWidgets_CXXFLAGS "${wxWidgets_CXX_FLAGS} -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES")
if (NOT WIN32)
	set( wxWidgets_CXXFLAGS "${wxWidgets_CXXFLAGS} -D__WXGTK__")
endif ()
if (IsWxDebug)
	set( wxWidgets_CXXFLAGS "${wxWidgets_CXXFLAGS} -D__WXDEBUG__")
endif ()

if (NOT WIN32)
	find_package(Atk)
	find_package(Freetype)
	find_package(Cairo)
	find_package(Pango)
	find_package(GTK)
	find_package(Atkmm)
	find_package(GTKmm)
	find_package(GDKmm)
	find_package(Glibmm)
	find_package(GIOmm)
	find_package(Cairomm)
	find_package(Pangomm)
	find_package(SigC++)
	find_package(GStreamer)
	find_package(LibXml)
else()
	find_package(DSHOW)
endif (NOT WIN32)

#--------------------------------------------------------------------------------------------------
#	Adding include dirs to include search path
#--------------------------------------------------------------------------------------------------
include_directories( include)
include_directories( ${Boost_INCLUDE_DIRS})
include_directories( ${ZZip_INCLUDE_DIR})
include_directories( ${Ogre_INCLUDE_DIR})
include_directories( ${ODE_INCLUDE_DIR})
include_directories( ${wxWidgets_INCLUDE_DIRS})
include_directories( ${CURL_INCLUDE_DIRS})
include_directories( ${FMOD_INCLUDE_DIR})
include_directories( ${ZLIB_INCLUDE_DIRS})
if( VLD_FOUND )
	include_directories( ${VLD_INCLUDE_DIR} )
	link_directories( ${VLD_LIBRARY_DIR} )
	set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DVLD_AVAILABLE")
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -DVLD_AVAILABLE")
	MESSAGE( STATUS "Using Visual Leak Detector to check for Memory leaks" )
endif ()

if (NOT WIN32)
	include_directories( ${Atk_INCLUDE_DIR})
	include_directories( ${Freetype_INCLUDE_DIR})
	include_directories( ${Cairo_INCLUDE_DIR})
	include_directories( ${Pango_INCLUDE_DIR})
	include_directories( ${PangoConfig_INCLUDE_DIR})
	include_directories( ${GTK_INCLUDE_DIR})
	include_directories( ${GDK_INCLUDE_DIR})
	include_directories( ${GDKConfig_INCLUDE_DIR})
	include_directories( ${Glib_INCLUDE_DIR})
	include_directories( ${GlibConfig_INCLUDE_DIR})
	include_directories( ${Atkmm_INCLUDE_DIR})
	include_directories( ${GTKmm_INCLUDE_DIR})
	include_directories( ${GTKmmConfig_INCLUDE_DIR})
	include_directories( ${GDKmm_INCLUDE_DIR})
	include_directories( ${GDKmmConfig_INCLUDE_DIR})
	include_directories( ${GDK-PixBuf_INCLUDE_DIR})
	include_directories( ${Glibmm_INCLUDE_DIR})
	include_directories( ${GlibmmConfig_INCLUDE_DIR})
	include_directories( ${GIOmm_INCLUDE_DIR})
	include_directories( ${Cairomm_INCLUDE_DIR})
	include_directories( ${Pangomm_INCLUDE_DIR})
	include_directories( ${PangommConfig_INCLUDE_DIR})
	include_directories( ${SigC++_INCLUDE_DIR})
	include_directories( ${SigC++Config_INCLUDE_DIR})
	include_directories( ${GSTREAMER_INCLUDE_DIR})
	include_directories( ${LIBXML_INCLUDE_DIR})
else()
	include_directories( ${DSHOW_INCLUDE_DIRS})
endif (NOT WIN32)

#--------------------------------------------------------------------------------------------------
#	Adding libraries dirs to link search path
#--------------------------------------------------------------------------------------------------
link_directories( ${LIBRARY_OUTPUT_PATH})
link_directories( ${Boost_LIBRARY_DIRS})
link_directories( ${ZZip_LIBRARY_DIR})
#link_directories( ${Ogre_LIBRARY_DIR})
link_directories( ${ODE_LIBRARY_DIR})
link_directories( ${wxWidgets_LIBRARY_DIRS})
link_directories( ${FMOD_LIBRARY_DIR})
if (NOT WIN32)
	link_directories( ${GSTREAMER_LIBRARY_DIR})
	link_directories( ${LIBXML_LIBRARY_DIR})
endif()

#--------------------------------------------------------------------------------------------------
#	Normalising libraries names
#--------------------------------------------------------------------------------------------------

set( FmodLibraries "")
FOREACH(Lib ${FMOD_LIBRARY})
	if (FmodLibraries)
		set(FmodLibraries "${FmodLibraries}¤${Lib}")
	else()
		set(FmodLibraries "${Lib}")
	endif()
ENDFOREACH()

set( CurlLibraries "")
FOREACH(Lib ${CURL_LIBRARIES})
	if (CurlLibraries)
		set(CurlLibraries "${CurlLibraries}¤${Lib}")
	else()
		set(CurlLibraries "${Lib}")
	endif()
ENDFOREACH()

set( ZlibLibraries "")
FOREACH(Lib ${ZLIB_LIBRARIES})
	if (ZlibLibraries)
		set(ZlibLibraries "${ZlibLibraries}¤${Lib}")
	else()
		set(ZlibLibraries "${Lib}")
	endif()
ENDFOREACH()

set( wxWidgetsLibraries "")
FOREACH(Lib ${wxWidgets_LIBRARIES})
	if (wxWidgetsLibraries)
		set(wxWidgetsLibraries "${wxWidgetsLibraries}¤${Lib}")
	else()
		set(wxWidgetsLibraries "${Lib}")
	endif()
ENDFOREACH()

set( GtkmmLibraries "")
FOREACH(Lib ${SigC++_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Atk_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Atkmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Pango_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Pangomm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Freetype_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Cairo_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Cairomm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GTK_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GDK_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GDK-PixBuf_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GIO_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Glib_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GTKmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GDKmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${Glibmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()
FOREACH(Lib ${GIOmm_LIBRARY})
	if (GtkmmLibraries)
		set(GtkmmLibraries "${GtkmmLibraries}¤${Lib}")
	else()
		set(GtkmmLibraries "${Lib}")
	endif()
ENDFOREACH()

set( XmlLibraries "")
FOREACH(Lib ${LIBXML_LIBRARY_DIR})
	if (XmlLibraries)
		set(XmlLibraries "${XmlLibraries}¤${Lib}")
	else()
		set(XmlLibraries "${Lib}")
	endif()
ENDFOREACH()

set( BoostLibraries "")
FOREACH(Lib ${Boost_LIBRARIES})
	if (BoostLibraries)
		set(BoostLibraries "${BoostLibraries}¤${Lib}")
	else()
		set(BoostLibraries "${Lib}")
	endif()
ENDFOREACH()

set( ZZipLibraries "")
FOREACH(Lib ${ZZip_LIBRARIES})
	if (ZZipLibraries)
		set(ZZipLibraries "${ZZipLibraries}¤${Lib}")
	else()
		set(ZZipLibraries "${Lib}")
	endif()
ENDFOREACH()

set( GstLibraries "")
FOREACH(Lib ${GSTREAMER_LIBRARIES})
	if (GstLibraries)
		set(GstLibraries "${GstLibraries}¤${Lib}")
	else()
		set(GstLibraries "${Lib}")
	endif()
ENDFOREACH()

set( OdeLibraries "")
FOREACH(Lib ${ODE_LIBRARIES})
	if (OdeLibraries)
		set(OdeLibraries "${OdeLibraries}¤${Lib}")
	else()
		set(OdeLibraries "${Lib}")
	endif()
ENDFOREACH()

set( OgreLibraries "")
FOREACH(Lib ${Ogre_LIBRARIES})
	if (OgreLibraries)
		set(OgreLibraries "${OgreLibraries}¤${Lib}")
	else()
		set(OgreLibraries "${Lib}")
	endif()
ENDFOREACH()

set( DShowLibraries "")
FOREACH(Lib ${DSHOW_LIBRARIES})
	if (DShowLibraries)
		set(DShowLibraries "${DShowLibraries}¤${Lib}")
	else()
		set(DShowLibraries "${Lib}")
	endif()
ENDFOREACH()

if(NOT "${CMAKE_BUILD_TYPE}" STREQUAL "")
	if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
		set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}")
		set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
	else()
		set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
		set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
	endif()
endif()

if (${CastorDebug})
	show_libs()
endif ()

#Few configuration for wxWidgets
string( COMPARE EQUAL "${wxWidgets_USE_DEBUG}" "ON" IsWxDebug)
set( wxWidgets_CXXFLAGS "${wxWidgets_CXX_FLAGS} -D_FILE_OFFSET_BITS=64 -D_LARGE_FILES")
if (NOT WIN32)
	set( wxWidgets_CXXFLAGS "${wxWidgets_CXXFLAGS} -D__WXGTK__")
endif ()
if (IsWxDebug)
	set( wxWidgets_CXXFLAGS "${wxWidgets_CXXFLAGS} -D__WXDEBUG__")
endif ()

#In order to be sure we have the right flags, we set it manually
if(NOT "${CMAKE_BUILD_TYPE}" STREQUAL "")
	if( MSVC )
		if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
			set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}")
			set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG} /Zm300")
		else()
			set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
			set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} /Zm300")
		endif()
	else()
		if ("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
			set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_DEBUG}")
			set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}")
		else()
			set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_RELEASE}")
			set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}")
		endif()
	endif()
endif()

msg_debug( "CMAKE_BUILD_TYPE : ${CMAKE_BUILD_TYPE}")
msg_debug( "CMAKE_C_FLAGS    : ${CMAKE_C_FLAGS}" )
msg_debug( "CMAKE_CXX_FLAGS  : ${CMAKE_CXX_FLAGS}" )

if( Boost_FOUND )
	add_target(
		GeneralLib
		lib
		""
		"${BoostLibraries};${ZZipLibraries}"
		""	""	""	""	""
		)
	if( OGRE_FOUND )
		add_target(
			ElypseCore
			dll
			"GeneralLib"
			"GeneralLib;${DShowLibraries};${CurlLibraries};${ZlibLibraries};${FmodLibraries};${CurlLibraries};${BoostLibraries};${ZZipLibraries};${OgreLibraries};${OdeLibraries};${GstLibraries};${GTK2_LIBRARIES};${XmlLibraries};${GtkmmLibraries}"
			"PrecompiledHeader.h"
			"PrecompiledHeader.cpp"
			"-D${TargetName}_EXPORTS"
			"-D${TargetName}_EXPORTS"	""
			)
		if( wxWidgets_FOUND )
			add_target(
				TrollEditor
				bin
				"GeneralLib;ElypseCore"
				"GeneralLib;ElypseCore;${wxWidgetsLibraries};${BoostLibraries};${ZZipLibraries};${OgreLibraries};${OdeLibraries};${GstLibraries};${GTK2_LIBRARIES};${XmlLibraries};${GtkmmLibraries}"
				"PrecompiledHeader.h"
				"PrecompiledHeader.cpp"
				"${wxWidgets_CFLAGS}"
				"${wxWidgets_CXXFLAGS}"	""
				)
		else()
			MESSAGE( STATUS "Missing Library : wxWidgets, TrollEditor will not be built" )
		endif()
	else()
		MESSAGE( STATUS "Missing Library : Ogre3D" )
	endif()

	file( GLOB_RECURSE Parser_languages 	resource/TrollEditor/*.lang)
	file( GLOB_RECURSE OvEditor_files 		resource/TrollEditor/OverlayEditor/*.*)
	file( GLOB_RECURSE ScEditor_files 		resource/TrollEditor/SceneEditor/*.*)
	if( MSVC )
		file( COPY ${Parser_languages} DESTINATION ${PROJECTS_BINTEMP_OUTPUT_PATH}/bin/Debug)
		file( MAKE_DIRECTORY "${PROJECTS_BINTEMP_OUTPUT_PATH}/Debug/bin/SceneEditor")
		file( MAKE_DIRECTORY "${PROJECTS_BINTEMP_OUTPUT_PATH}/Debug/bin/OverlayEditor")
		file( COPY ${ScEditor_files} DESTINATION ${PROJECTS_BINTEMP_OUTPUT_PATH}/bin/Debug/SceneEditor)
		file( COPY ${OvEditor_files} DESTINATION ${PROJECTS_BINTEMP_OUTPUT_PATH}/bin/Debug/OverlayEditor)

		file( COPY ${Parser_languages} DESTINATION ${PROJECTS_BINTEMP_OUTPUT_PATH}/bin/Release)
		file( MAKE_DIRECTORY "${PROJECTS_BINTEMP_OUTPUT_PATH}/Release/bin/SceneEditor")
		file( MAKE_DIRECTORY "${PROJECTS_BINTEMP_OUTPUT_PATH}/Release/bin/OverlayEditor")
		file( COPY ${ScEditor_files} DESTINATION ${PROJECTS_BINTEMP_OUTPUT_PATH}/bin/Release/SceneEditor)
		file( COPY ${OvEditor_files} DESTINATION ${PROJECTS_BINTEMP_OUTPUT_PATH}/bin/Release/OverlayEditor)
	endif()
	file( COPY ${Parser_languages} DESTINATION ${PROJECTS_BINARIES_OUTPUT_PATH}/bin)
	file( MAKE_DIRECTORY "${PROJECTS_BINARIES_OUTPUT_PATH}/bin/SceneEditor")
	file( MAKE_DIRECTORY "${PROJECTS_BINARIES_OUTPUT_PATH}/bin/OverlayEditor")
	file( COPY ${ScEditor_files} DESTINATION ${PROJECTS_BINARIES_OUTPUT_PATH}/bin/SceneEditor)
	file( COPY ${OvEditor_files} DESTINATION ${PROJECTS_BINARIES_OUTPUT_PATH}/bin/OverlayEditor)
else()
	MESSAGE( STATUS "Missing Library : Boost" )
endif()

if (NOT MSVC)
	install(
		TARGETS	GeneralLib
		ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
	)
	file(GLOB_RECURSE GeneralLibHeaders ${CMAKE_CURRENT_SOURCE_DIR}/include/GeneralLib/*.h ${CMAKE_CURRENT_SOURCE_DIR}/include/GeneralLib/*.hpp ${CMAKE_CURRENT_SOURCE_DIR}/include/GeneralLib/*.inl)
	install(
		FILES ${GeneralLibHeaders}
		DESTINATION ${CMAKE_INSTALL_PREFIX}/include/GeneralLib
	)
	install(
		TARGETS	ElypseCore
		ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
		LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
	)
	file(GLOB_RECURSE ElypseCoreHeaders ${CMAKE_CURRENT_SOURCE_DIR}/include/ElypseCore/*.h ${CMAKE_CURRENT_SOURCE_DIR}/include/ElypseCore/*.hpp ${CMAKE_CURRENT_SOURCE_DIR}/include/ElypseCore/*.inl)
	install(
		FILES ${ElypseCoreHeaders}
		DESTINATION ${CMAKE_INSTALL_PREFIX}/include/ElypseCore
	)
endif()
