Overlay_SetAction( "InGame/BottomLeft/Jouer")
{
	l_titleShown = false;
	ToggleMenu();
	Overlay_Hide( "InGame/SubmitScore");

	if ( ! l_paused && ! l_finished)
	{
		if (l_firstPlay)
		{
			BeginGame();
		}
		else
		{
			KazuPlayGame();
			if (l_infos == "ok" || g_fucked || l_infos == "tech error")
			{
				BeginGame();
			};
		};
	}
	else
	{
		ContinueGame();
	};
};

Overlay_SetAction( "InGame/BottomLeft/Recommencer")
{
	ToggleMenu();
	Overlay_Hide( "InGame/SubmitScore");

	if ( ! l_paused && ! l_finished)
	{
		if (l_firstPlay)
		{
			BeginGame();
		}
		else
		{
			KazuPlayGame();
			if (l_infos == "ok" || g_fucked || l_infos == "tech error")
			{
				OverlayElement_GetByName( "InGame/BottomLeft/Recommencer")->Hide();
				OverlayElement_GetByName( "InGame/BottomLeft/Recommencer/Cout")->Hide();
				OverlayElement_GetByName( "InGame/BottomLeft/Continuer")->Show();
				BeginGame();
			};
		};
	}
	else
	{
		ContinueGame();
	};
};

Overlay_SetAction( "InGame/BottomLeft/Continuer")
{
	ToggleMenu();
	Overlay_Hide( "InGame/SubmitScore");
	ContinueGame();
};

Overlay_SetAction( "InGame/BottomLeft/Regles")
{
	Overlay_Hide( "InGame/BottomLeft");
	HideTitle();
	Overlay_Show( "Regles");
};

Overlay_SetAction( "InGame/BottomLeft/Commandes")
{
	Overlay_Hide( "InGame/BottomLeft");
	HideTitle();
	Overlay_Show( "Commandes");
};

Overlay_SetAction( "InGame/BottomLeft/Options")
{
	Overlay_Hide( "InGame/BottomLeft");
	HideTitle();
	Overlay_Show( "Options");
};

Overlay_SetAction( "InGame/BottomLeft/Scores")
{
	_retrieveHighScores();
	Overlay_Hide( "InGame/BottomLeft");
	HideTitle();
	Overlay_Show( "Zcore");
};

Overlay_SetAction( "Zcore/Retour")
{
	Overlay_Show( "InGame/BottomLeft");
	ShowTitle();
	Overlay_Hide( "Zcore");
};

Overlay_SetAction( "InGame/SubmitScore")
{
	_submitHighscore();
	Overlay_Hide( "InGame/SubmitScore");
};

Overlay_SetAction( "InGame/SubmitScore/Text")
{
	_submitHighscore();
	Overlay_Hide( "InGame/SubmitScore");
};

Overlay_SetAction( "Commandes/Retour")
{
	Overlay_Show( "InGame/BottomLeft");
	ShowTitle();
	Overlay_Hide( "Commandes");
};

Overlay_SetAction( "Regles/Retour")
{
	Overlay_Show( "InGame/BottomLeft");
	ShowTitle();
	Overlay_Hide( "Regles");
};

Overlay_SetAction( "Options/Retour")
{
	Overlay_Show( "InGame/BottomLeft");
	ShowTitle();
	Overlay_Hide( "Options");
};

Overlay_SetAction( "InGame/Menu")
{
	PauseGame();
};

Overlay_SetAction( "Options/MusicOnOff")
{
	l_music = ( ! l_music);
	Sound_MuteMusic( l_music);

	if ( ! l_music)
	{
		OverlayElement_GetByName( "Options/MusicOnOff")->SetMaterial( "On");
	}
	else
	{
		OverlayElement_GetByName( "Options/MusicOnOff")->SetMaterial( "Off");
	};
};

Overlay_SetAction( "Options/SoundOnOff")
{
	l_sound = ( ! l_sound);
	Sound_MuteSFX( l_sound);

	if ( ! l_sound)
	{
		OverlayElement_GetByName( "Options/SoundOnOff")->SetMaterial( "On");
	}
	else
	{
		OverlayElement_GetByName( "Options/SoundOnOff")->SetMaterial( "Off");
	};
};

bool l_mouseOverMusic;
bool l_mouseOverSound;
l_mouseOverMusic = false;
l_mouseOverSound = false;

void TimerMusic()
{
	timer( "MusicChangeVolume", TIMERTYPE_PERMANENT, 0.0)
	{
		if (l_mouseOverMusic)
		{
			l_ticPos = MOUSE_POSITION_X - l_ticMusic->GetAbsoluteLeft();
			l_ticMusic->Translate( l_ticPos, 0.0);
	
			l_ticMusic->LimitToParent();
	
			l_musicVol = l_ticMusic->GetLeft() / l_relativeRegletteWidth;
	
			Sound_SetMusicVolume( l_musicVol);
		};
	};
};

void TimerSound()
{
	timer( "SoundChangeVolume", TIMERTYPE_PERMANENT, 0.0)
	{
		if (l_mouseOverSound)
		{
			l_ticPos = MOUSE_POSITION_X - l_ticSound->GetAbsoluteLeft();
			l_ticSound->Translate( l_ticPos, 0.0);
	
			l_ticSound->LimitToParent();
	
			l_soundVol = l_ticSound->GetLeft() / l_relativeRegletteWidth;
	
			Sound_SetSFXVolume( l_soundVol);
		};
	};
};

Overlay_SetAction( "Options/RegletteMusic")
{
	TimerMusic();
	l_mouseOverMusic = true;
	l_mouseOverSound = false;
};

Overlay_SetAction( "Options/TicMusic")
{
	TimerMusic();
	l_mouseOverMusic = true;
	l_mouseOverSound = false;
};

Overlay_SetAction( "Options/RegletteSound")
{
	TimerSound();
	l_mouseOverMusic = false;
	l_mouseOverSound = true;
};

Overlay_SetAction( "Options/TicSound")
{
	TimerSound();
	l_mouseOverMusic = false;
	l_mouseOverSound = true;
};

SetMouseLUpScript()
{
	l_mouseOverMusic = false;
	l_mouseOverSound = false;
	Timer_Kill( "MusicChangeVolume");
	Timer_Kill( "SoundChangeVolume");
};
/*
void Mouse_RButtonDown()
{
	Timer_Kill( "Mouse_RButtonDown");

	timer( "Mouse_RButtonDown", TIMERTYPE_PERMANENT, 0.0)
	{
		l_rootCamera->GetParent()->Yaw( -150.0 * MOUSE_DIFFERENCE_X / GENERAL_SCREEN_WIDTH);
		l_currentPitch = l_previousPitch - (100.0 * MOUSE_DIFFERENCE_Y / GENERAL_SCREEN_HEIGHT);

		if (l_currentPitch > -10.0)
		{
			l_currentPitch = -10.0;
		}
		elseif (l_currentPitch < (-3000.0))
		{
			l_currentPitch = (-3000.0);
		};

		l_rootCamera->GetParent()->Pitch( l_currentPitch - l_previousPitch);
		l_previousPitch = l_currentPitch;
	};
};

void Mouse_RButtonUp()
{
	Timer_Kill( "Mouse_RButtonDown");
};

void Mouse_WheelUp()
{
	l_currentZoom = V3_GetLength( l_rootCamera->GetPosition() * 0.9);

	if (l_currentZoom < 500.0)
	{
		l_currentZoom = 500.0;
	};

	l_rootCamera->SetPosition( l_rootCamera->GetPosition() * (l_currentZoom / V3_GetLength( l_rootCamera->GetPosition())));
};

void Mouse_WheelDown()
{
	l_currentZoom = V3_GetLength( l_rootCamera->GetPosition() * 1.11);

	if (l_currentZoom > 100000.0)
	{
		l_currentZoom = 100000.0;
	};

	l_rootCamera->SetPosition( l_rootCamera->GetPosition() * (l_currentZoom / V3_GetLength( l_rootCamera->GetPosition())));
};
*/
BindKey( KEYCODE_LEFT, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inBalcon)
	{
		l_acceleration = 9.81;
		l_leftDown = true;
	};
};

BindKey( KEYCODE_RIGHT, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inBalcon)
	{
		l_acceleration = -9.81;
		l_rightDown = true;
	};
};

BindKey( KEYCODE_LEFT, BINDKEY_UP)
{
	if (l_inGame && ! l_inBalcon)
	{
		if ( ! l_rightDown)
		{
			l_acceleration = 0.0;
		};

		l_leftDown = false;
	};
};

BindKey( KEYCODE_RIGHT, BINDKEY_UP)
{
	if (l_inGame && ! l_inBalcon)
	{
		if ( ! l_leftDown)
		{
			l_acceleration = 0.0;
		};

		l_rightDown = false;
	};
};

void NaturalInclinate()
{
	if (l_inclinaison >= 0.0)
	{
		timer( "NaturalInclinate", TIMERTYPE_REPEAT, 0.01)
		{
			if (l_inGame && ! l_inBalcon)
			{
				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);

				l_inclinaison = l_inclinaison - 0.5;

				if (l_inclinaison < 0.0)
				{
					l_inclinaison = 0.0;
					Timer_Kill( "NaturalInclinate");
				};

				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), -l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
			}
			else
			{
				Timer_Kill( "NaturalInclinate");

				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
				l_inclinaison = 0.0;
			};
		};

		if (l_paused)
		{
			Timer_Pause( "NaturalInclinate");
		};
	};
};

BindKey( KEYCODE_UP, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inBalcon)
	{
		Timer_Kill( "Breaking");
		Timer_Kill( "NaturalInclinate");

		timer( "Accelerating", TIMERTYPE_REPEAT, 0.01)
		{
			if (l_inGame && ! l_inBalcon)
			{
				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);

				l_inclinaison = l_inclinaison - 2.0;

				if (l_inclinaison < 0.0)
				{
					l_inclinaison = 0.0;
					Timer_Kill( "Accelerating");
				};

				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), -l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
			}
			else
			{
				Timer_Kill( "Accelerating");

				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
				l_inclinaison = 0.0;
			};
		};

		if (l_paused)
		{
			Timer_Pause( "Accelerating");
		};
	};
};

BindKey( KEYCODE_UP, BINDKEY_UP)
{
	if (l_inGame && ! l_inBalcon)
	{
		Timer_Kill( "Accelerating");

		NaturalInclinate();
	};
};

BindKey( KEYCODE_DOWN, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inBalcon)
	{
		Timer_Kill( "Accelerating");
		Timer_Kill( "NaturalInclinate");

		timer( "Breaking", TIMERTYPE_REPEAT, 0.01)
		{
			if (l_inGame && ! l_inBalcon)
			{
				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);

				l_inclinaison = l_inclinaison + 1.0;

				if (l_inclinaison > 45.0)
				{
					l_inclinaison = 45.0;
					Timer_Kill( "Breaking");
				};

				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), -l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
			}
			else
			{
				Timer_Kill( "Breaking");

				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
				l_inclinaison = 0.0;
			};
		};

		if (l_paused)
		{
			Timer_Pause( "Breaking");
		};
	};
};

BindKey( KEYCODE_DOWN, BINDKEY_UP)
{
	if (l_inGame && ! l_inBalcon)
	{
		Timer_Kill( "Breaking");

		NaturalInclinate();
	};
};

BindKey( KEYCODE_ESCAPE, BINDKEY_UP)
{
	if (l_paused)
	{
		ContinueGame();
	}
	else
	{
		PauseGame();
	};
};

BindKey( KEYCODE_P, BINDKEY_UP)
{
	if (l_paused)
	{
		ContinueGame();
	}
	else
	{
		PauseGame();
	};
};

timer( "Initialisation", TIMERTYPE_ONCE, 0.0)
{
	Initialise();
};
