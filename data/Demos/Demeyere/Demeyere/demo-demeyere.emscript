scene_node g_tirroir1Node;
g_tirroir1Node = SceneNode_GetByName("tirroir1");

scene_node g_tirroir2Node;
g_tirroir2Node = SceneNode_GetByName("tirroir2");

scene_node g_tirroir3Node;
g_tirroir3Node = SceneNode_GetByName("tirroir3");

scene_node g_tirroir4Node;
g_tirroir4Node = SceneNode_GetByName("tirroir4");

scene_node g_porte_1Node;
g_porte_1Node = SceneNode_GetByName("porte_1");

scene_node g_porte_2Node;
g_porte_2Node = SceneNode_GetByName("porte_2");

int g_currentMaterialIndex;

int c_maxMaterialIndex;
c_maxMaterialIndex = 2;

overlay g_currentOverlay;

real g_sliderWidth;
real l_morphScale;
real current_translation;

string l_materialName;
string l_materialNametext;

bool axesvisible;
axesvisible = false;


bool changematerail;
changematerail = false;

bool l_menuMoving;
l_menuMoving = false;

bool l_menuOut;
l_menuOut = false;

bool g_canMovetirroir1;
g_canMovetirroir1 = true;

bool g_canMovetirroir2;
g_canMovetirroir2 = true;

bool g_canMovetirroir3;
g_canMovetirroir3 = true;

bool g_canMovetirroir4;
g_canMovetirroir4 = true;

bool g_canMoveporte1;
g_canMoveporte1 = true;

bool g_canMoveporte2;
g_canMoveporte2 = true;



bool g_Movetirroir1_out;
g_Movetirroir1_out = true;

bool g_Movetirroir2_out;
g_Movetirroir2_out = true;

bool g_Movetirroir3_out;
g_Movetirroir3_out = true;

bool g_Movetirroir4_out;
g_Movetirroir4_out = true;

bool g_Moveporte1_out;
g_Moveporte1_out = false;

bool g_Moveporte2_out;
g_Moveporte2_out = false;

object l_objectSelected;

object currentEntity;
real current_pitch;
real previous_pitch;
real current_zoom;
real previous_zoom;
real l_left;

bool NotBloked;
NotBloked = true;

bool backBas;
backBas = false;

bool backGauche;
backGauche = false;


current_pitch = 0.0;
previous_pitch = 0.0;
current_zoom = 300.0;
previous_zoom = 300.0;

vector3 l_listPosition;
vector3 l_listPosition2;
vector3 position;

camera RootCamera;

RootCamera = Camera_GetByName("RootCamera");

Overlay_Hide("MenuCustomisationGauche");


Object_GetByName("axes")->Hide();
SceneNode_GetByName("axesX")->SetXPosition(10000.0);
SceneNode_GetByName("axesX")->SetYPosition(10000.0);
SceneNode_GetByName("axesX")->SetZPosition(10000.0);
SceneNode_GetByName("axesY")->SetXPosition(10000.0);
SceneNode_GetByName("axesY")->SetYPosition(10000.0);
SceneNode_GetByName("axesY")->SetZPosition(10000.0);
SceneNode_GetByName("axesZ")->SetXPosition(10000.0);
SceneNode_GetByName("axesZ")->SetYPosition(10000.0);
SceneNode_GetByName("axesZ")->SetZPosition(10000.0);

// touche A
BindKey(65,BINDKEY_DOWN)
{
	Timer_Kill("MenuCustomisationBas");
	Echo("OverlayElement_GetByName( MenuObject)->SetPosX" + rtoa(OverlayElement_GetByName( "MenuObject")->GetLeft()));
};


Overlay_SetAction( "MenuObject/MainPanel/Material_fleche_gauche")
{
	g_currentMaterialIndex --;
	
	if (g_currentMaterialIndex < 0)
	{
		g_currentMaterialIndex = c_maxMaterialIndex - 1;
	};
	
	if (g_currentMaterialIndex == 0)
	{ 
		l_materialName = "bois"; 
		l_materialNametext = "hetre"; 
	} 
	else 
	{ 
		l_materialName = "bois2"; 
		l_materialNametext = "cerisier"; 
	};

	OverlayElement_GetByName( "MenuObject/MainPanel/NomObjectMaterial")->SetCaption( l_materialNametext);

	
	
	Object_GetByName("Meuble")->SetMaterial( "demeyere_corps/" + l_materialName);
	Object_GetByName("tirroir1")->SetMaterial( "demeyere_tirroir_01/" + l_materialName);
	Object_GetByName("tirroir2")->SetMaterial( "demeyere_tirroir_02/" + l_materialName);
	Object_GetByName("tirroir3")->SetMaterial( "demeyere_tirroir_03/" + l_materialName);
	Object_GetByName("tirroir4")->SetMaterial( "demeyere_tirroir_04/" + l_materialName);
	Object_GetByName("porte_1")->SetMaterial( "demeyere_porte_01/" + l_materialName);
	Object_GetByName("porte_2")->SetMaterial( "demeyere_porte_02/" + l_materialName);
	
	Mirror_Update("TestMirror");

};

Overlay_SetAction( "MenuObject/MainPanel/Material_fleche_droite")
{
	g_currentMaterialIndex ++;
	
	if (g_currentMaterialIndex >= c_maxMaterialIndex)
	{
		g_currentMaterialIndex = 0;
	};
	
	if (g_currentMaterialIndex == 0)
	{ 
		l_materialName = "bois"; 
		l_materialNametext = "hetre"; 
	} 
	else 
	{ 
		l_materialName = "bois2"; 
		l_materialNametext = "cerisier"; 
	};
	
	OverlayElement_GetByName( "MenuObject/MainPanel/NomObjectMaterial")->SetCaption( l_materialNametext);

	
	
	Object_GetByName("Meuble")->SetMaterial( "demeyere_corps/" + l_materialName);
	Object_GetByName("tirroir1")->SetMaterial( "demeyere_tirroir_01/" + l_materialName);
	Object_GetByName("tirroir2")->SetMaterial( "demeyere_tirroir_02/" + l_materialName);
	Object_GetByName("tirroir3")->SetMaterial( "demeyere_tirroir_03/" + l_materialName);
	Object_GetByName("tirroir4")->SetMaterial( "demeyere_tirroir_04/" + l_materialName);
	Object_GetByName("porte_1")->SetMaterial( "demeyere_porte_01/" + l_materialName);
	Object_GetByName("porte_2")->SetMaterial( "demeyere_porte_02/" + l_materialName);
	
	Mirror_Update("TestMirror");

};

void StartAnimationSlider1()
{
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{

		if(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH > 0.725 && MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH < 0.96)
		{

			g_currentOverlay->SetLeft(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH);
		
		};
		
		//g_currentOverlay->LimitToParent();
		
		if(g_currentOverlay->GetLeft() < 0.0)
		{
			g_currentOverlay->SetLeft(0.0 + 0.727);
		}
		elseif(g_currentOverlay->GetLeft() > 0.24)
		{
			g_currentOverlay->SetLeft(0.23 + 0.727);			
		};

		l_morphScale = (g_currentOverlay->GetLeft())/g_sliderWidth;
		g_tirroir1Node->SetPosition(SetVector3(0.0	, 0.0 , ((l_morphScale*1000.0)/1.0)*30.0 )) ;
		Mirror_Update("TestMirror");
	};
};

void StartAnimationSlider2()
{
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{

		if(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH > 0.725 && MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH < 0.96)
		{

			g_currentOverlay->SetLeft(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH);
		
		};
		
		//g_currentOverlay->LimitToParent();
		
		if(g_currentOverlay->GetLeft() < 0.0)
		{
			g_currentOverlay->SetLeft(0.0 + 0.727);
		}
		elseif(g_currentOverlay->GetLeft() > 0.24)
		{
			g_currentOverlay->SetLeft(0.23 + 0.727);			
		};

		l_morphScale = (g_currentOverlay->GetLeft())/g_sliderWidth;
		g_tirroir2Node->SetPosition(SetVector3(0.0	, 0.0 , ((l_morphScale*1000.0)/1.0)*30.0 )) ;
		Mirror_Update("TestMirror");
	};
};

void StartAnimationSlider3()
{
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{

		if(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH > 0.725 && MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH < 0.96)
		{

			g_currentOverlay->SetLeft(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH);
		
		};
		
		//g_currentOverlay->LimitToParent();
		
		if(g_currentOverlay->GetLeft() < 0.0)
		{
			g_currentOverlay->SetLeft(0.0 + 0.727);
		}
		elseif(g_currentOverlay->GetLeft() > 0.24)
		{
			g_currentOverlay->SetLeft(0.23 + 0.727);			
		};

		l_morphScale = (g_currentOverlay->GetLeft())/g_sliderWidth;
		g_tirroir3Node->SetPosition(SetVector3(0.0	, 0.0 , ((l_morphScale*1000.0)/1.0)*30.0 )) ;
		Mirror_Update("TestMirror");

	};
};

void StartAnimationSlider4()
{
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{

		if(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH > 0.725 && MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH < 0.96)
		{

			g_currentOverlay->SetLeft(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH);
		
		};
		
		//g_currentOverlay->LimitToParent();
		
		if(g_currentOverlay->GetLeft() < 0.0)
		{
			g_currentOverlay->SetLeft(0.0 + 0.727);
		}
		elseif(g_currentOverlay->GetLeft() > 0.24)
		{
			g_currentOverlay->SetLeft(0.23 + 0.727);			
		};

		l_morphScale = (g_currentOverlay->GetLeft())/g_sliderWidth;
		g_tirroir4Node->SetPosition(SetVector3(0.0	, 0.0 , ((l_morphScale*1000.0)/1.0)*30.0 )) ;
		Mirror_Update("TestMirror");
	};
};

void StartAnimationSlider5()
{
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{

		if(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH > 0.725 && MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH < 0.96)
		{

			g_currentOverlay->SetLeft(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH);
		
		};
		
		//g_currentOverlay->LimitToParent();
		
		if(g_currentOverlay->GetLeft() < 0.0)
		{
			g_currentOverlay->SetLeft(0.0 + 0.727);
		}
		elseif(g_currentOverlay->GetLeft() > 0.24)
		{
			g_currentOverlay->SetLeft(0.23 + 0.727);			
		};
	
		
		l_morphScale = (g_currentOverlay->GetLeft())/g_sliderWidth;
		
		
		OverlayElement_GetByName("Menu/Morph/porteGlissiere/Glissiere6")->SetLeft(0.727);
		g_porte_1Node->SetPosition(SetVector3(((l_morphScale*1000.0)/1.0)*30.0 , 0.0 , 0.0 )) ;
		g_porte_2Node->SetPosition(SetVector3(0.0 , 0.0 , 0.0 )) ;
		Mirror_Update("TestMirror");
	};
};

void StartAnimationSlider6()
{
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{
	
		if(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH > 0.725 && MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH < 0.96)
		{

			g_currentOverlay->SetLeft(MOUSE_POSITION_X-4.0/GENERAL_SCREEN_WIDTH);
		
		};
		
		//g_currentOverlay->LimitToParent();
		
		if(g_currentOverlay->GetLeft() < 0.0)
		{
			g_currentOverlay->SetLeft(0.0 + 0.727);
		}
		elseif(g_currentOverlay->GetLeft() > 0.24)
		{
			g_currentOverlay->SetLeft(0.23 + 0.727);			
		};
	
		
		l_morphScale = (g_currentOverlay->GetLeft())/g_sliderWidth;
		OverlayElement_GetByName("Menu/Morph/porteGlissiere/Glissiere5")->SetLeft(0.727);
		g_porte_1Node->SetPosition(SetVector3(  0.0  ,0.0	, 0.0   )) ;
		g_porte_2Node->SetPosition(SetVector3(  ((l_morphScale*1000.0)/1.0)*(-30.0)  ,0.0	, 0.0   )) ;
		Mirror_Update("TestMirror");
	};
};



Overlay_SetAction("Bouton1")
{		
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{
		current_zoom = V3_GetLength((RootCamera->GetPosition()) * (1.0 + (CURRENTTIMER_TIME_LEFT)));
		if(current_zoom > 450.0)
		{
			current_zoom = 450.0;
		};
		RootCamera->SetPosition((RootCamera->GetPosition()) * (current_zoom / V3_GetLength(RootCamera->GetPosition())));
	};
};
Overlay_SetAction("Bouton2")
{		
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{
		current_zoom = V3_GetLength((RootCamera->GetPosition()) * (1.0 - (CURRENTTIMER_TIME_LEFT)));
		if(current_zoom < 120.0)
		{
			current_zoom = 120.0;
		};
		RootCamera->SetPosition((RootCamera->GetPosition()) * (current_zoom / V3_GetLength(RootCamera->GetPosition())));
	};
};
Overlay_SetAction("Bouton3")
{		
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{
		current_pitch = previous_pitch + (100.0*CURRENTTIMER_TIME_LEFT);
		if(current_pitch > (0.0))
		{
			current_pitch = (0.0);
		};
		RootCamera->GetParent()->Pitch(current_pitch-previous_pitch);
		previous_pitch = current_pitch;
	};
};
Overlay_SetAction("Bouton4")
{		
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{
		current_pitch = previous_pitch + ((-100.0)*CURRENTTIMER_TIME_LEFT);
		if(current_pitch < (-80.0))
		{
			current_pitch = (-80.0);
		};
		RootCamera->GetParent()->Pitch(current_pitch-previous_pitch);
		previous_pitch = current_pitch;
	};
};
Overlay_SetAction("Bouton5")
{		
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{
		RootCamera->GetParent()->Yaw(150.0*CURRENTTIMER_TIME_LEFT);
	};
};
Overlay_SetAction("Bouton6")
{		
	timer("mouse_LButtonDown",TIMERTYPE_PERMANENT,0.0)
	{
		RootCamera->GetParent()->Yaw(-150.0*CURRENTTIMER_TIME_LEFT);
		
	};
	
};


Overlay_SetAction("Menu/Morph/porteGlissiere1")
{
	g_currentOverlay = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Glissiere1");
	g_sliderWidth = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Rail1")->GetWidth();
	StartAnimationSlider1();	
};

Overlay_SetAction("Menu/Morph/porteGlissiere2")
{
	g_currentOverlay = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Glissiere2");
	g_sliderWidth = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Rail2")->GetWidth();
	StartAnimationSlider2();	
};

Overlay_SetAction("Menu/Morph/porteGlissiere3")
{
	g_currentOverlay = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Glissiere3");
	g_sliderWidth = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Rail3")->GetWidth();
	StartAnimationSlider3();	
};


Overlay_SetAction("Menu/Morph/porteGlissiere4")
{
	g_currentOverlay = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Glissiere4");
	g_sliderWidth = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Rail4")->GetWidth();
	StartAnimationSlider4();	
};

Overlay_SetAction("Menu/Morph/porteGlissiere5")
{
	g_currentOverlay = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Glissiere5");
	g_sliderWidth = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Rail5")->GetWidth();
	StartAnimationSlider5();	
};

Overlay_SetAction("Menu/Morph/porteGlissiere6")
{
	g_currentOverlay = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Glissiere6");
	g_sliderWidth = OverlayElement_GetByName("Menu/Morph/porteGlissiere/Rail6")->GetWidth();
	StartAnimationSlider6();	
};

void Mouse_LButtonDown()
{	
	
	l_objectSelected = MousePickupObject( MOUSE_POSITION_X, MOUSE_POSITION_Y, false);
	
	position = l_objectSelected->GetParent()->GetPosition();
	
	
	if(strFind(l_objectSelected->GetName() , "tirroir1" ) == 0)
	{	
	
		if( g_Movetirroir1_out )
		{		
			timer("Movetirroir1",TIMERTYPE_CONTINUOUS,0.5)
			{
				l_objectSelected->GetParent()->SetPosition(V3_SinusInterpolation( position ,SetVector3(0.0,0.0,30.0) ,  CURRENTTIMER_TIME_LEFT*2.0 ) );
				Mirror_Update("TestMirror");
			};
			timer("Moveporte1END",TIMERTYPE_ONCE,0.5)
			{
				g_canMovetirroir1 = true;
				g_Movetirroir1_out = false;
				Mirror_Update("TestMirror");
			};
		}
		else
		{			
			timer("Movetirroir1",TIMERTYPE_CONTINUOUS,0.5)
			{
				l_objectSelected->GetParent()->SetPosition(V3_SinusInterpolation( SetVector3(0.0,0.0,0.0) , position , CURRENTTIMER_TIME_ELAPSED*2.0 ) );
				Mirror_Update("TestMirror");
			};
			timer("Moveporte1END",TIMERTYPE_ONCE,0.5)
			{
				g_canMovetirroir1 = true;
				g_Movetirroir1_out = true;
				Mirror_Update("TestMirror");
			};
		};

	};
	
	if(strFind(l_objectSelected->GetName() , "tirroir2" ) == 0)
	{	
		if( g_Movetirroir2_out )
		{
			timer("Movetirroir2",TIMERTYPE_CONTINUOUS,0.5)
			{
				l_objectSelected->GetParent()->SetPosition(V3_SinusInterpolation( position , SetVector3(0.0,0.0,30.0) , CURRENTTIMER_TIME_LEFT*2.0 ) );
				Mirror_Update("TestMirror");
			};
			timer("Moveporte2END",TIMERTYPE_ONCE,0.5)
			{
				g_canMovetirroir2 = true;
				g_Movetirroir2_out = false;
				Mirror_Update("TestMirror");
			};
		}
		else
		{
		
			timer("Movetirroir2",TIMERTYPE_CONTINUOUS,0.5)
			{
				l_objectSelected->GetParent()->SetPosition(V3_SinusInterpolation( SetVector3(0.0,0.0,0.0) , position , CURRENTTIMER_TIME_ELAPSED*2.0 ) );
				Mirror_Update("TestMirror");
			};
			timer("Moveporte2END",TIMERTYPE_ONCE,0.5)
			{
				g_canMovetirroir2 = true;
				g_Movetirroir2_out = true;
				Mirror_Update("TestMirror");
			};
		};
	};
	
	if(strFind(l_objectSelected->GetName() , "tirroir3" ) == 0)
	{	
		if( g_Movetirroir3_out )
		{
			timer("Movetirroir3",TIMERTYPE_CONTINUOUS,0.5)
			{
				l_objectSelected->GetParent()->SetPosition(V3_SinusInterpolation( position , SetVector3(0.0,0.0,30.0) , CURRENTTIMER_TIME_LEFT*2.0 ) );
				Mirror_Update("TestMirror");
			};
			timer("Moveporte3END",TIMERTYPE_ONCE,0.5)
			{
				g_canMovetirroir3 = true;
				g_Movetirroir3_out = false;
				Mirror_Update("TestMirror");
			};
		}
		else
		{
		
			timer("Movetirroir3",TIMERTYPE_CONTINUOUS,0.5)
			{
				l_objectSelected->GetParent()->SetPosition(V3_SinusInterpolation( SetVector3(0.0,0.0,0.0) , position , CURRENTTIMER_TIME_ELAPSED*2.0 ) );
				Mirror_Update("TestMirror");
			};
			timer("Moveporte3END",TIMERTYPE_ONCE,0.5)
			{
				g_canMovetirroir3 = true;
				g_Movetirroir3_out = true;
				Mirror_Update("TestMirror");
			};
		};
	};
	
	if(strFind(l_objectSelected->GetName() , "tirroir4" ) == 0)
	{	
		if( g_Movetirroir4_out )
		{
			timer("Movetirroir4",TIMERTYPE_CONTINUOUS,0.5)
			{
				l_objectSelected->GetParent()->SetPosition(V3_SinusInterpolation( position , SetVector3(0.0,0.0,30.0) , CURRENTTIMER_TIME_LEFT*2.0 ) );
				Mirror_Update("TestMirror");
			};
			timer("Moveporte4END",TIMERTYPE_ONCE,0.5)
			{
				g_canMovetirroir4 = true;
				g_Movetirroir4_out = false;
				Mirror_Update("TestMirror");
			};
		}
		else
		{
		
			timer("Movetirroir4",TIMERTYPE_CONTINUOUS,0.5)
			{
				l_objectSelected->GetParent()->SetPosition(V3_SinusInterpolation( SetVector3(0.0,0.0,0.0) , position , CURRENTTIMER_TIME_ELAPSED*2.0 ) );
				Mirror_Update("TestMirror");
			};
			timer("Moveporte4END",TIMERTYPE_ONCE,0.5)
			{
				g_canMovetirroir4 = true;
				g_Movetirroir4_out = true;
				Mirror_Update("TestMirror");
			};
		};
	};
	
	if(strFind(l_objectSelected->GetName() , "porte_1" ) == 0)
	{	
		if( !g_Moveporte2_out )
		{
			if( g_canMoveporte1 )
			{
				g_canMoveporte1 = false;
				if( g_Moveporte1_out )
				{
					g_canMoveporte1 = true;
					g_Moveporte1_out = false;
					
					timer("Moveporte1",TIMERTYPE_CONTINUOUS,0.5)
					{
						g_porte_1Node->SetPosition(V3_SinusInterpolation( position , SetVector3(0.0,0.0,0.0) , CURRENTTIMER_TIME_LEFT*2.0 ) );
						Mirror_Update("TestMirror");
					};
					
				}
				else
				{
					g_canMoveporte1 = true;
					g_Moveporte1_out = true;
				
					timer("Moveporte1",TIMERTYPE_CONTINUOUS,0.5)
					{
						g_porte_1Node->SetPosition(V3_SinusInterpolation( SetVector3(30.0,0.0,0.0) , position , CURRENTTIMER_TIME_ELAPSED*2.0 ) );
						Mirror_Update("TestMirror");
					};

				};
			};
		};
	};
	
	
	if(strFind(l_objectSelected->GetName() , "porte_2" ) == 0)
	{	
		if( !g_Moveporte1_out )
		{
			if( g_canMoveporte2 )
			{
				g_canMoveporte2 = false;
				if( g_Moveporte2_out )
				{	
					g_canMoveporte2 = true;
					g_Moveporte2_out = false;
				
					timer("Moveporte2",TIMERTYPE_CONTINUOUS,0.5)
					{
						g_porte_2Node->SetPosition(V3_SinusInterpolation( position , SetVector3(0.0,0.0,0.0) ,  CURRENTTIMER_TIME_LEFT*2.0 ) );
						Mirror_Update("TestMirror");
					};

				}
				else
				{	
					g_canMoveporte2 = true;
					g_Moveporte2_out = true;
				
					timer("Moveporte2",TIMERTYPE_CONTINUOUS,0.5)
					{
						g_porte_2Node->SetPosition(V3_SinusInterpolation( SetVector3(-30.0,0.0,0.0) , position , CURRENTTIMER_TIME_ELAPSED*2.0 ) );
						Mirror_Update("TestMirror");
					};

				};
			};
		};
	};
};

void Mouse_LButtonUp()
{
	Timer_Kill("mouse_LButtonDowntirroir");
	Timer_Kill("mouse_LButtonDown");

};



void Mouse_RButtonDown()
{
	Timer_Kill("mouse_RButtonDown");
	timer("mouse_RButtonDown",TIMERTYPE_PERMANENT,0.0)
	{
		RootCamera->GetParent()->Yaw(150.0*MOUSE_DIFFERENCE_X);
		current_pitch = previous_pitch + (100.0*MOUSE_DIFFERENCE_Y);
		if(current_pitch>(0.0))
		{
			current_pitch = (0.0);
		}
		elseif(current_pitch<(-80.0))
		{
			current_pitch = (-80.0);
		};
		RootCamera->GetParent()->Pitch(current_pitch-previous_pitch);
		previous_pitch = current_pitch;
	};
	
};


void Mouse_RButtonUp()
{
	Timer_Kill("mouse_RButtonDown");

};

void Mouse_WheelUp()
{
	current_zoom = V3_GetLength((RootCamera->GetPosition()) * 0.90);
	if(current_zoom < 120.0)
	{
		current_zoom = 120.0;
	};
	RootCamera->SetPosition((RootCamera->GetPosition()) * (current_zoom / V3_GetLength(RootCamera->GetPosition())));
};

void Mouse_WheelDown()
{
	current_zoom = V3_GetLength((RootCamera->GetPosition()) * 1.11);
	if(current_zoom > 450.0)
	{
		current_zoom = 450.0;
	};
	RootCamera->SetPosition((RootCamera->GetPosition()) * (current_zoom / V3_GetLength(RootCamera->GetPosition())));
};


Overlay_SetAction("MenuObject/Retractable")
{
	if ( ! l_menuMoving)
	{
		l_menuMoving = true;
		if (l_menuOut)
		{
			timer("BougeLeMenu",TIMERTYPE_CONTINUOUS, 0.5)
			{
				OverlayElement_GetByName( "MenuObject")->SetLeft( 0.61 + 0.28 * (CURRENTTIMER_TIME_ELAPSED / CURRENTTIMER_TIME_BASE));
			};
			
			timer("BougeLeMenuEnd",TIMERTYPE_ONCE, 0.5)
			{
				Timer_Kill( "BougeLeMenu");
				OverlayElement_GetByName( "MenuObject")->SetLeft( 0.89);
				l_menuMoving = false;
				OverlayElement_GetByName( "MenuObject/Retractable")->SetMaterial( "Hud/Fleche_Gauche");
			};
		}
		else
		{
			timer("BougeLeMenu",TIMERTYPE_CONTINUOUS, 0.5)
			{
				OverlayElement_GetByName( "MenuObject")->SetLeft( 0.89 - 0.28 * (CURRENTTIMER_TIME_ELAPSED / CURRENTTIMER_TIME_BASE));
			};
			
			timer("BougeLeMenuEnd",TIMERTYPE_ONCE, 0.5)
			{
				Timer_Kill( "BougeLeMenu");
				OverlayElement_GetByName( "MenuObject")->SetLeft( 0.61);
				l_menuMoving = false;
				OverlayElement_GetByName( "MenuObject/Retractable")->SetMaterial( "Hud/Fleche_Droite");
			};
		};
		l_menuOut = ! l_menuOut;
	};
};


Overlay_SetAction("axesXYZ")
{
	if(axesvisible)
	{
		Object_GetByName("axes")->Hide();
		SceneNode_GetByName("axesX")->SetXPosition(10000.0);
		SceneNode_GetByName("axesX")->SetYPosition(10000.0);
		SceneNode_GetByName("axesX")->SetZPosition(10000.0);
		SceneNode_GetByName("axesY")->SetXPosition(10000.0);
		SceneNode_GetByName("axesY")->SetYPosition(10000.0);
		SceneNode_GetByName("axesY")->SetZPosition(10000.0);
		SceneNode_GetByName("axesZ")->SetXPosition(10000.0);
		SceneNode_GetByName("axesZ")->SetYPosition(10000.0);
		SceneNode_GetByName("axesZ")->SetZPosition(10000.0);
	}
	else
	{
		Object_GetByName("axes")->Show();
		SceneNode_GetByName("axesX")->SetXPosition(0.0);
		SceneNode_GetByName("axesX")->SetYPosition(0.0);
		SceneNode_GetByName("axesX")->SetZPosition(0.0);
		SceneNode_GetByName("axesY")->SetXPosition(0.0);
		SceneNode_GetByName("axesY")->SetYPosition(0.0);
		SceneNode_GetByName("axesY")->SetZPosition(0.0);
		SceneNode_GetByName("axesZ")->SetXPosition(0.0);
		SceneNode_GetByName("axesZ")->SetYPosition(0.0);
		SceneNode_GetByName("axesZ")->SetZPosition(0.0);
	};
	
	axesvisible = !axesvisible;

	Mirror_Update("TestMirror");
};


Mirror_Update("TestMirror");
